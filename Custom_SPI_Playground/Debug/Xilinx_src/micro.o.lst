   1              		.cpu arm926ej-s
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.file	"micro.c"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.global	xsvf_pfDoCmd
  17              		.section	.data.xsvf_pfDoCmd,"aw",%progbits
  18              		.align	2
  21              	xsvf_pfDoCmd:
  22 0000 00000000 		.word	xsvfDoXCOMPLETE
  23 0004 00000000 		.word	xsvfDoXTDOMASK
  24 0008 00000000 		.word	xsvfDoXSIR
  25 000c 00000000 		.word	xsvfDoXSDR
  26 0010 00000000 		.word	xsvfDoXRUNTEST
  27 0014 00000000 		.word	xsvfDoIllegalCmd
  28 0018 00000000 		.word	xsvfDoIllegalCmd
  29 001c 00000000 		.word	xsvfDoXREPEAT
  30 0020 00000000 		.word	xsvfDoXSDRSIZE
  31 0024 00000000 		.word	xsvfDoXSDRTDO
  32 0028 00000000 		.word	xsvfDoXSETSDRMASKS
  33 002c 00000000 		.word	xsvfDoXSDRINC
  34 0030 00000000 		.word	xsvfDoXSDRBCE
  35 0034 00000000 		.word	xsvfDoXSDRBCE
  36 0038 00000000 		.word	xsvfDoXSDRBCE
  37 003c 00000000 		.word	xsvfDoXSDRTDOBCE
  38 0040 00000000 		.word	xsvfDoXSDRTDOBCE
  39 0044 00000000 		.word	xsvfDoXSDRTDOBCE
  40 0048 00000000 		.word	xsvfDoXSTATE
  41 004c 00000000 		.word	xsvfDoXENDXR
  42 0050 00000000 		.word	xsvfDoXENDXR
  43 0054 00000000 		.word	xsvfDoXSIR2
  44 0058 00000000 		.word	xsvfDoXCOMMENT
  45 005c 00000000 		.word	xsvfDoXWAIT
  46              		.section	.text.xsvfInfoInit,"ax",%progbits
  47              		.align	2
  48              		.global	xsvfInfoInit
  50              	xsvfInfoInit:
  51              	.LFB0:
  52              		.file 1 "../Xilinx_src/micro.c"
   1:../Xilinx_src/micro.c **** /*****************************************************************************
   2:../Xilinx_src/micro.c **** * file:         micro.c
   3:../Xilinx_src/micro.c **** * abstract:     This file contains the function, xsvfExecute(),
   4:../Xilinx_src/micro.c **** *               call for interpreting the XSVF commands.
   5:../Xilinx_src/micro.c **** * Usage:        Call xsvfExecute() to process XSVF data.
   6:../Xilinx_src/micro.c **** *               The XSVF data is retrieved by readByte() in ports.c
   7:../Xilinx_src/micro.c **** *               Remove the main function if you already have one.
   8:../Xilinx_src/micro.c **** * Options:      XSVF_SUPPORT_COMPRESSION
   9:../Xilinx_src/micro.c **** *                   This define supports the XC9500/XL compression scheme.
  10:../Xilinx_src/micro.c **** *                   This define adds support for XSDRINC and XSETSDRMASKS.
  11:../Xilinx_src/micro.c **** *               XSVF_SUPPORT_ERRORCODES
  12:../Xilinx_src/micro.c **** *                   This define causes the xsvfExecute function to return
  13:../Xilinx_src/micro.c **** *                   an error code for specific errors.  See error codes below.
  14:../Xilinx_src/micro.c **** *                   If this is not defined, the return value defaults to the
  15:../Xilinx_src/micro.c **** *                   legacy values for backward compatibility:
  16:../Xilinx_src/micro.c **** *                   1 = success;  0 = failure.
  17:../Xilinx_src/micro.c **** * Debugging:    DEBUG_MODE (Legacy name)
  18:../Xilinx_src/micro.c **** *               Define DEBUG_MODE to compile with debugging features.
  19:../Xilinx_src/micro.c **** *               Both micro.c and ports.c must be compiled with the DEBUG_MODE
  20:../Xilinx_src/micro.c **** *               defined to enable the standalone main implementation in
  21:../Xilinx_src/micro.c **** *               micro.c that reads XSVF from a file.
  22:../Xilinx_src/micro.c **** * History:      v2.00   - Original XSVF implementation.
  23:../Xilinx_src/micro.c **** *               v4.04   - Added delay at end of XSIR for XC18v00 support.
  24:../Xilinx_src/micro.c **** *                         Added new commands for CoolRunner support:
  25:../Xilinx_src/micro.c **** *                         XSTATE, XENDIR, XENDDR
  26:../Xilinx_src/micro.c **** *               v4.05   - Cleanup micro.c but leave ports.c intact.
  27:../Xilinx_src/micro.c **** *               v4.06   - Fix xsvfGotoTapState for retry transition.
  28:../Xilinx_src/micro.c **** *               v4.07   - Update example waitTime implementations for
  29:../Xilinx_src/micro.c **** *                         compatibility with Virtex-II.
  30:../Xilinx_src/micro.c **** *               v4.10   - Add new XSIR2 command that supports a 2-byte
  31:../Xilinx_src/micro.c **** *                         IR-length parameter for IR shifts > 255 bits.
  32:../Xilinx_src/micro.c **** *               v4.11   - No change.  Update version to match SVF2XSVF xlator.
  33:../Xilinx_src/micro.c **** *               v4.14   - Added XCOMMENT.
  34:../Xilinx_src/micro.c **** *               v5.00   - Improve XSTATE support.
  35:../Xilinx_src/micro.c **** *                         Added XWAIT.
  36:../Xilinx_src/micro.c **** *               v5.01   - make sure that TCK is low during RUNTEST wait for
  37:../Xilinx_src/micro.c **** *                         XC18V00/XCF00 support.  Only change is in PORTS.C
  38:../Xilinx_src/micro.c **** *                         waitTime() function for implementations that do NOT
  39:../Xilinx_src/micro.c **** *                         pulse TCK during the waitTime.
  40:../Xilinx_src/micro.c **** *****************************************************************************/
  41:../Xilinx_src/micro.c **** 
  42:../Xilinx_src/micro.c **** #define FX3 1	// Added mainly for DEBUG printing
  43:../Xilinx_src/micro.c **** #if (FX3)
  44:../Xilinx_src/micro.c **** extern unsigned int CyU3PDebugPrint (unsigned char priority, char *message, ... );
  45:../Xilinx_src/micro.c **** #endif
  46:../Xilinx_src/micro.c **** 
  47:../Xilinx_src/micro.c **** /*============================================================================
  48:../Xilinx_src/micro.c **** * #pragmas
  49:../Xilinx_src/micro.c **** ============================================================================*/
  50:../Xilinx_src/micro.c **** #ifdef  _MSC_VER
  51:../Xilinx_src/micro.c ****     #pragma warning( disable : 4100 )
  52:../Xilinx_src/micro.c **** #endif  /* _MSC_VER */
  53:../Xilinx_src/micro.c **** 
  54:../Xilinx_src/micro.c **** /*============================================================================
  55:../Xilinx_src/micro.c **** * #include files
  56:../Xilinx_src/micro.c **** ============================================================================*/
  57:../Xilinx_src/micro.c **** //#define DEBUG_MODE
  58:../Xilinx_src/micro.c **** #ifdef  DEBUG_MODE
  59:../Xilinx_src/micro.c **** 	#if (FX3 == 0)
  60:../Xilinx_src/micro.c **** 		#include <stdio.h>
  61:../Xilinx_src/micro.c **** 		#include <stdlib.h>
  62:../Xilinx_src/micro.c **** 		#include <string.h>
  63:../Xilinx_src/micro.c **** 		#include <time.h>
  64:../Xilinx_src/micro.c **** 	#endif
  65:../Xilinx_src/micro.c **** #else
  66:../Xilinx_src/micro.c **** #define xsvf_iDebugLevel 0
  67:../Xilinx_src/micro.c **** #endif  /* DEBUG_MODE */
  68:../Xilinx_src/micro.c **** 
  69:../Xilinx_src/micro.c **** #include "micro.h"
  70:../Xilinx_src/micro.c **** #include "lenval.h"
  71:../Xilinx_src/micro.c **** #include "ports.h"
  72:../Xilinx_src/micro.c **** 
  73:../Xilinx_src/micro.c **** 
  74:../Xilinx_src/micro.c **** /*============================================================================
  75:../Xilinx_src/micro.c **** * XSVF #define
  76:../Xilinx_src/micro.c **** ============================================================================*/
  77:../Xilinx_src/micro.c **** 
  78:../Xilinx_src/micro.c **** #define XSVF_VERSION    "5.01"
  79:../Xilinx_src/micro.c **** 
  80:../Xilinx_src/micro.c **** /*****************************************************************************
  81:../Xilinx_src/micro.c **** * Define:       XSVF_SUPPORT_COMPRESSION
  82:../Xilinx_src/micro.c **** * Description:  Define this to support the XC9500/XL XSVF data compression
  83:../Xilinx_src/micro.c **** *               scheme.
  84:../Xilinx_src/micro.c **** *               Code size can be reduced by NOT supporting this feature.
  85:../Xilinx_src/micro.c **** *               However, you must use the -nc (no compress) option when
  86:../Xilinx_src/micro.c **** *               translating SVF to XSVF using the SVF2XSVF translator.
  87:../Xilinx_src/micro.c **** *               Corresponding, uncompressed XSVF may be larger.
  88:../Xilinx_src/micro.c **** *****************************************************************************/
  89:../Xilinx_src/micro.c **** #ifndef XSVF_SUPPORT_COMPRESSION
  90:../Xilinx_src/micro.c ****     #define XSVF_SUPPORT_COMPRESSION    1
  91:../Xilinx_src/micro.c **** #endif
  92:../Xilinx_src/micro.c **** 
  93:../Xilinx_src/micro.c **** /*****************************************************************************
  94:../Xilinx_src/micro.c **** * Define:       XSVF_SUPPORT_ERRORCODES
  95:../Xilinx_src/micro.c **** * Description:  Define this to support the new XSVF error codes.
  96:../Xilinx_src/micro.c **** *               (The original XSVF player just returned 1 for success and
  97:../Xilinx_src/micro.c **** *               0 for an unspecified failure.)
  98:../Xilinx_src/micro.c **** *****************************************************************************/
  99:../Xilinx_src/micro.c **** #ifndef XSVF_SUPPORT_ERRORCODES
 100:../Xilinx_src/micro.c ****     #define XSVF_SUPPORT_ERRORCODES     1
 101:../Xilinx_src/micro.c **** #endif
 102:../Xilinx_src/micro.c **** 
 103:../Xilinx_src/micro.c **** #ifdef  XSVF_SUPPORT_ERRORCODES
 104:../Xilinx_src/micro.c ****     #define XSVF_ERRORCODE(errorCode)   errorCode
 105:../Xilinx_src/micro.c **** #else   /* Use legacy error code */
 106:../Xilinx_src/micro.c ****     #define XSVF_ERRORCODE(errorCode)   ((errorCode==XSVF_ERROR_NONE)?1:0)
 107:../Xilinx_src/micro.c **** #endif  /* XSVF_SUPPORT_ERRORCODES */
 108:../Xilinx_src/micro.c **** 
 109:../Xilinx_src/micro.c **** 
 110:../Xilinx_src/micro.c **** /*****************************************************************************
 111:../Xilinx_src/micro.c **** * Define:       XSVF_MAIN
 112:../Xilinx_src/micro.c **** * Description:  Define this to compile with a main function for standalone
 113:../Xilinx_src/micro.c **** *               debugging.
 114:../Xilinx_src/micro.c **** *****************************************************************************/
 115:../Xilinx_src/micro.c **** #ifndef XSVF_MAIN
 116:../Xilinx_src/micro.c ****     #ifdef DEBUG_MODE
 117:../Xilinx_src/micro.c ****         #define XSVF_MAIN   1
 118:../Xilinx_src/micro.c ****     #endif  /* DEBUG_MODE */
 119:../Xilinx_src/micro.c **** #endif  /* XSVF_MAIN */
 120:../Xilinx_src/micro.c **** 
 121:../Xilinx_src/micro.c **** 
 122:../Xilinx_src/micro.c **** /*============================================================================
 123:../Xilinx_src/micro.c **** * DEBUG_MODE #define
 124:../Xilinx_src/micro.c **** ============================================================================*/
 125:../Xilinx_src/micro.c **** 
 126:../Xilinx_src/micro.c **** #ifdef  DEBUG_MODE
 127:../Xilinx_src/micro.c **** #if (FX3)
 128:../Xilinx_src/micro.c **** 	#define XSVFDBG_PRINTF(iDebugLevel,pzFormat) CyU3PDebugPrint(4, pzFormat)
 129:../Xilinx_src/micro.c **** 	#define XSVFDBG_PRINTF1(iDebugLevel,pzFormat,arg1) CyU3PDebugPrint(4,pzFormat,arg1)
 130:../Xilinx_src/micro.c **** 	#define XSVFDBG_PRINTF2(iDebugLevel,pzFormat,arg1,arg2) CyU3PDebugPrint(4,pzFormat,arg1,arg2)
 131:../Xilinx_src/micro.c **** 	#define XSVFDBG_PRINTF3(iDebugLevel,pzFormat,arg1,arg2,arg3) CyU3PDebugPrint(4,pzFormat,arg1,arg2,
 132:../Xilinx_src/micro.c **** 	#define XSVFDBG_PRINTLENVAL(iDebugLevel,plenVal) xsvfPrintLenVal(plenVal)
 133:../Xilinx_src/micro.c **** 	#define putchar(x) CyU3PDebugPrint(4, "%c", x)
 134:../Xilinx_src/micro.c **** #else
 135:../Xilinx_src/micro.c ****     #define XSVFDBG_PRINTF(iDebugLevel,pzFormat) \
 136:../Xilinx_src/micro.c ****                 { if ( xsvf_iDebugLevel >= iDebugLevel ) \
 137:../Xilinx_src/micro.c ****                     printf( pzFormat ); }
 138:../Xilinx_src/micro.c ****     #define XSVFDBG_PRINTF1(iDebugLevel,pzFormat,arg1) \
 139:../Xilinx_src/micro.c ****                 { if ( xsvf_iDebugLevel >= iDebugLevel ) \
 140:../Xilinx_src/micro.c ****                     printf( pzFormat, arg1 ); }
 141:../Xilinx_src/micro.c ****     #define XSVFDBG_PRINTF2(iDebugLevel,pzFormat,arg1,arg2) \
 142:../Xilinx_src/micro.c ****                 { if ( xsvf_iDebugLevel >= iDebugLevel ) \
 143:../Xilinx_src/micro.c ****                     printf( pzFormat, arg1, arg2 ); }
 144:../Xilinx_src/micro.c ****     #define XSVFDBG_PRINTF3(iDebugLevel,pzFormat,arg1,arg2,arg3) \
 145:../Xilinx_src/micro.c ****                 { if ( xsvf_iDebugLevel >= iDebugLevel ) \
 146:../Xilinx_src/micro.c ****                     printf( pzFormat, arg1, arg2, arg3 ); }
 147:../Xilinx_src/micro.c ****     #define XSVFDBG_PRINTLENVAL(iDebugLevel,plenVal) \
 148:../Xilinx_src/micro.c ****                 { if ( xsvf_iDebugLevel >= iDebugLevel ) \
 149:../Xilinx_src/micro.c ****                     xsvfPrintLenVal(plenVal); }
 150:../Xilinx_src/micro.c **** #endif	// FX3
 151:../Xilinx_src/micro.c **** #else   /* !DEBUG_MODE */
 152:../Xilinx_src/micro.c ****     #define XSVFDBG_PRINTF(iDebugLevel,pzFormat)
 153:../Xilinx_src/micro.c ****     #define XSVFDBG_PRINTF1(iDebugLevel,pzFormat,arg1)
 154:../Xilinx_src/micro.c ****     #define XSVFDBG_PRINTF2(iDebugLevel,pzFormat,arg1,arg2)
 155:../Xilinx_src/micro.c ****     #define XSVFDBG_PRINTF3(iDebugLevel,pzFormat,arg1,arg2,arg3)
 156:../Xilinx_src/micro.c ****     #define XSVFDBG_PRINTLENVAL(iDebugLevel,plenVal)
 157:../Xilinx_src/micro.c **** #endif  /* DEBUG_MODE */
 158:../Xilinx_src/micro.c **** 
 159:../Xilinx_src/micro.c **** 
 160:../Xilinx_src/micro.c **** /*============================================================================
 161:../Xilinx_src/micro.c **** * XSVF Type Declarations
 162:../Xilinx_src/micro.c **** ============================================================================*/
 163:../Xilinx_src/micro.c **** 
 164:../Xilinx_src/micro.c **** /*****************************************************************************
 165:../Xilinx_src/micro.c **** * Struct:       SXsvfInfo
 166:../Xilinx_src/micro.c **** * Description:  This structure contains all of the data used during the
 167:../Xilinx_src/micro.c **** *               execution of the XSVF.  Some data is persistent, predefined
 168:../Xilinx_src/micro.c **** *               information (e.g. lRunTestTime).  The bulk of this struct's
 169:../Xilinx_src/micro.c **** *               size is due to the lenVal structs (defined in lenval.h)
 170:../Xilinx_src/micro.c **** *               which contain buffers for the active shift data.  The MAX_LEN
 171:../Xilinx_src/micro.c **** *               #define in lenval.h defines the size of these buffers.
 172:../Xilinx_src/micro.c **** *               These buffers must be large enough to store the longest
 173:../Xilinx_src/micro.c **** *               shift data in your XSVF file.  For example:
 174:../Xilinx_src/micro.c **** *                   MAX_LEN >= ( longest_shift_data_in_bits / 8 )
 175:../Xilinx_src/micro.c **** *               Because the lenVal struct dominates the space usage of this
 176:../Xilinx_src/micro.c **** *               struct, the rough size of this struct is:
 177:../Xilinx_src/micro.c **** *                   sizeof( SXsvfInfo ) ~= MAX_LEN * 7 (number of lenVals)
 178:../Xilinx_src/micro.c **** *               xsvfInitialize() contains initialization code for the data
 179:../Xilinx_src/micro.c **** *               in this struct.
 180:../Xilinx_src/micro.c **** *               xsvfCleanup() contains cleanup code for the data in this
 181:../Xilinx_src/micro.c **** *               struct.
 182:../Xilinx_src/micro.c **** *****************************************************************************/
 183:../Xilinx_src/micro.c **** typedef struct tagSXsvfInfo
 184:../Xilinx_src/micro.c **** {
 185:../Xilinx_src/micro.c ****     /* XSVF status information */
 186:../Xilinx_src/micro.c ****     unsigned char   ucComplete;         /* 0 = running; 1 = complete */
 187:../Xilinx_src/micro.c ****     unsigned char   ucCommand;          /* Current XSVF command byte */
 188:../Xilinx_src/micro.c ****     long            lCommandCount;      /* Number of commands processed */
 189:../Xilinx_src/micro.c ****     int             iErrorCode;         /* An error code. 0 = no error. */
 190:../Xilinx_src/micro.c **** 
 191:../Xilinx_src/micro.c ****     /* TAP state/sequencing information */
 192:../Xilinx_src/micro.c ****     unsigned char   ucTapState;         /* Current TAP state */
 193:../Xilinx_src/micro.c ****     unsigned char   ucEndIR;            /* ENDIR TAP state (See SVF) */
 194:../Xilinx_src/micro.c ****     unsigned char   ucEndDR;            /* ENDDR TAP state (See SVF) */
 195:../Xilinx_src/micro.c **** 
 196:../Xilinx_src/micro.c ****     /* RUNTEST information */
 197:../Xilinx_src/micro.c ****     unsigned char   ucMaxRepeat;        /* Max repeat loops (for xc9500/xl) */
 198:../Xilinx_src/micro.c ****     long            lRunTestTime;       /* Pre-specified RUNTEST time (usec) */
 199:../Xilinx_src/micro.c **** 
 200:../Xilinx_src/micro.c ****     /* Shift Data Info and Buffers */
 201:../Xilinx_src/micro.c ****     long            lShiftLengthBits;   /* Len. current shift data in bits */
 202:../Xilinx_src/micro.c ****     short           sShiftLengthBytes;  /* Len. current shift data in bytes */
 203:../Xilinx_src/micro.c **** 
 204:../Xilinx_src/micro.c ****     lenVal          lvTdi;              /* Current TDI shift data */
 205:../Xilinx_src/micro.c ****     lenVal          lvTdoExpected;      /* Expected TDO shift data */
 206:../Xilinx_src/micro.c ****     lenVal          lvTdoCaptured;      /* Captured TDO shift data */
 207:../Xilinx_src/micro.c ****     lenVal          lvTdoMask;          /* TDO mask: 0=dontcare; 1=compare */
 208:../Xilinx_src/micro.c **** 
 209:../Xilinx_src/micro.c **** #ifdef  XSVF_SUPPORT_COMPRESSION
 210:../Xilinx_src/micro.c ****     /* XSDRINC Data Buffers */
 211:../Xilinx_src/micro.c ****     lenVal          lvAddressMask;      /* Address mask for XSDRINC */
 212:../Xilinx_src/micro.c ****     lenVal          lvDataMask;         /* Data mask for XSDRINC */
 213:../Xilinx_src/micro.c ****     lenVal          lvNextData;         /* Next data for XSDRINC */
 214:../Xilinx_src/micro.c **** #endif  /* XSVF_SUPPORT_COMPRESSION */
 215:../Xilinx_src/micro.c **** } SXsvfInfo;
 216:../Xilinx_src/micro.c **** 
 217:../Xilinx_src/micro.c **** /* Declare pointer to functions that perform XSVF commands */
 218:../Xilinx_src/micro.c **** typedef int (*TXsvfDoCmdFuncPtr)( SXsvfInfo* );
 219:../Xilinx_src/micro.c **** 
 220:../Xilinx_src/micro.c **** 
 221:../Xilinx_src/micro.c **** /*============================================================================
 222:../Xilinx_src/micro.c **** * XSVF Command Bytes
 223:../Xilinx_src/micro.c **** ============================================================================*/
 224:../Xilinx_src/micro.c **** 
 225:../Xilinx_src/micro.c **** /* encodings of xsvf instructions */
 226:../Xilinx_src/micro.c **** #define XCOMPLETE        0
 227:../Xilinx_src/micro.c **** #define XTDOMASK         1
 228:../Xilinx_src/micro.c **** #define XSIR             2
 229:../Xilinx_src/micro.c **** #define XSDR             3
 230:../Xilinx_src/micro.c **** #define XRUNTEST         4
 231:../Xilinx_src/micro.c **** /* Reserved              5 */
 232:../Xilinx_src/micro.c **** /* Reserved              6 */
 233:../Xilinx_src/micro.c **** #define XREPEAT          7
 234:../Xilinx_src/micro.c **** #define XSDRSIZE         8
 235:../Xilinx_src/micro.c **** #define XSDRTDO          9
 236:../Xilinx_src/micro.c **** #define XSETSDRMASKS     10
 237:../Xilinx_src/micro.c **** #define XSDRINC          11
 238:../Xilinx_src/micro.c **** #define XSDRB            12
 239:../Xilinx_src/micro.c **** #define XSDRC            13
 240:../Xilinx_src/micro.c **** #define XSDRE            14
 241:../Xilinx_src/micro.c **** #define XSDRTDOB         15
 242:../Xilinx_src/micro.c **** #define XSDRTDOC         16
 243:../Xilinx_src/micro.c **** #define XSDRTDOE         17
 244:../Xilinx_src/micro.c **** #define XSTATE           18         /* 4.00 */
 245:../Xilinx_src/micro.c **** #define XENDIR           19         /* 4.04 */
 246:../Xilinx_src/micro.c **** #define XENDDR           20         /* 4.04 */
 247:../Xilinx_src/micro.c **** #define XSIR2            21         /* 4.10 */
 248:../Xilinx_src/micro.c **** #define XCOMMENT         22         /* 4.14 */
 249:../Xilinx_src/micro.c **** #define XWAIT            23         /* 5.00 */
 250:../Xilinx_src/micro.c **** /* Insert new commands here */
 251:../Xilinx_src/micro.c **** /* and add corresponding xsvfDoCmd function to xsvf_pfDoCmd below. */
 252:../Xilinx_src/micro.c **** #define XLASTCMD         24         /* Last command marker */
 253:../Xilinx_src/micro.c **** 
 254:../Xilinx_src/micro.c **** 
 255:../Xilinx_src/micro.c **** /*============================================================================
 256:../Xilinx_src/micro.c **** * XSVF Command Parameter Values
 257:../Xilinx_src/micro.c **** ============================================================================*/
 258:../Xilinx_src/micro.c **** 
 259:../Xilinx_src/micro.c **** #define XSTATE_RESET     0          /* 4.00 parameter for XSTATE */
 260:../Xilinx_src/micro.c **** #define XSTATE_RUNTEST   1          /* 4.00 parameter for XSTATE */
 261:../Xilinx_src/micro.c **** 
 262:../Xilinx_src/micro.c **** #define XENDXR_RUNTEST   0          /* 4.04 parameter for XENDIR/DR */
 263:../Xilinx_src/micro.c **** #define XENDXR_PAUSE     1          /* 4.04 parameter for XENDIR/DR */
 264:../Xilinx_src/micro.c **** 
 265:../Xilinx_src/micro.c **** /* TAP states */
 266:../Xilinx_src/micro.c **** #define XTAPSTATE_RESET     0x00
 267:../Xilinx_src/micro.c **** #define XTAPSTATE_RUNTEST   0x01    /* a.k.a. IDLE */
 268:../Xilinx_src/micro.c **** #define XTAPSTATE_SELECTDR  0x02
 269:../Xilinx_src/micro.c **** #define XTAPSTATE_CAPTUREDR 0x03
 270:../Xilinx_src/micro.c **** #define XTAPSTATE_SHIFTDR   0x04
 271:../Xilinx_src/micro.c **** #define XTAPSTATE_EXIT1DR   0x05
 272:../Xilinx_src/micro.c **** #define XTAPSTATE_PAUSEDR   0x06
 273:../Xilinx_src/micro.c **** #define XTAPSTATE_EXIT2DR   0x07
 274:../Xilinx_src/micro.c **** #define XTAPSTATE_UPDATEDR  0x08
 275:../Xilinx_src/micro.c **** #define XTAPSTATE_IRSTATES  0x09    /* All IR states begin here */
 276:../Xilinx_src/micro.c **** #define XTAPSTATE_SELECTIR  0x09
 277:../Xilinx_src/micro.c **** #define XTAPSTATE_CAPTUREIR 0x0A
 278:../Xilinx_src/micro.c **** #define XTAPSTATE_SHIFTIR   0x0B
 279:../Xilinx_src/micro.c **** #define XTAPSTATE_EXIT1IR   0x0C
 280:../Xilinx_src/micro.c **** #define XTAPSTATE_PAUSEIR   0x0D
 281:../Xilinx_src/micro.c **** #define XTAPSTATE_EXIT2IR   0x0E
 282:../Xilinx_src/micro.c **** #define XTAPSTATE_UPDATEIR  0x0F
 283:../Xilinx_src/micro.c **** 
 284:../Xilinx_src/micro.c **** /*============================================================================
 285:../Xilinx_src/micro.c **** * XSVF Function Prototypes
 286:../Xilinx_src/micro.c **** ============================================================================*/
 287:../Xilinx_src/micro.c **** 
 288:../Xilinx_src/micro.c **** int xsvfDoIllegalCmd( SXsvfInfo* pXsvfInfo );   /* Illegal command function */
 289:../Xilinx_src/micro.c **** int xsvfDoXCOMPLETE( SXsvfInfo* pXsvfInfo );
 290:../Xilinx_src/micro.c **** int xsvfDoXTDOMASK( SXsvfInfo* pXsvfInfo );
 291:../Xilinx_src/micro.c **** int xsvfDoXSIR( SXsvfInfo* pXsvfInfo );
 292:../Xilinx_src/micro.c **** int xsvfDoXSIR2( SXsvfInfo* pXsvfInfo );
 293:../Xilinx_src/micro.c **** int xsvfDoXSDR( SXsvfInfo* pXsvfInfo );
 294:../Xilinx_src/micro.c **** int xsvfDoXRUNTEST( SXsvfInfo* pXsvfInfo );
 295:../Xilinx_src/micro.c **** int xsvfDoXREPEAT( SXsvfInfo* pXsvfInfo );
 296:../Xilinx_src/micro.c **** int xsvfDoXSDRSIZE( SXsvfInfo* pXsvfInfo );
 297:../Xilinx_src/micro.c **** int xsvfDoXSDRTDO( SXsvfInfo* pXsvfInfo );
 298:../Xilinx_src/micro.c **** int xsvfDoXSETSDRMASKS( SXsvfInfo* pXsvfInfo );
 299:../Xilinx_src/micro.c **** int xsvfDoXSDRINC( SXsvfInfo* pXsvfInfo );
 300:../Xilinx_src/micro.c **** int xsvfDoXSDRBCE( SXsvfInfo* pXsvfInfo );
 301:../Xilinx_src/micro.c **** int xsvfDoXSDRTDOBCE( SXsvfInfo* pXsvfInfo );
 302:../Xilinx_src/micro.c **** int xsvfDoXSTATE( SXsvfInfo* pXsvfInfo );
 303:../Xilinx_src/micro.c **** int xsvfDoXENDXR( SXsvfInfo* pXsvfInfo );
 304:../Xilinx_src/micro.c **** int xsvfDoXCOMMENT( SXsvfInfo* pXsvfInfo );
 305:../Xilinx_src/micro.c **** int xsvfDoXWAIT( SXsvfInfo* pXsvfInfo );
 306:../Xilinx_src/micro.c **** /* Insert new command functions here */
 307:../Xilinx_src/micro.c **** 
 308:../Xilinx_src/micro.c **** /*============================================================================
 309:../Xilinx_src/micro.c **** * XSVF Global Variables
 310:../Xilinx_src/micro.c **** ============================================================================*/
 311:../Xilinx_src/micro.c **** 
 312:../Xilinx_src/micro.c **** /* Array of XSVF command functions.  Must follow command byte value order! */
 313:../Xilinx_src/micro.c **** /* If your compiler cannot take this form, then convert to a switch statement*/
 314:../Xilinx_src/micro.c **** TXsvfDoCmdFuncPtr   xsvf_pfDoCmd[]  =
 315:../Xilinx_src/micro.c **** {
 316:../Xilinx_src/micro.c ****     xsvfDoXCOMPLETE,        /*  0 */
 317:../Xilinx_src/micro.c ****     xsvfDoXTDOMASK,         /*  1 */
 318:../Xilinx_src/micro.c ****     xsvfDoXSIR,             /*  2 */
 319:../Xilinx_src/micro.c ****     xsvfDoXSDR,             /*  3 */
 320:../Xilinx_src/micro.c ****     xsvfDoXRUNTEST,         /*  4 */
 321:../Xilinx_src/micro.c ****     xsvfDoIllegalCmd,       /*  5 */
 322:../Xilinx_src/micro.c ****     xsvfDoIllegalCmd,       /*  6 */
 323:../Xilinx_src/micro.c ****     xsvfDoXREPEAT,          /*  7 */
 324:../Xilinx_src/micro.c ****     xsvfDoXSDRSIZE,         /*  8 */
 325:../Xilinx_src/micro.c ****     xsvfDoXSDRTDO,          /*  9 */
 326:../Xilinx_src/micro.c **** #ifdef  XSVF_SUPPORT_COMPRESSION
 327:../Xilinx_src/micro.c ****     xsvfDoXSETSDRMASKS,     /* 10 */
 328:../Xilinx_src/micro.c ****     xsvfDoXSDRINC,          /* 11 */
 329:../Xilinx_src/micro.c **** #else
 330:../Xilinx_src/micro.c ****     xsvfDoIllegalCmd,       /* 10 */
 331:../Xilinx_src/micro.c ****     xsvfDoIllegalCmd,       /* 11 */
 332:../Xilinx_src/micro.c **** #endif  /* XSVF_SUPPORT_COMPRESSION */
 333:../Xilinx_src/micro.c ****     xsvfDoXSDRBCE,          /* 12 */
 334:../Xilinx_src/micro.c ****     xsvfDoXSDRBCE,          /* 13 */
 335:../Xilinx_src/micro.c ****     xsvfDoXSDRBCE,          /* 14 */
 336:../Xilinx_src/micro.c ****     xsvfDoXSDRTDOBCE,       /* 15 */
 337:../Xilinx_src/micro.c ****     xsvfDoXSDRTDOBCE,       /* 16 */
 338:../Xilinx_src/micro.c ****     xsvfDoXSDRTDOBCE,       /* 17 */
 339:../Xilinx_src/micro.c ****     xsvfDoXSTATE,           /* 18 */
 340:../Xilinx_src/micro.c ****     xsvfDoXENDXR,           /* 19 */
 341:../Xilinx_src/micro.c ****     xsvfDoXENDXR,           /* 20 */
 342:../Xilinx_src/micro.c ****     xsvfDoXSIR2,            /* 21 */
 343:../Xilinx_src/micro.c ****     xsvfDoXCOMMENT,         /* 22 */
 344:../Xilinx_src/micro.c ****     xsvfDoXWAIT             /* 23 */
 345:../Xilinx_src/micro.c **** /* Insert new command functions here */
 346:../Xilinx_src/micro.c **** };
 347:../Xilinx_src/micro.c **** 
 348:../Xilinx_src/micro.c **** #ifdef  DEBUG_MODE
 349:../Xilinx_src/micro.c ****     char* xsvf_pzCommandName[]  =
 350:../Xilinx_src/micro.c ****     {
 351:../Xilinx_src/micro.c ****         "XCOMPLETE",
 352:../Xilinx_src/micro.c ****         "XTDOMASK",
 353:../Xilinx_src/micro.c ****         "XSIR",
 354:../Xilinx_src/micro.c ****         "XSDR",
 355:../Xilinx_src/micro.c ****         "XRUNTEST",
 356:../Xilinx_src/micro.c ****         "Reserved5",
 357:../Xilinx_src/micro.c ****         "Reserved6",
 358:../Xilinx_src/micro.c ****         "XREPEAT",
 359:../Xilinx_src/micro.c ****         "XSDRSIZE",
 360:../Xilinx_src/micro.c ****         "XSDRTDO",
 361:../Xilinx_src/micro.c ****         "XSETSDRMASKS",
 362:../Xilinx_src/micro.c ****         "XSDRINC",
 363:../Xilinx_src/micro.c ****         "XSDRB",
 364:../Xilinx_src/micro.c ****         "XSDRC",
 365:../Xilinx_src/micro.c ****         "XSDRE",
 366:../Xilinx_src/micro.c ****         "XSDRTDOB",
 367:../Xilinx_src/micro.c ****         "XSDRTDOC",
 368:../Xilinx_src/micro.c ****         "XSDRTDOE",
 369:../Xilinx_src/micro.c ****         "XSTATE",
 370:../Xilinx_src/micro.c ****         "XENDIR",
 371:../Xilinx_src/micro.c ****         "XENDDR",
 372:../Xilinx_src/micro.c ****         "XSIR2",
 373:../Xilinx_src/micro.c ****         "XCOMMENT",
 374:../Xilinx_src/micro.c ****         "XWAIT"
 375:../Xilinx_src/micro.c ****     };
 376:../Xilinx_src/micro.c **** 
 377:../Xilinx_src/micro.c ****     char*   xsvf_pzErrorName[]  =
 378:../Xilinx_src/micro.c ****     {
 379:../Xilinx_src/micro.c ****         "No error",
 380:../Xilinx_src/micro.c ****         "ERROR:  Unknown",
 381:../Xilinx_src/micro.c ****         "ERROR:  TDO mismatch",
 382:../Xilinx_src/micro.c ****         "ERROR:  TDO mismatch and exceeded max retries",
 383:../Xilinx_src/micro.c ****         "ERROR:  Unsupported XSVF command",
 384:../Xilinx_src/micro.c ****         "ERROR:  Illegal state specification",
 385:../Xilinx_src/micro.c ****         "ERROR:  Data overflows allocated MAX_LEN buffer size"
 386:../Xilinx_src/micro.c ****     };
 387:../Xilinx_src/micro.c **** 
 388:../Xilinx_src/micro.c ****     char*   xsvf_pzTapState[] =
 389:../Xilinx_src/micro.c ****     {
 390:../Xilinx_src/micro.c ****         "RESET",        /* 0x00 */
 391:../Xilinx_src/micro.c ****         "RUNTEST/IDLE", /* 0x01 */
 392:../Xilinx_src/micro.c ****         "DRSELECT",     /* 0x02 */
 393:../Xilinx_src/micro.c ****         "DRCAPTURE",    /* 0x03 */
 394:../Xilinx_src/micro.c ****         "DRSHIFT",      /* 0x04 */
 395:../Xilinx_src/micro.c ****         "DREXIT1",      /* 0x05 */
 396:../Xilinx_src/micro.c ****         "DRPAUSE",      /* 0x06 */
 397:../Xilinx_src/micro.c ****         "DREXIT2",      /* 0x07 */
 398:../Xilinx_src/micro.c ****         "DRUPDATE",     /* 0x08 */
 399:../Xilinx_src/micro.c ****         "IRSELECT",     /* 0x09 */
 400:../Xilinx_src/micro.c ****         "IRCAPTURE",    /* 0x0A */
 401:../Xilinx_src/micro.c ****         "IRSHIFT",      /* 0x0B */
 402:../Xilinx_src/micro.c ****         "IREXIT1",      /* 0x0C */
 403:../Xilinx_src/micro.c ****         "IRPAUSE",      /* 0x0D */
 404:../Xilinx_src/micro.c ****         "IREXIT2",      /* 0x0E */
 405:../Xilinx_src/micro.c ****         "IRUPDATE"      /* 0x0F */
 406:../Xilinx_src/micro.c ****     };
 407:../Xilinx_src/micro.c **** #endif  /* DEBUG_MODE */
 408:../Xilinx_src/micro.c **** 
 409:../Xilinx_src/micro.c **** #ifdef DEBUG_MODE
 410:../Xilinx_src/micro.c **** 	#if (FX3 == 0)
 411:../Xilinx_src/micro.c **** 		FILE* in;   /* Legacy DEBUG_MODE file pointer */
 412:../Xilinx_src/micro.c **** 	#endif
 413:../Xilinx_src/micro.c ****     int xsvf_iDebugLevel;
 414:../Xilinx_src/micro.c **** #endif /* DEBUG_MODE */
 415:../Xilinx_src/micro.c **** 
 416:../Xilinx_src/micro.c **** /*============================================================================
 417:../Xilinx_src/micro.c **** * Utility Functions
 418:../Xilinx_src/micro.c **** ============================================================================*/
 419:../Xilinx_src/micro.c **** 
 420:../Xilinx_src/micro.c **** /*****************************************************************************
 421:../Xilinx_src/micro.c **** * Function:     xsvfPrintLenVal
 422:../Xilinx_src/micro.c **** * Description:  Print the lenval value in hex.
 423:../Xilinx_src/micro.c **** * Parameters:   plv     - ptr to lenval.
 424:../Xilinx_src/micro.c **** * Returns:      void.
 425:../Xilinx_src/micro.c **** *****************************************************************************/
 426:../Xilinx_src/micro.c **** #ifdef  DEBUG_MODE
 427:../Xilinx_src/micro.c **** void xsvfPrintLenVal( lenVal *plv )
 428:../Xilinx_src/micro.c **** {
 429:../Xilinx_src/micro.c ****     int i;
 430:../Xilinx_src/micro.c **** 
 431:../Xilinx_src/micro.c ****     if ( plv )
 432:../Xilinx_src/micro.c ****     {
 433:../Xilinx_src/micro.c **** #if (FX3)
 434:../Xilinx_src/micro.c ****     	CyU3PDebugPrint(4, "0x");
 435:../Xilinx_src/micro.c **** #else
 436:../Xilinx_src/micro.c ****     	printf( "0x" );
 437:../Xilinx_src/micro.c **** #endif
 438:../Xilinx_src/micro.c ****         for ( i = 0; i < plv->len; ++i )
 439:../Xilinx_src/micro.c ****         {
 440:../Xilinx_src/micro.c **** #if (FX3)
 441:../Xilinx_src/micro.c ****         	CyU3PDebugPrint(4, "%x", ((unsigned int)(plv->val[ i ])) );
 442:../Xilinx_src/micro.c **** #else
 443:../Xilinx_src/micro.c ****             printf( "%02x", ((unsigned int)(plv->val[ i ])) );
 444:../Xilinx_src/micro.c **** #endif
 445:../Xilinx_src/micro.c ****         }
 446:../Xilinx_src/micro.c ****     }
 447:../Xilinx_src/micro.c **** }
 448:../Xilinx_src/micro.c **** #endif  /* DEBUG_MODE */
 449:../Xilinx_src/micro.c **** 
 450:../Xilinx_src/micro.c **** 
 451:../Xilinx_src/micro.c **** /*****************************************************************************
 452:../Xilinx_src/micro.c **** * Function:     xsvfInfoInit
 453:../Xilinx_src/micro.c **** * Description:  Initialize the xsvfInfo data.
 454:../Xilinx_src/micro.c **** * Parameters:   pXsvfInfo   - ptr to the XSVF info structure.
 455:../Xilinx_src/micro.c **** * Returns:      int         - 0 = success; otherwise error.
 456:../Xilinx_src/micro.c **** *****************************************************************************/
 457:../Xilinx_src/micro.c **** int xsvfInfoInit( SXsvfInfo* pXsvfInfo )
 458:../Xilinx_src/micro.c **** {
  53              		.loc 1 458 0
  54              		.cfi_startproc
  55              		@ args = 0, pretend = 0, frame = 8
  56              		@ frame_needed = 1, uses_anonymous_args = 0
  57              		@ link register save eliminated.
  58 0000 04B02DE5 		str	fp, [sp, #-4]!
  59              	.LCFI0:
  60              		.cfi_def_cfa_offset 4
  61              		.cfi_offset 11, -4
  62 0004 00B08DE2 		add	fp, sp, #0
  63              	.LCFI1:
  64              		.cfi_def_cfa_register 11
  65 0008 0CD04DE2 		sub	sp, sp, #12
  66 000c 08000BE5 		str	r0, [fp, #-8]
 459:../Xilinx_src/micro.c ****     XSVFDBG_PRINTF1( 4, "    sizeof( SXsvfInfo ) = %d bytes\n",
 460:../Xilinx_src/micro.c ****                      sizeof( SXsvfInfo ) );
 461:../Xilinx_src/micro.c **** 
 462:../Xilinx_src/micro.c ****     pXsvfInfo->ucComplete       = 0;
  67              		.loc 1 462 0
  68 0010 08301BE5 		ldr	r3, [fp, #-8]
  69 0014 0020A0E3 		mov	r2, #0
  70 0018 0020C3E5 		strb	r2, [r3]
 463:../Xilinx_src/micro.c ****     pXsvfInfo->ucCommand        = XCOMPLETE;
  71              		.loc 1 463 0
  72 001c 08301BE5 		ldr	r3, [fp, #-8]
  73 0020 0020A0E3 		mov	r2, #0
  74 0024 0120C3E5 		strb	r2, [r3, #1]
 464:../Xilinx_src/micro.c ****     pXsvfInfo->lCommandCount    = 0;
  75              		.loc 1 464 0
  76 0028 08301BE5 		ldr	r3, [fp, #-8]
  77 002c 0020A0E3 		mov	r2, #0
  78 0030 042083E5 		str	r2, [r3, #4]
 465:../Xilinx_src/micro.c ****     pXsvfInfo->iErrorCode       = XSVF_ERROR_NONE;
  79              		.loc 1 465 0
  80 0034 08301BE5 		ldr	r3, [fp, #-8]
  81 0038 0020A0E3 		mov	r2, #0
  82 003c 082083E5 		str	r2, [r3, #8]
 466:../Xilinx_src/micro.c ****     pXsvfInfo->ucMaxRepeat      = 0;
  83              		.loc 1 466 0
  84 0040 08301BE5 		ldr	r3, [fp, #-8]
  85 0044 0020A0E3 		mov	r2, #0
  86 0048 0F20C3E5 		strb	r2, [r3, #15]
 467:../Xilinx_src/micro.c ****     pXsvfInfo->ucTapState       = XTAPSTATE_RESET;
  87              		.loc 1 467 0
  88 004c 08301BE5 		ldr	r3, [fp, #-8]
  89 0050 0020A0E3 		mov	r2, #0
  90 0054 0C20C3E5 		strb	r2, [r3, #12]
 468:../Xilinx_src/micro.c ****     pXsvfInfo->ucEndIR          = XTAPSTATE_RUNTEST;
  91              		.loc 1 468 0
  92 0058 08301BE5 		ldr	r3, [fp, #-8]
  93 005c 0120A0E3 		mov	r2, #1
  94 0060 0D20C3E5 		strb	r2, [r3, #13]
 469:../Xilinx_src/micro.c ****     pXsvfInfo->ucEndDR          = XTAPSTATE_RUNTEST;
  95              		.loc 1 469 0
  96 0064 08301BE5 		ldr	r3, [fp, #-8]
  97 0068 0120A0E3 		mov	r2, #1
  98 006c 0E20C3E5 		strb	r2, [r3, #14]
 470:../Xilinx_src/micro.c ****     pXsvfInfo->lShiftLengthBits = 0L;
  99              		.loc 1 470 0
 100 0070 08301BE5 		ldr	r3, [fp, #-8]
 101 0074 0020A0E3 		mov	r2, #0
 102 0078 142083E5 		str	r2, [r3, #20]
 471:../Xilinx_src/micro.c ****     pXsvfInfo->sShiftLengthBytes= 0;
 103              		.loc 1 471 0
 104 007c 08301BE5 		ldr	r3, [fp, #-8]
 105 0080 0020A0E3 		mov	r2, #0
 106 0084 B821C3E1 		strh	r2, [r3, #24]	@ movhi
 472:../Xilinx_src/micro.c ****     pXsvfInfo->lRunTestTime     = 0L;
 107              		.loc 1 472 0
 108 0088 08301BE5 		ldr	r3, [fp, #-8]
 109 008c 0020A0E3 		mov	r2, #0
 110 0090 102083E5 		str	r2, [r3, #16]
 473:../Xilinx_src/micro.c **** 
 474:../Xilinx_src/micro.c ****     return( 0 );
 111              		.loc 1 474 0
 112 0094 0030A0E3 		mov	r3, #0
 475:../Xilinx_src/micro.c **** }
 113              		.loc 1 475 0
 114 0098 0300A0E1 		mov	r0, r3
 115 009c 00D04BE2 		sub	sp, fp, #0
 116              		@ sp needed
 117 00a0 04B09DE4 		ldr	fp, [sp], #4
 118 00a4 1EFF2FE1 		bx	lr
 119              		.cfi_endproc
 120              	.LFE0:
 122              		.section	.text.xsvfInfoCleanup,"ax",%progbits
 123              		.align	2
 124              		.global	xsvfInfoCleanup
 126              	xsvfInfoCleanup:
 127              	.LFB1:
 476:../Xilinx_src/micro.c **** 
 477:../Xilinx_src/micro.c **** /*****************************************************************************
 478:../Xilinx_src/micro.c **** * Function:     xsvfInfoCleanup
 479:../Xilinx_src/micro.c **** * Description:  Cleanup the xsvfInfo data.
 480:../Xilinx_src/micro.c **** * Parameters:   pXsvfInfo   - ptr to the XSVF info structure.
 481:../Xilinx_src/micro.c **** * Returns:      void.
 482:../Xilinx_src/micro.c **** *****************************************************************************/
 483:../Xilinx_src/micro.c **** void xsvfInfoCleanup( SXsvfInfo* pXsvfInfo )
 484:../Xilinx_src/micro.c **** {
 128              		.loc 1 484 0
 129              		.cfi_startproc
 130              		@ args = 0, pretend = 0, frame = 8
 131              		@ frame_needed = 1, uses_anonymous_args = 0
 132              		@ link register save eliminated.
 133 0000 04B02DE5 		str	fp, [sp, #-4]!
 134              	.LCFI2:
 135              		.cfi_def_cfa_offset 4
 136              		.cfi_offset 11, -4
 137 0004 00B08DE2 		add	fp, sp, #0
 138              	.LCFI3:
 139              		.cfi_def_cfa_register 11
 140 0008 0CD04DE2 		sub	sp, sp, #12
 141 000c 08000BE5 		str	r0, [fp, #-8]
 485:../Xilinx_src/micro.c **** }
 142              		.loc 1 485 0
 143 0010 00D04BE2 		sub	sp, fp, #0
 144              		@ sp needed
 145 0014 04B09DE4 		ldr	fp, [sp], #4
 146 0018 1EFF2FE1 		bx	lr
 147              		.cfi_endproc
 148              	.LFE1:
 150              		.section	.text.xsvfGetAsNumBytes,"ax",%progbits
 151              		.align	2
 152              		.global	xsvfGetAsNumBytes
 154              	xsvfGetAsNumBytes:
 155              	.LFB2:
 486:../Xilinx_src/micro.c **** 
 487:../Xilinx_src/micro.c **** /*****************************************************************************
 488:../Xilinx_src/micro.c **** * Function:     xsvfGetAsNumBytes
 489:../Xilinx_src/micro.c **** * Description:  Calculate the number of bytes the given number of bits
 490:../Xilinx_src/micro.c **** *               consumes.
 491:../Xilinx_src/micro.c **** * Parameters:   lNumBits    - the number of bits.
 492:../Xilinx_src/micro.c **** * Returns:      short       - the number of bytes to store the number of bits.
 493:../Xilinx_src/micro.c **** *****************************************************************************/
 494:../Xilinx_src/micro.c **** short xsvfGetAsNumBytes( long lNumBits )
 495:../Xilinx_src/micro.c **** {
 156              		.loc 1 495 0
 157              		.cfi_startproc
 158              		@ args = 0, pretend = 0, frame = 8
 159              		@ frame_needed = 1, uses_anonymous_args = 0
 160              		@ link register save eliminated.
 161 0000 04B02DE5 		str	fp, [sp, #-4]!
 162              	.LCFI4:
 163              		.cfi_def_cfa_offset 4
 164              		.cfi_offset 11, -4
 165 0004 00B08DE2 		add	fp, sp, #0
 166              	.LCFI5:
 167              		.cfi_def_cfa_register 11
 168 0008 0CD04DE2 		sub	sp, sp, #12
 169 000c 08000BE5 		str	r0, [fp, #-8]
 496:../Xilinx_src/micro.c ****     return( (short)( ( lNumBits + 7L ) / 8L ) );
 170              		.loc 1 496 0
 171 0010 08301BE5 		ldr	r3, [fp, #-8]
 172 0014 073083E2 		add	r3, r3, #7
 173 0018 072083E2 		add	r2, r3, #7
 174 001c 000053E3 		cmp	r3, #0
 175 0020 0230A0B1 		movlt	r3, r2
 176 0024 C331A0E1 		mov	r3, r3, asr #3
 177 0028 0338A0E1 		mov	r3, r3, asl #16
 178 002c 2338A0E1 		mov	r3, r3, lsr #16
 179 0030 0338A0E1 		mov	r3, r3, asl #16
 180 0034 4338A0E1 		mov	r3, r3, asr #16
 497:../Xilinx_src/micro.c **** }
 181              		.loc 1 497 0
 182 0038 0300A0E1 		mov	r0, r3
 183 003c 00D04BE2 		sub	sp, fp, #0
 184              		@ sp needed
 185 0040 04B09DE4 		ldr	fp, [sp], #4
 186 0044 1EFF2FE1 		bx	lr
 187              		.cfi_endproc
 188              	.LFE2:
 190              		.section	.text.xsvfTmsTransition,"ax",%progbits
 191              		.align	2
 192              		.global	xsvfTmsTransition
 194              	xsvfTmsTransition:
 195              	.LFB3:
 498:../Xilinx_src/micro.c **** 
 499:../Xilinx_src/micro.c **** /*****************************************************************************
 500:../Xilinx_src/micro.c **** * Function:     xsvfTmsTransition
 501:../Xilinx_src/micro.c **** * Description:  Apply TMS and transition TAP controller by applying one TCK
 502:../Xilinx_src/micro.c **** *               cycle.
 503:../Xilinx_src/micro.c **** * Parameters:   sTms    - new TMS value.
 504:../Xilinx_src/micro.c **** * Returns:      void.
 505:../Xilinx_src/micro.c **** *****************************************************************************/
 506:../Xilinx_src/micro.c **** void xsvfTmsTransition( short sTms )
 507:../Xilinx_src/micro.c **** {
 196              		.loc 1 507 0
 197              		.cfi_startproc
 198              		@ args = 0, pretend = 0, frame = 8
 199              		@ frame_needed = 1, uses_anonymous_args = 0
 200 0000 00482DE9 		stmfd	sp!, {fp, lr}
 201              	.LCFI6:
 202              		.cfi_def_cfa_offset 8
 203              		.cfi_offset 11, -8
 204              		.cfi_offset 14, -4
 205 0004 04B08DE2 		add	fp, sp, #4
 206              	.LCFI7:
 207              		.cfi_def_cfa 11, 4
 208 0008 08D04DE2 		sub	sp, sp, #8
 209 000c 0030A0E1 		mov	r3, r0
 210 0010 B6304BE1 		strh	r3, [fp, #-6]	@ movhi
 508:../Xilinx_src/micro.c ****     setPort( TMS, sTms );
 211              		.loc 1 508 0
 212 0014 F6305BE1 		ldrsh	r3, [fp, #-6]
 213 0018 0100A0E3 		mov	r0, #1
 214 001c 0310A0E1 		mov	r1, r3
 215 0020 FEFFFFEB 		bl	setPort
 509:../Xilinx_src/micro.c ****     setPort( TCK, 0 );
 216              		.loc 1 509 0
 217 0024 0000A0E3 		mov	r0, #0
 218 0028 0010A0E3 		mov	r1, #0
 219 002c FEFFFFEB 		bl	setPort
 510:../Xilinx_src/micro.c ****     setPort( TCK, 1 );
 220              		.loc 1 510 0
 221 0030 0000A0E3 		mov	r0, #0
 222 0034 0110A0E3 		mov	r1, #1
 223 0038 FEFFFFEB 		bl	setPort
 511:../Xilinx_src/micro.c **** }
 224              		.loc 1 511 0
 225 003c 04D04BE2 		sub	sp, fp, #4
 226              		@ sp needed
 227 0040 0088BDE8 		ldmfd	sp!, {fp, pc}
 228              		.cfi_endproc
 229              	.LFE3:
 231              		.section	.text.xsvfGotoTapState,"ax",%progbits
 232              		.align	2
 233              		.global	xsvfGotoTapState
 235              	xsvfGotoTapState:
 236              	.LFB4:
 512:../Xilinx_src/micro.c **** 
 513:../Xilinx_src/micro.c **** /*****************************************************************************
 514:../Xilinx_src/micro.c **** * Function:     xsvfGotoTapState
 515:../Xilinx_src/micro.c **** * Description:  From the current TAP state, go to the named TAP state.
 516:../Xilinx_src/micro.c **** *               A target state of RESET ALWAYS causes TMS reset sequence.
 517:../Xilinx_src/micro.c **** *               All SVF standard stable state paths are supported.
 518:../Xilinx_src/micro.c **** *               All state transitions are supported except for the following
 519:../Xilinx_src/micro.c **** *               which cause an XSVF_ERROR_ILLEGALSTATE:
 520:../Xilinx_src/micro.c **** *                   - Target==DREXIT2;  Start!=DRPAUSE
 521:../Xilinx_src/micro.c **** *                   - Target==IREXIT2;  Start!=IRPAUSE
 522:../Xilinx_src/micro.c **** * Parameters:   pucTapState     - Current TAP state; returns final TAP state.
 523:../Xilinx_src/micro.c **** *               ucTargetState   - New target TAP state.
 524:../Xilinx_src/micro.c **** * Returns:      int             - 0 = success; otherwise error.
 525:../Xilinx_src/micro.c **** *****************************************************************************/
 526:../Xilinx_src/micro.c **** int xsvfGotoTapState( unsigned char*   pucTapState,
 527:../Xilinx_src/micro.c ****                       unsigned char    ucTargetState )
 528:../Xilinx_src/micro.c **** {
 237              		.loc 1 528 0
 238              		.cfi_startproc
 239              		@ args = 0, pretend = 0, frame = 16
 240              		@ frame_needed = 1, uses_anonymous_args = 0
 241 0000 00482DE9 		stmfd	sp!, {fp, lr}
 242              	.LCFI8:
 243              		.cfi_def_cfa_offset 8
 244              		.cfi_offset 11, -8
 245              		.cfi_offset 14, -4
 246 0004 04B08DE2 		add	fp, sp, #4
 247              	.LCFI9:
 248              		.cfi_def_cfa 11, 4
 249 0008 10D04DE2 		sub	sp, sp, #16
 250 000c 10000BE5 		str	r0, [fp, #-16]
 251 0010 0130A0E1 		mov	r3, r1
 252 0014 11304BE5 		strb	r3, [fp, #-17]
 529:../Xilinx_src/micro.c ****     int i;
 530:../Xilinx_src/micro.c ****     int iErrorCode;
 531:../Xilinx_src/micro.c **** 
 532:../Xilinx_src/micro.c ****     iErrorCode  = XSVF_ERROR_NONE;
 253              		.loc 1 532 0
 254 0018 0030A0E3 		mov	r3, #0
 255 001c 0C300BE5 		str	r3, [fp, #-12]
 533:../Xilinx_src/micro.c ****     if ( ucTargetState == XTAPSTATE_RESET )
 256              		.loc 1 533 0
 257 0020 11305BE5 		ldrb	r3, [fp, #-17]	@ zero_extendqisi2
 258 0024 000053E3 		cmp	r3, #0
 259 0028 1400001A 		bne	.L8
 534:../Xilinx_src/micro.c ****     {
 535:../Xilinx_src/micro.c ****         /* If RESET, always perform TMS reset sequence to reset/sync TAPs */
 536:../Xilinx_src/micro.c ****         xsvfTmsTransition( 1 );
 260              		.loc 1 536 0
 261 002c 0100A0E3 		mov	r0, #1
 262 0030 FEFFFFEB 		bl	xsvfTmsTransition
 537:../Xilinx_src/micro.c ****         for ( i = 0; i < 5; ++i )
 263              		.loc 1 537 0
 264 0034 0030A0E3 		mov	r3, #0
 265 0038 08300BE5 		str	r3, [fp, #-8]
 266 003c 080000EA 		b	.L9
 267              	.L10:
 538:../Xilinx_src/micro.c ****         {
 539:../Xilinx_src/micro.c ****             setPort( TCK, 0 );
 268              		.loc 1 539 0 discriminator 2
 269 0040 0000A0E3 		mov	r0, #0
 270 0044 0010A0E3 		mov	r1, #0
 271 0048 FEFFFFEB 		bl	setPort
 540:../Xilinx_src/micro.c ****             setPort( TCK, 1 );
 272              		.loc 1 540 0 discriminator 2
 273 004c 0000A0E3 		mov	r0, #0
 274 0050 0110A0E3 		mov	r1, #1
 275 0054 FEFFFFEB 		bl	setPort
 537:../Xilinx_src/micro.c ****         for ( i = 0; i < 5; ++i )
 276              		.loc 1 537 0 discriminator 2
 277 0058 08301BE5 		ldr	r3, [fp, #-8]
 278 005c 013083E2 		add	r3, r3, #1
 279 0060 08300BE5 		str	r3, [fp, #-8]
 280              	.L9:
 537:../Xilinx_src/micro.c ****         for ( i = 0; i < 5; ++i )
 281              		.loc 1 537 0 is_stmt 0 discriminator 1
 282 0064 08301BE5 		ldr	r3, [fp, #-8]
 283 0068 040053E3 		cmp	r3, #4
 284 006c F3FFFFDA 		ble	.L10
 541:../Xilinx_src/micro.c ****         }
 542:../Xilinx_src/micro.c ****         *pucTapState    = XTAPSTATE_RESET;
 285              		.loc 1 542 0 is_stmt 1
 286 0070 10301BE5 		ldr	r3, [fp, #-16]
 287 0074 0020A0E3 		mov	r2, #0
 288 0078 0020C3E5 		strb	r2, [r3]
 289 007c FE0000EA 		b	.L11
 290              	.L8:
 543:../Xilinx_src/micro.c ****         XSVFDBG_PRINTF( 3, "   TMS Reset Sequence -> Test-Logic-Reset\n" );
 544:../Xilinx_src/micro.c ****         XSVFDBG_PRINTF1( 3, "   TAP State = %s\n",
 545:../Xilinx_src/micro.c ****                          xsvf_pzTapState[ *pucTapState ] );
 546:../Xilinx_src/micro.c ****     }
 547:../Xilinx_src/micro.c ****     else if ( ( ucTargetState != *pucTapState ) &&
 291              		.loc 1 547 0
 292 0080 10301BE5 		ldr	r3, [fp, #-16]
 293 0084 0030D3E5 		ldrb	r3, [r3]	@ zero_extendqisi2
 294 0088 11205BE5 		ldrb	r2, [fp, #-17]	@ zero_extendqisi2
 295 008c 030052E1 		cmp	r2, r3
 296 0090 1000000A 		beq	.L12
 297              		.loc 1 547 0 is_stmt 0 discriminator 1
 298 0094 11305BE5 		ldrb	r3, [fp, #-17]	@ zero_extendqisi2
 299 0098 070053E3 		cmp	r3, #7
 300 009c 0300001A 		bne	.L13
 548:../Xilinx_src/micro.c ****               ( ( ( ucTargetState == XTAPSTATE_EXIT2DR ) && ( *pucTapState != XTAPSTATE_PAUSEDR ) )
 301              		.loc 1 548 0 is_stmt 1
 302 00a0 10301BE5 		ldr	r3, [fp, #-16]
 303 00a4 0030D3E5 		ldrb	r3, [r3]	@ zero_extendqisi2
 304 00a8 060053E3 		cmp	r3, #6
 305 00ac 0600001A 		bne	.L14
 306              	.L13:
 307              		.loc 1 548 0 is_stmt 0 discriminator 1
 308 00b0 11305BE5 		ldrb	r3, [fp, #-17]	@ zero_extendqisi2
 309 00b4 0E0053E3 		cmp	r3, #14
 310 00b8 0600001A 		bne	.L12
 549:../Xilinx_src/micro.c ****                 ( ( ucTargetState == XTAPSTATE_EXIT2IR ) && ( *pucTapState != XTAPSTATE_PAUSEIR ) )
 311              		.loc 1 549 0 is_stmt 1
 312 00bc 10301BE5 		ldr	r3, [fp, #-16]
 313 00c0 0030D3E5 		ldrb	r3, [r3]	@ zero_extendqisi2
 314 00c4 0D0053E3 		cmp	r3, #13
 315 00c8 0200000A 		beq	.L12
 316              	.L14:
 550:../Xilinx_src/micro.c ****     {
 551:../Xilinx_src/micro.c ****         /* Trap illegal TAP state path specification */
 552:../Xilinx_src/micro.c ****         iErrorCode      = XSVF_ERROR_ILLEGALSTATE;
 317              		.loc 1 552 0
 318 00cc 0530A0E3 		mov	r3, #5
 319 00d0 0C300BE5 		str	r3, [fp, #-12]
 320 00d4 E80000EA 		b	.L11
 321              	.L12:
 553:../Xilinx_src/micro.c ****     }
 554:../Xilinx_src/micro.c ****     else
 555:../Xilinx_src/micro.c ****     {
 556:../Xilinx_src/micro.c ****         if ( ucTargetState == *pucTapState )
 322              		.loc 1 556 0
 323 00d8 10301BE5 		ldr	r3, [fp, #-16]
 324 00dc 0030D3E5 		ldrb	r3, [r3]	@ zero_extendqisi2
 325 00e0 11205BE5 		ldrb	r2, [fp, #-17]	@ zero_extendqisi2
 326 00e4 030052E1 		cmp	r2, r3
 327 00e8 1100001A 		bne	.L15
 557:../Xilinx_src/micro.c ****         {
 558:../Xilinx_src/micro.c ****             /* Already in target state.  Do nothing except when in DRPAUSE
 559:../Xilinx_src/micro.c ****                or in IRPAUSE to comply with SVF standard */
 560:../Xilinx_src/micro.c ****             if ( ucTargetState == XTAPSTATE_PAUSEDR )
 328              		.loc 1 560 0
 329 00ec 11305BE5 		ldrb	r3, [fp, #-17]	@ zero_extendqisi2
 330 00f0 060053E3 		cmp	r3, #6
 331 00f4 0500001A 		bne	.L16
 561:../Xilinx_src/micro.c ****             {
 562:../Xilinx_src/micro.c ****                 xsvfTmsTransition( 1 );
 332              		.loc 1 562 0
 333 00f8 0100A0E3 		mov	r0, #1
 334 00fc FEFFFFEB 		bl	xsvfTmsTransition
 563:../Xilinx_src/micro.c ****                 *pucTapState    = XTAPSTATE_EXIT2DR;
 335              		.loc 1 563 0
 336 0100 10301BE5 		ldr	r3, [fp, #-16]
 337 0104 0720A0E3 		mov	r2, #7
 338 0108 0020C3E5 		strb	r2, [r3]
 339 010c 080000EA 		b	.L15
 340              	.L16:
 564:../Xilinx_src/micro.c ****                 XSVFDBG_PRINTF1( 3, "   TAP State = %s\n",
 565:../Xilinx_src/micro.c ****                                  xsvf_pzTapState[ *pucTapState ] );
 566:../Xilinx_src/micro.c ****             }
 567:../Xilinx_src/micro.c ****             else if ( ucTargetState == XTAPSTATE_PAUSEIR )
 341              		.loc 1 567 0
 342 0110 11305BE5 		ldrb	r3, [fp, #-17]	@ zero_extendqisi2
 343 0114 0D0053E3 		cmp	r3, #13
 344 0118 0500001A 		bne	.L15
 568:../Xilinx_src/micro.c ****             {
 569:../Xilinx_src/micro.c ****                 xsvfTmsTransition( 1 );
 345              		.loc 1 569 0
 346 011c 0100A0E3 		mov	r0, #1
 347 0120 FEFFFFEB 		bl	xsvfTmsTransition
 570:../Xilinx_src/micro.c ****                 *pucTapState    = XTAPSTATE_EXIT2IR;
 348              		.loc 1 570 0
 349 0124 10301BE5 		ldr	r3, [fp, #-16]
 350 0128 0E20A0E3 		mov	r2, #14
 351 012c 0020C3E5 		strb	r2, [r3]
 571:../Xilinx_src/micro.c ****                 XSVFDBG_PRINTF1( 3, "   TAP State = %s\n",
 572:../Xilinx_src/micro.c ****                                  xsvf_pzTapState[ *pucTapState ] );
 573:../Xilinx_src/micro.c ****             }
 574:../Xilinx_src/micro.c ****         }
 575:../Xilinx_src/micro.c **** 
 576:../Xilinx_src/micro.c ****         /* Perform TAP state transitions to get to the target state */
 577:../Xilinx_src/micro.c ****         while ( ucTargetState != *pucTapState )
 352              		.loc 1 577 0
 353 0130 CC0000EA 		b	.L17
 354              	.L15:
 355 0134 CB0000EA 		b	.L17
 356              	.L54:
 578:../Xilinx_src/micro.c ****         {
 579:../Xilinx_src/micro.c ****             switch ( *pucTapState )
 357              		.loc 1 579 0
 358 0138 10301BE5 		ldr	r3, [fp, #-16]
 359 013c 0030D3E5 		ldrb	r3, [r3]	@ zero_extendqisi2
 360 0140 0F0053E3 		cmp	r3, #15
 361 0144 03F19F97 		ldrls	pc, [pc, r3, asl #2]
 362 0148 C00000EA 		b	.L18
 363              	.L20:
 364 014c 8C010000 		.word	.L19
 365 0150 A4010000 		.word	.L21
 366 0154 BC010000 		.word	.L22
 367 0158 F8010000 		.word	.L23
 368 015c 34020000 		.word	.L24
 369 0160 4C020000 		.word	.L25
 370 0164 88020000 		.word	.L26
 371 0168 A0020000 		.word	.L27
 372 016c DC020000 		.word	.L28
 373 0170 18030000 		.word	.L29
 374 0174 30030000 		.word	.L30
 375 0178 6C030000 		.word	.L31
 376 017c 84030000 		.word	.L32
 377 0180 C0030000 		.word	.L33
 378 0184 D8030000 		.word	.L34
 379 0188 14040000 		.word	.L35
 380              	.L19:
 580:../Xilinx_src/micro.c ****             {
 581:../Xilinx_src/micro.c ****             case XTAPSTATE_RESET:
 582:../Xilinx_src/micro.c ****                 xsvfTmsTransition( 0 );
 381              		.loc 1 582 0
 382 018c 0000A0E3 		mov	r0, #0
 383 0190 FEFFFFEB 		bl	xsvfTmsTransition
 583:../Xilinx_src/micro.c ****                 *pucTapState    = XTAPSTATE_RUNTEST;
 384              		.loc 1 583 0
 385 0194 10301BE5 		ldr	r3, [fp, #-16]
 386 0198 0120A0E3 		mov	r2, #1
 387 019c 0020C3E5 		strb	r2, [r3]
 584:../Xilinx_src/micro.c ****                 break;
 388              		.loc 1 584 0
 389 01a0 B00000EA 		b	.L17
 390              	.L21:
 585:../Xilinx_src/micro.c ****             case XTAPSTATE_RUNTEST:
 586:../Xilinx_src/micro.c ****                 xsvfTmsTransition( 1 );
 391              		.loc 1 586 0
 392 01a4 0100A0E3 		mov	r0, #1
 393 01a8 FEFFFFEB 		bl	xsvfTmsTransition
 587:../Xilinx_src/micro.c ****                 *pucTapState    = XTAPSTATE_SELECTDR;
 394              		.loc 1 587 0
 395 01ac 10301BE5 		ldr	r3, [fp, #-16]
 396 01b0 0220A0E3 		mov	r2, #2
 397 01b4 0020C3E5 		strb	r2, [r3]
 588:../Xilinx_src/micro.c ****                 break;
 398              		.loc 1 588 0
 399 01b8 AA0000EA 		b	.L17
 400              	.L22:
 589:../Xilinx_src/micro.c ****             case XTAPSTATE_SELECTDR:
 590:../Xilinx_src/micro.c ****                 if ( ucTargetState >= XTAPSTATE_IRSTATES )
 401              		.loc 1 590 0
 402 01bc 11305BE5 		ldrb	r3, [fp, #-17]	@ zero_extendqisi2
 403 01c0 080053E3 		cmp	r3, #8
 404 01c4 0500009A 		bls	.L36
 591:../Xilinx_src/micro.c ****                 {
 592:../Xilinx_src/micro.c ****                     xsvfTmsTransition( 1 );
 405              		.loc 1 592 0
 406 01c8 0100A0E3 		mov	r0, #1
 407 01cc FEFFFFEB 		bl	xsvfTmsTransition
 593:../Xilinx_src/micro.c ****                     *pucTapState    = XTAPSTATE_SELECTIR;
 408              		.loc 1 593 0
 409 01d0 10301BE5 		ldr	r3, [fp, #-16]
 410 01d4 0920A0E3 		mov	r2, #9
 411 01d8 0020C3E5 		strb	r2, [r3]
 594:../Xilinx_src/micro.c ****                 }
 595:../Xilinx_src/micro.c ****                 else
 596:../Xilinx_src/micro.c ****                 {
 597:../Xilinx_src/micro.c ****                     xsvfTmsTransition( 0 );
 598:../Xilinx_src/micro.c ****                     *pucTapState    = XTAPSTATE_CAPTUREDR;
 599:../Xilinx_src/micro.c ****                 }
 600:../Xilinx_src/micro.c ****                 break;
 412              		.loc 1 600 0
 413 01dc A10000EA 		b	.L17
 414              	.L36:
 597:../Xilinx_src/micro.c ****                     *pucTapState    = XTAPSTATE_CAPTUREDR;
 415              		.loc 1 597 0
 416 01e0 0000A0E3 		mov	r0, #0
 417 01e4 FEFFFFEB 		bl	xsvfTmsTransition
 598:../Xilinx_src/micro.c ****                 }
 418              		.loc 1 598 0
 419 01e8 10301BE5 		ldr	r3, [fp, #-16]
 420 01ec 0320A0E3 		mov	r2, #3
 421 01f0 0020C3E5 		strb	r2, [r3]
 422              		.loc 1 600 0
 423 01f4 9B0000EA 		b	.L17
 424              	.L23:
 601:../Xilinx_src/micro.c ****             case XTAPSTATE_CAPTUREDR:
 602:../Xilinx_src/micro.c ****                 if ( ucTargetState == XTAPSTATE_SHIFTDR )
 425              		.loc 1 602 0
 426 01f8 11305BE5 		ldrb	r3, [fp, #-17]	@ zero_extendqisi2
 427 01fc 040053E3 		cmp	r3, #4
 428 0200 0500001A 		bne	.L38
 603:../Xilinx_src/micro.c ****                 {
 604:../Xilinx_src/micro.c ****                     xsvfTmsTransition( 0 );
 429              		.loc 1 604 0
 430 0204 0000A0E3 		mov	r0, #0
 431 0208 FEFFFFEB 		bl	xsvfTmsTransition
 605:../Xilinx_src/micro.c ****                     *pucTapState    = XTAPSTATE_SHIFTDR;
 432              		.loc 1 605 0
 433 020c 10301BE5 		ldr	r3, [fp, #-16]
 434 0210 0420A0E3 		mov	r2, #4
 435 0214 0020C3E5 		strb	r2, [r3]
 606:../Xilinx_src/micro.c ****                 }
 607:../Xilinx_src/micro.c ****                 else
 608:../Xilinx_src/micro.c ****                 {
 609:../Xilinx_src/micro.c ****                     xsvfTmsTransition( 1 );
 610:../Xilinx_src/micro.c ****                     *pucTapState    = XTAPSTATE_EXIT1DR;
 611:../Xilinx_src/micro.c ****                 }
 612:../Xilinx_src/micro.c ****                 break;
 436              		.loc 1 612 0
 437 0218 920000EA 		b	.L17
 438              	.L38:
 609:../Xilinx_src/micro.c ****                     *pucTapState    = XTAPSTATE_EXIT1DR;
 439              		.loc 1 609 0
 440 021c 0100A0E3 		mov	r0, #1
 441 0220 FEFFFFEB 		bl	xsvfTmsTransition
 610:../Xilinx_src/micro.c ****                 }
 442              		.loc 1 610 0
 443 0224 10301BE5 		ldr	r3, [fp, #-16]
 444 0228 0520A0E3 		mov	r2, #5
 445 022c 0020C3E5 		strb	r2, [r3]
 446              		.loc 1 612 0
 447 0230 8C0000EA 		b	.L17
 448              	.L24:
 613:../Xilinx_src/micro.c ****             case XTAPSTATE_SHIFTDR:
 614:../Xilinx_src/micro.c ****                 xsvfTmsTransition( 1 );
 449              		.loc 1 614 0
 450 0234 0100A0E3 		mov	r0, #1
 451 0238 FEFFFFEB 		bl	xsvfTmsTransition
 615:../Xilinx_src/micro.c ****                 *pucTapState    = XTAPSTATE_EXIT1DR;
 452              		.loc 1 615 0
 453 023c 10301BE5 		ldr	r3, [fp, #-16]
 454 0240 0520A0E3 		mov	r2, #5
 455 0244 0020C3E5 		strb	r2, [r3]
 616:../Xilinx_src/micro.c ****                 break;
 456              		.loc 1 616 0
 457 0248 860000EA 		b	.L17
 458              	.L25:
 617:../Xilinx_src/micro.c ****             case XTAPSTATE_EXIT1DR:
 618:../Xilinx_src/micro.c ****                 if ( ucTargetState == XTAPSTATE_PAUSEDR )
 459              		.loc 1 618 0
 460 024c 11305BE5 		ldrb	r3, [fp, #-17]	@ zero_extendqisi2
 461 0250 060053E3 		cmp	r3, #6
 462 0254 0500001A 		bne	.L40
 619:../Xilinx_src/micro.c ****                 {
 620:../Xilinx_src/micro.c ****                     xsvfTmsTransition( 0 );
 463              		.loc 1 620 0
 464 0258 0000A0E3 		mov	r0, #0
 465 025c FEFFFFEB 		bl	xsvfTmsTransition
 621:../Xilinx_src/micro.c ****                     *pucTapState    = XTAPSTATE_PAUSEDR;
 466              		.loc 1 621 0
 467 0260 10301BE5 		ldr	r3, [fp, #-16]
 468 0264 0620A0E3 		mov	r2, #6
 469 0268 0020C3E5 		strb	r2, [r3]
 622:../Xilinx_src/micro.c ****                 }
 623:../Xilinx_src/micro.c ****                 else
 624:../Xilinx_src/micro.c ****                 {
 625:../Xilinx_src/micro.c ****                     xsvfTmsTransition( 1 );
 626:../Xilinx_src/micro.c ****                     *pucTapState    = XTAPSTATE_UPDATEDR;
 627:../Xilinx_src/micro.c ****                 }
 628:../Xilinx_src/micro.c ****                 break;
 470              		.loc 1 628 0
 471 026c 7D0000EA 		b	.L17
 472              	.L40:
 625:../Xilinx_src/micro.c ****                     *pucTapState    = XTAPSTATE_UPDATEDR;
 473              		.loc 1 625 0
 474 0270 0100A0E3 		mov	r0, #1
 475 0274 FEFFFFEB 		bl	xsvfTmsTransition
 626:../Xilinx_src/micro.c ****                 }
 476              		.loc 1 626 0
 477 0278 10301BE5 		ldr	r3, [fp, #-16]
 478 027c 0820A0E3 		mov	r2, #8
 479 0280 0020C3E5 		strb	r2, [r3]
 480              		.loc 1 628 0
 481 0284 770000EA 		b	.L17
 482              	.L26:
 629:../Xilinx_src/micro.c ****             case XTAPSTATE_PAUSEDR:
 630:../Xilinx_src/micro.c ****                 xsvfTmsTransition( 1 );
 483              		.loc 1 630 0
 484 0288 0100A0E3 		mov	r0, #1
 485 028c FEFFFFEB 		bl	xsvfTmsTransition
 631:../Xilinx_src/micro.c ****                 *pucTapState    = XTAPSTATE_EXIT2DR;
 486              		.loc 1 631 0
 487 0290 10301BE5 		ldr	r3, [fp, #-16]
 488 0294 0720A0E3 		mov	r2, #7
 489 0298 0020C3E5 		strb	r2, [r3]
 632:../Xilinx_src/micro.c ****                 break;
 490              		.loc 1 632 0
 491 029c 710000EA 		b	.L17
 492              	.L27:
 633:../Xilinx_src/micro.c ****             case XTAPSTATE_EXIT2DR:
 634:../Xilinx_src/micro.c ****                 if ( ucTargetState == XTAPSTATE_SHIFTDR )
 493              		.loc 1 634 0
 494 02a0 11305BE5 		ldrb	r3, [fp, #-17]	@ zero_extendqisi2
 495 02a4 040053E3 		cmp	r3, #4
 496 02a8 0500001A 		bne	.L42
 635:../Xilinx_src/micro.c ****                 {
 636:../Xilinx_src/micro.c ****                     xsvfTmsTransition( 0 );
 497              		.loc 1 636 0
 498 02ac 0000A0E3 		mov	r0, #0
 499 02b0 FEFFFFEB 		bl	xsvfTmsTransition
 637:../Xilinx_src/micro.c ****                     *pucTapState    = XTAPSTATE_SHIFTDR;
 500              		.loc 1 637 0
 501 02b4 10301BE5 		ldr	r3, [fp, #-16]
 502 02b8 0420A0E3 		mov	r2, #4
 503 02bc 0020C3E5 		strb	r2, [r3]
 638:../Xilinx_src/micro.c ****                 }
 639:../Xilinx_src/micro.c ****                 else
 640:../Xilinx_src/micro.c ****                 {
 641:../Xilinx_src/micro.c ****                     xsvfTmsTransition( 1 );
 642:../Xilinx_src/micro.c ****                     *pucTapState    = XTAPSTATE_UPDATEDR;
 643:../Xilinx_src/micro.c ****                 }
 644:../Xilinx_src/micro.c ****                 break;
 504              		.loc 1 644 0
 505 02c0 680000EA 		b	.L17
 506              	.L42:
 641:../Xilinx_src/micro.c ****                     *pucTapState    = XTAPSTATE_UPDATEDR;
 507              		.loc 1 641 0
 508 02c4 0100A0E3 		mov	r0, #1
 509 02c8 FEFFFFEB 		bl	xsvfTmsTransition
 642:../Xilinx_src/micro.c ****                 }
 510              		.loc 1 642 0
 511 02cc 10301BE5 		ldr	r3, [fp, #-16]
 512 02d0 0820A0E3 		mov	r2, #8
 513 02d4 0020C3E5 		strb	r2, [r3]
 514              		.loc 1 644 0
 515 02d8 620000EA 		b	.L17
 516              	.L28:
 645:../Xilinx_src/micro.c ****             case XTAPSTATE_UPDATEDR:
 646:../Xilinx_src/micro.c ****                 if ( ucTargetState == XTAPSTATE_RUNTEST )
 517              		.loc 1 646 0
 518 02dc 11305BE5 		ldrb	r3, [fp, #-17]	@ zero_extendqisi2
 519 02e0 010053E3 		cmp	r3, #1
 520 02e4 0500001A 		bne	.L44
 647:../Xilinx_src/micro.c ****                 {
 648:../Xilinx_src/micro.c ****                     xsvfTmsTransition( 0 );
 521              		.loc 1 648 0
 522 02e8 0000A0E3 		mov	r0, #0
 523 02ec FEFFFFEB 		bl	xsvfTmsTransition
 649:../Xilinx_src/micro.c ****                     *pucTapState    = XTAPSTATE_RUNTEST;
 524              		.loc 1 649 0
 525 02f0 10301BE5 		ldr	r3, [fp, #-16]
 526 02f4 0120A0E3 		mov	r2, #1
 527 02f8 0020C3E5 		strb	r2, [r3]
 650:../Xilinx_src/micro.c ****                 }
 651:../Xilinx_src/micro.c ****                 else
 652:../Xilinx_src/micro.c ****                 {
 653:../Xilinx_src/micro.c ****                     xsvfTmsTransition( 1 );
 654:../Xilinx_src/micro.c ****                     *pucTapState    = XTAPSTATE_SELECTDR;
 655:../Xilinx_src/micro.c ****                 }
 656:../Xilinx_src/micro.c ****                 break;
 528              		.loc 1 656 0
 529 02fc 590000EA 		b	.L17
 530              	.L44:
 653:../Xilinx_src/micro.c ****                     *pucTapState    = XTAPSTATE_SELECTDR;
 531              		.loc 1 653 0
 532 0300 0100A0E3 		mov	r0, #1
 533 0304 FEFFFFEB 		bl	xsvfTmsTransition
 654:../Xilinx_src/micro.c ****                 }
 534              		.loc 1 654 0
 535 0308 10301BE5 		ldr	r3, [fp, #-16]
 536 030c 0220A0E3 		mov	r2, #2
 537 0310 0020C3E5 		strb	r2, [r3]
 538              		.loc 1 656 0
 539 0314 530000EA 		b	.L17
 540              	.L29:
 657:../Xilinx_src/micro.c ****             case XTAPSTATE_SELECTIR:
 658:../Xilinx_src/micro.c ****                 xsvfTmsTransition( 0 );
 541              		.loc 1 658 0
 542 0318 0000A0E3 		mov	r0, #0
 543 031c FEFFFFEB 		bl	xsvfTmsTransition
 659:../Xilinx_src/micro.c ****                 *pucTapState    = XTAPSTATE_CAPTUREIR;
 544              		.loc 1 659 0
 545 0320 10301BE5 		ldr	r3, [fp, #-16]
 546 0324 0A20A0E3 		mov	r2, #10
 547 0328 0020C3E5 		strb	r2, [r3]
 660:../Xilinx_src/micro.c ****                 break;
 548              		.loc 1 660 0
 549 032c 4D0000EA 		b	.L17
 550              	.L30:
 661:../Xilinx_src/micro.c ****             case XTAPSTATE_CAPTUREIR:
 662:../Xilinx_src/micro.c ****                 if ( ucTargetState == XTAPSTATE_SHIFTIR )
 551              		.loc 1 662 0
 552 0330 11305BE5 		ldrb	r3, [fp, #-17]	@ zero_extendqisi2
 553 0334 0B0053E3 		cmp	r3, #11
 554 0338 0500001A 		bne	.L46
 663:../Xilinx_src/micro.c ****                 {
 664:../Xilinx_src/micro.c ****                     xsvfTmsTransition( 0 );
 555              		.loc 1 664 0
 556 033c 0000A0E3 		mov	r0, #0
 557 0340 FEFFFFEB 		bl	xsvfTmsTransition
 665:../Xilinx_src/micro.c ****                     *pucTapState    = XTAPSTATE_SHIFTIR;
 558              		.loc 1 665 0
 559 0344 10301BE5 		ldr	r3, [fp, #-16]
 560 0348 0B20A0E3 		mov	r2, #11
 561 034c 0020C3E5 		strb	r2, [r3]
 666:../Xilinx_src/micro.c ****                 }
 667:../Xilinx_src/micro.c ****                 else
 668:../Xilinx_src/micro.c ****                 {
 669:../Xilinx_src/micro.c ****                     xsvfTmsTransition( 1 );
 670:../Xilinx_src/micro.c ****                     *pucTapState    = XTAPSTATE_EXIT1IR;
 671:../Xilinx_src/micro.c ****                 }
 672:../Xilinx_src/micro.c ****                 break;
 562              		.loc 1 672 0
 563 0350 440000EA 		b	.L17
 564              	.L46:
 669:../Xilinx_src/micro.c ****                     *pucTapState    = XTAPSTATE_EXIT1IR;
 565              		.loc 1 669 0
 566 0354 0100A0E3 		mov	r0, #1
 567 0358 FEFFFFEB 		bl	xsvfTmsTransition
 670:../Xilinx_src/micro.c ****                 }
 568              		.loc 1 670 0
 569 035c 10301BE5 		ldr	r3, [fp, #-16]
 570 0360 0C20A0E3 		mov	r2, #12
 571 0364 0020C3E5 		strb	r2, [r3]
 572              		.loc 1 672 0
 573 0368 3E0000EA 		b	.L17
 574              	.L31:
 673:../Xilinx_src/micro.c ****             case XTAPSTATE_SHIFTIR:
 674:../Xilinx_src/micro.c ****                 xsvfTmsTransition( 1 );
 575              		.loc 1 674 0
 576 036c 0100A0E3 		mov	r0, #1
 577 0370 FEFFFFEB 		bl	xsvfTmsTransition
 675:../Xilinx_src/micro.c ****                 *pucTapState    = XTAPSTATE_EXIT1IR;
 578              		.loc 1 675 0
 579 0374 10301BE5 		ldr	r3, [fp, #-16]
 580 0378 0C20A0E3 		mov	r2, #12
 581 037c 0020C3E5 		strb	r2, [r3]
 676:../Xilinx_src/micro.c ****                 break;
 582              		.loc 1 676 0
 583 0380 380000EA 		b	.L17
 584              	.L32:
 677:../Xilinx_src/micro.c ****             case XTAPSTATE_EXIT1IR:
 678:../Xilinx_src/micro.c ****                 if ( ucTargetState == XTAPSTATE_PAUSEIR )
 585              		.loc 1 678 0
 586 0384 11305BE5 		ldrb	r3, [fp, #-17]	@ zero_extendqisi2
 587 0388 0D0053E3 		cmp	r3, #13
 588 038c 0500001A 		bne	.L48
 679:../Xilinx_src/micro.c ****                 {
 680:../Xilinx_src/micro.c ****                     xsvfTmsTransition( 0 );
 589              		.loc 1 680 0
 590 0390 0000A0E3 		mov	r0, #0
 591 0394 FEFFFFEB 		bl	xsvfTmsTransition
 681:../Xilinx_src/micro.c ****                     *pucTapState    = XTAPSTATE_PAUSEIR;
 592              		.loc 1 681 0
 593 0398 10301BE5 		ldr	r3, [fp, #-16]
 594 039c 0D20A0E3 		mov	r2, #13
 595 03a0 0020C3E5 		strb	r2, [r3]
 682:../Xilinx_src/micro.c ****                 }
 683:../Xilinx_src/micro.c ****                 else
 684:../Xilinx_src/micro.c ****                 {
 685:../Xilinx_src/micro.c ****                     xsvfTmsTransition( 1 );
 686:../Xilinx_src/micro.c ****                     *pucTapState    = XTAPSTATE_UPDATEIR;
 687:../Xilinx_src/micro.c ****                 }
 688:../Xilinx_src/micro.c ****                 break;
 596              		.loc 1 688 0
 597 03a4 2F0000EA 		b	.L17
 598              	.L48:
 685:../Xilinx_src/micro.c ****                     *pucTapState    = XTAPSTATE_UPDATEIR;
 599              		.loc 1 685 0
 600 03a8 0100A0E3 		mov	r0, #1
 601 03ac FEFFFFEB 		bl	xsvfTmsTransition
 686:../Xilinx_src/micro.c ****                 }
 602              		.loc 1 686 0
 603 03b0 10301BE5 		ldr	r3, [fp, #-16]
 604 03b4 0F20A0E3 		mov	r2, #15
 605 03b8 0020C3E5 		strb	r2, [r3]
 606              		.loc 1 688 0
 607 03bc 290000EA 		b	.L17
 608              	.L33:
 689:../Xilinx_src/micro.c ****             case XTAPSTATE_PAUSEIR:
 690:../Xilinx_src/micro.c ****                 xsvfTmsTransition( 1 );
 609              		.loc 1 690 0
 610 03c0 0100A0E3 		mov	r0, #1
 611 03c4 FEFFFFEB 		bl	xsvfTmsTransition
 691:../Xilinx_src/micro.c ****                 *pucTapState    = XTAPSTATE_EXIT2IR;
 612              		.loc 1 691 0
 613 03c8 10301BE5 		ldr	r3, [fp, #-16]
 614 03cc 0E20A0E3 		mov	r2, #14
 615 03d0 0020C3E5 		strb	r2, [r3]
 692:../Xilinx_src/micro.c ****                 break;
 616              		.loc 1 692 0
 617 03d4 230000EA 		b	.L17
 618              	.L34:
 693:../Xilinx_src/micro.c ****             case XTAPSTATE_EXIT2IR:
 694:../Xilinx_src/micro.c ****                 if ( ucTargetState == XTAPSTATE_SHIFTIR )
 619              		.loc 1 694 0
 620 03d8 11305BE5 		ldrb	r3, [fp, #-17]	@ zero_extendqisi2
 621 03dc 0B0053E3 		cmp	r3, #11
 622 03e0 0500001A 		bne	.L50
 695:../Xilinx_src/micro.c ****                 {
 696:../Xilinx_src/micro.c ****                     xsvfTmsTransition( 0 );
 623              		.loc 1 696 0
 624 03e4 0000A0E3 		mov	r0, #0
 625 03e8 FEFFFFEB 		bl	xsvfTmsTransition
 697:../Xilinx_src/micro.c ****                     *pucTapState    = XTAPSTATE_SHIFTIR;
 626              		.loc 1 697 0
 627 03ec 10301BE5 		ldr	r3, [fp, #-16]
 628 03f0 0B20A0E3 		mov	r2, #11
 629 03f4 0020C3E5 		strb	r2, [r3]
 698:../Xilinx_src/micro.c ****                 }
 699:../Xilinx_src/micro.c ****                 else
 700:../Xilinx_src/micro.c ****                 {
 701:../Xilinx_src/micro.c ****                     xsvfTmsTransition( 1 );
 702:../Xilinx_src/micro.c ****                     *pucTapState    = XTAPSTATE_UPDATEIR;
 703:../Xilinx_src/micro.c ****                 }
 704:../Xilinx_src/micro.c ****                 break;
 630              		.loc 1 704 0
 631 03f8 1A0000EA 		b	.L17
 632              	.L50:
 701:../Xilinx_src/micro.c ****                     *pucTapState    = XTAPSTATE_UPDATEIR;
 633              		.loc 1 701 0
 634 03fc 0100A0E3 		mov	r0, #1
 635 0400 FEFFFFEB 		bl	xsvfTmsTransition
 702:../Xilinx_src/micro.c ****                 }
 636              		.loc 1 702 0
 637 0404 10301BE5 		ldr	r3, [fp, #-16]
 638 0408 0F20A0E3 		mov	r2, #15
 639 040c 0020C3E5 		strb	r2, [r3]
 640              		.loc 1 704 0
 641 0410 140000EA 		b	.L17
 642              	.L35:
 705:../Xilinx_src/micro.c ****             case XTAPSTATE_UPDATEIR:
 706:../Xilinx_src/micro.c ****                 if ( ucTargetState == XTAPSTATE_RUNTEST )
 643              		.loc 1 706 0
 644 0414 11305BE5 		ldrb	r3, [fp, #-17]	@ zero_extendqisi2
 645 0418 010053E3 		cmp	r3, #1
 646 041c 0500001A 		bne	.L52
 707:../Xilinx_src/micro.c ****                 {
 708:../Xilinx_src/micro.c ****                     xsvfTmsTransition( 0 );
 647              		.loc 1 708 0
 648 0420 0000A0E3 		mov	r0, #0
 649 0424 FEFFFFEB 		bl	xsvfTmsTransition
 709:../Xilinx_src/micro.c ****                     *pucTapState    = XTAPSTATE_RUNTEST;
 650              		.loc 1 709 0
 651 0428 10301BE5 		ldr	r3, [fp, #-16]
 652 042c 0120A0E3 		mov	r2, #1
 653 0430 0020C3E5 		strb	r2, [r3]
 710:../Xilinx_src/micro.c ****                 }
 711:../Xilinx_src/micro.c ****                 else
 712:../Xilinx_src/micro.c ****                 {
 713:../Xilinx_src/micro.c ****                     xsvfTmsTransition( 1 );
 714:../Xilinx_src/micro.c ****                     *pucTapState    = XTAPSTATE_SELECTDR;
 715:../Xilinx_src/micro.c ****                 }
 716:../Xilinx_src/micro.c ****                 break;
 654              		.loc 1 716 0
 655 0434 0B0000EA 		b	.L17
 656              	.L52:
 713:../Xilinx_src/micro.c ****                     *pucTapState    = XTAPSTATE_SELECTDR;
 657              		.loc 1 713 0
 658 0438 0100A0E3 		mov	r0, #1
 659 043c FEFFFFEB 		bl	xsvfTmsTransition
 714:../Xilinx_src/micro.c ****                 }
 660              		.loc 1 714 0
 661 0440 10301BE5 		ldr	r3, [fp, #-16]
 662 0444 0220A0E3 		mov	r2, #2
 663 0448 0020C3E5 		strb	r2, [r3]
 664              		.loc 1 716 0
 665 044c 050000EA 		b	.L17
 666              	.L18:
 717:../Xilinx_src/micro.c ****             default:
 718:../Xilinx_src/micro.c ****                 iErrorCode      = XSVF_ERROR_ILLEGALSTATE;
 667              		.loc 1 718 0
 668 0450 0530A0E3 		mov	r3, #5
 669 0454 0C300BE5 		str	r3, [fp, #-12]
 719:../Xilinx_src/micro.c ****                 *pucTapState    = ucTargetState;    /* Exit while loop */
 670              		.loc 1 719 0
 671 0458 10301BE5 		ldr	r3, [fp, #-16]
 672 045c 11205BE5 		ldrb	r2, [fp, #-17]
 673 0460 0020C3E5 		strb	r2, [r3]
 720:../Xilinx_src/micro.c ****                 break;
 674              		.loc 1 720 0
 675 0464 0000A0E1 		mov	r0, r0	@ nop
 676              	.L17:
 577:../Xilinx_src/micro.c ****         {
 677              		.loc 1 577 0 discriminator 1
 678 0468 10301BE5 		ldr	r3, [fp, #-16]
 679 046c 0030D3E5 		ldrb	r3, [r3]	@ zero_extendqisi2
 680 0470 11205BE5 		ldrb	r2, [fp, #-17]	@ zero_extendqisi2
 681 0474 030052E1 		cmp	r2, r3
 682 0478 2EFFFF1A 		bne	.L54
 683              	.L11:
 721:../Xilinx_src/micro.c ****             }
 722:../Xilinx_src/micro.c ****             XSVFDBG_PRINTF1( 3, "   TAP State = %s\n",
 723:../Xilinx_src/micro.c ****                              xsvf_pzTapState[ *pucTapState ] );
 724:../Xilinx_src/micro.c ****         }
 725:../Xilinx_src/micro.c ****     }
 726:../Xilinx_src/micro.c **** 
 727:../Xilinx_src/micro.c ****     return( iErrorCode );
 684              		.loc 1 727 0
 685 047c 0C301BE5 		ldr	r3, [fp, #-12]
 728:../Xilinx_src/micro.c **** }
 686              		.loc 1 728 0
 687 0480 0300A0E1 		mov	r0, r3
 688 0484 04D04BE2 		sub	sp, fp, #4
 689              		@ sp needed
 690 0488 0088BDE8 		ldmfd	sp!, {fp, pc}
 691              		.cfi_endproc
 692              	.LFE4:
 694              		.section	.text.xsvfShiftOnly,"ax",%progbits
 695              		.align	2
 696              		.global	xsvfShiftOnly
 698              	xsvfShiftOnly:
 699              	.LFB5:
 729:../Xilinx_src/micro.c **** 
 730:../Xilinx_src/micro.c **** /*****************************************************************************
 731:../Xilinx_src/micro.c **** * Function:     xsvfShiftOnly
 732:../Xilinx_src/micro.c **** * Description:  Assumes that starting TAP state is SHIFT-DR or SHIFT-IR.
 733:../Xilinx_src/micro.c **** *               Shift the given TDI data into the JTAG scan chain.
 734:../Xilinx_src/micro.c **** *               Optionally, save the TDO data shifted out of the scan chain.
 735:../Xilinx_src/micro.c **** *               Last shift cycle is special:  capture last TDO, set last TDI,
 736:../Xilinx_src/micro.c **** *               but does not pulse TCK.  Caller must pulse TCK and optionally
 737:../Xilinx_src/micro.c **** *               set TMS=1 to exit shift state.
 738:../Xilinx_src/micro.c **** * Parameters:   lNumBits        - number of bits to shift.
 739:../Xilinx_src/micro.c **** *               plvTdi          - ptr to lenval for TDI data.
 740:../Xilinx_src/micro.c **** *               plvTdoCaptured  - ptr to lenval for storing captured TDO data.
 741:../Xilinx_src/micro.c **** *               iExitShift      - 1=exit at end of shift; 0=stay in Shift-DR.
 742:../Xilinx_src/micro.c **** * Returns:      void.
 743:../Xilinx_src/micro.c **** *****************************************************************************/
 744:../Xilinx_src/micro.c **** void xsvfShiftOnly( long    lNumBits,
 745:../Xilinx_src/micro.c ****                     lenVal* plvTdi,
 746:../Xilinx_src/micro.c ****                     lenVal* plvTdoCaptured,
 747:../Xilinx_src/micro.c ****                     int     iExitShift )
 748:../Xilinx_src/micro.c **** {
 700              		.loc 1 748 0
 701              		.cfi_startproc
 702              		@ args = 0, pretend = 0, frame = 40
 703              		@ frame_needed = 1, uses_anonymous_args = 0
 704 0000 00482DE9 		stmfd	sp!, {fp, lr}
 705              	.LCFI10:
 706              		.cfi_def_cfa_offset 8
 707              		.cfi_offset 11, -8
 708              		.cfi_offset 14, -4
 709 0004 04B08DE2 		add	fp, sp, #4
 710              	.LCFI11:
 711              		.cfi_def_cfa 11, 4
 712 0008 28D04DE2 		sub	sp, sp, #40
 713 000c 20000BE5 		str	r0, [fp, #-32]
 714 0010 24100BE5 		str	r1, [fp, #-36]
 715 0014 28200BE5 		str	r2, [fp, #-40]
 716 0018 2C300BE5 		str	r3, [fp, #-44]
 749:../Xilinx_src/micro.c ****     unsigned char*  pucTdi;
 750:../Xilinx_src/micro.c ****     unsigned char*  pucTdo;
 751:../Xilinx_src/micro.c ****     unsigned char   ucTdiByte;
 752:../Xilinx_src/micro.c ****     unsigned char   ucTdoByte;
 753:../Xilinx_src/micro.c ****     unsigned char   ucTdoBit;
 754:../Xilinx_src/micro.c ****     int             i;
 755:../Xilinx_src/micro.c **** 
 756:../Xilinx_src/micro.c ****     /* assert( ( ( lNumBits + 7 ) / 8 ) == plvTdi->len ); */
 757:../Xilinx_src/micro.c **** 
 758:../Xilinx_src/micro.c ****     /* Initialize TDO storage len == TDI len */
 759:../Xilinx_src/micro.c ****     pucTdo  = 0;
 717              		.loc 1 759 0
 718 001c 0030A0E3 		mov	r3, #0
 719 0020 0C300BE5 		str	r3, [fp, #-12]
 760:../Xilinx_src/micro.c ****     if ( plvTdoCaptured )
 720              		.loc 1 760 0
 721 0024 28301BE5 		ldr	r3, [fp, #-40]
 722 0028 000053E3 		cmp	r3, #0
 723 002c 0B00000A 		beq	.L57
 761:../Xilinx_src/micro.c ****     {
 762:../Xilinx_src/micro.c ****         plvTdoCaptured->len = plvTdi->len;
 724              		.loc 1 762 0
 725 0030 24301BE5 		ldr	r3, [fp, #-36]
 726 0034 B020D3E1 		ldrh	r2, [r3]
 727 0038 28301BE5 		ldr	r3, [fp, #-40]
 728 003c B020C3E1 		strh	r2, [r3]	@ movhi
 763:../Xilinx_src/micro.c ****         pucTdo              = plvTdoCaptured->val + plvTdi->len;
 729              		.loc 1 763 0
 730 0040 24301BE5 		ldr	r3, [fp, #-36]
 731 0044 B030D3E1 		ldrh	r3, [r3]
 732 0048 0338A0E1 		mov	r3, r3, asl #16
 733 004c 4338A0E1 		mov	r3, r3, asr #16
 734 0050 28201BE5 		ldr	r2, [fp, #-40]
 735 0054 033082E0 		add	r3, r2, r3
 736 0058 023083E2 		add	r3, r3, #2
 737 005c 0C300BE5 		str	r3, [fp, #-12]
 738              	.L57:
 764:../Xilinx_src/micro.c ****     }
 765:../Xilinx_src/micro.c **** 
 766:../Xilinx_src/micro.c ****     /* Shift LSB first.  val[N-1] == LSB.  val[0] == MSB. */
 767:../Xilinx_src/micro.c ****     pucTdi  = plvTdi->val + plvTdi->len;
 739              		.loc 1 767 0
 740 0060 24301BE5 		ldr	r3, [fp, #-36]
 741 0064 B030D3E1 		ldrh	r3, [r3]
 742 0068 0338A0E1 		mov	r3, r3, asl #16
 743 006c 4338A0E1 		mov	r3, r3, asr #16
 744 0070 24201BE5 		ldr	r2, [fp, #-36]
 745 0074 033082E0 		add	r3, r2, r3
 746 0078 023083E2 		add	r3, r3, #2
 747 007c 08300BE5 		str	r3, [fp, #-8]
 768:../Xilinx_src/micro.c ****     while ( lNumBits )
 748              		.loc 1 768 0
 749 0080 4A0000EA 		b	.L58
 750              	.L64:
 769:../Xilinx_src/micro.c ****     {
 770:../Xilinx_src/micro.c ****         /* Process on a byte-basis */
 771:../Xilinx_src/micro.c ****         ucTdiByte   = (*(--pucTdi));
 751              		.loc 1 771 0
 752 0084 08301BE5 		ldr	r3, [fp, #-8]
 753 0088 013043E2 		sub	r3, r3, #1
 754 008c 08300BE5 		str	r3, [fp, #-8]
 755 0090 08301BE5 		ldr	r3, [fp, #-8]
 756 0094 0030D3E5 		ldrb	r3, [r3]
 757 0098 0D304BE5 		strb	r3, [fp, #-13]
 772:../Xilinx_src/micro.c ****         ucTdoByte   = 0;
 758              		.loc 1 772 0
 759 009c 0030A0E3 		mov	r3, #0
 760 00a0 0E304BE5 		strb	r3, [fp, #-14]
 773:../Xilinx_src/micro.c ****         for ( i = 0; ( lNumBits && ( i < 8 ) ); ++i )
 761              		.loc 1 773 0
 762 00a4 0030A0E3 		mov	r3, #0
 763 00a8 14300BE5 		str	r3, [fp, #-20]
 764 00ac 300000EA 		b	.L59
 765              	.L63:
 774:../Xilinx_src/micro.c ****         {
 775:../Xilinx_src/micro.c ****             --lNumBits;
 766              		.loc 1 775 0
 767 00b0 20301BE5 		ldr	r3, [fp, #-32]
 768 00b4 013043E2 		sub	r3, r3, #1
 769 00b8 20300BE5 		str	r3, [fp, #-32]
 776:../Xilinx_src/micro.c ****             if ( iExitShift && !lNumBits )
 770              		.loc 1 776 0
 771 00bc 2C301BE5 		ldr	r3, [fp, #-44]
 772 00c0 000053E3 		cmp	r3, #0
 773 00c4 0500000A 		beq	.L60
 774              		.loc 1 776 0 is_stmt 0 discriminator 1
 775 00c8 20301BE5 		ldr	r3, [fp, #-32]
 776 00cc 000053E3 		cmp	r3, #0
 777 00d0 0200001A 		bne	.L60
 777:../Xilinx_src/micro.c ****             {
 778:../Xilinx_src/micro.c ****                 /* Exit Shift-DR state */
 779:../Xilinx_src/micro.c ****                 setPort( TMS, 1 );
 778              		.loc 1 779 0 is_stmt 1
 779 00d4 0100A0E3 		mov	r0, #1
 780 00d8 0110A0E3 		mov	r1, #1
 781 00dc FEFFFFEB 		bl	setPort
 782              	.L60:
 780:../Xilinx_src/micro.c ****             }
 781:../Xilinx_src/micro.c **** 
 782:../Xilinx_src/micro.c ****             /* Set the new TDI value */
 783:../Xilinx_src/micro.c ****             setPort( TDI, (short)(ucTdiByte & 1) );
 783              		.loc 1 783 0
 784 00e0 0D305BE5 		ldrb	r3, [fp, #-13]	@ zero_extendqisi2
 785 00e4 0338A0E1 		mov	r3, r3, asl #16
 786 00e8 2338A0E1 		mov	r3, r3, lsr #16
 787 00ec 013003E2 		and	r3, r3, #1
 788 00f0 0338A0E1 		mov	r3, r3, asl #16
 789 00f4 2338A0E1 		mov	r3, r3, lsr #16
 790 00f8 0338A0E1 		mov	r3, r3, asl #16
 791 00fc 4338A0E1 		mov	r3, r3, asr #16
 792 0100 0200A0E3 		mov	r0, #2
 793 0104 0310A0E1 		mov	r1, r3
 794 0108 FEFFFFEB 		bl	setPort
 784:../Xilinx_src/micro.c ****             ucTdiByte   >>= 1;
 795              		.loc 1 784 0
 796 010c 0D305BE5 		ldrb	r3, [fp, #-13]	@ zero_extendqisi2
 797 0110 A330A0E1 		mov	r3, r3, lsr #1
 798 0114 0D304BE5 		strb	r3, [fp, #-13]
 785:../Xilinx_src/micro.c **** 
 786:../Xilinx_src/micro.c ****             /* Set TCK low */
 787:../Xilinx_src/micro.c ****             setPort( TCK, 0 );
 799              		.loc 1 787 0
 800 0118 0000A0E3 		mov	r0, #0
 801 011c 0010A0E3 		mov	r1, #0
 802 0120 FEFFFFEB 		bl	setPort
 788:../Xilinx_src/micro.c **** 
 789:../Xilinx_src/micro.c ****             if ( pucTdo )
 803              		.loc 1 789 0
 804 0124 0C301BE5 		ldr	r3, [fp, #-12]
 805 0128 000053E3 		cmp	r3, #0
 806 012c 0A00000A 		beq	.L61
 790:../Xilinx_src/micro.c ****             {
 791:../Xilinx_src/micro.c ****                 /* Save the TDO value */
 792:../Xilinx_src/micro.c ****                 ucTdoBit    = readTDOBit();
 807              		.loc 1 792 0
 808 0130 FEFFFFEB 		bl	readTDOBit
 809 0134 0030A0E1 		mov	r3, r0
 810 0138 15304BE5 		strb	r3, [fp, #-21]
 793:../Xilinx_src/micro.c ****                 ucTdoByte   |= ( ucTdoBit << i );
 811              		.loc 1 793 0
 812 013c 15205BE5 		ldrb	r2, [fp, #-21]	@ zero_extendqisi2
 813 0140 14301BE5 		ldr	r3, [fp, #-20]
 814 0144 1233A0E1 		mov	r3, r2, asl r3
 815 0148 FF2003E2 		and	r2, r3, #255
 816 014c 0E305BE5 		ldrb	r3, [fp, #-14]	@ zero_extendqisi2
 817 0150 033082E1 		orr	r3, r2, r3
 818 0154 FF3003E2 		and	r3, r3, #255
 819 0158 0E304BE5 		strb	r3, [fp, #-14]
 820              	.L61:
 794:../Xilinx_src/micro.c ****             }
 795:../Xilinx_src/micro.c **** 
 796:../Xilinx_src/micro.c ****             /* Set TCK high */
 797:../Xilinx_src/micro.c ****             setPort( TCK, 1 );
 821              		.loc 1 797 0
 822 015c 0000A0E3 		mov	r0, #0
 823 0160 0110A0E3 		mov	r1, #1
 824 0164 FEFFFFEB 		bl	setPort
 773:../Xilinx_src/micro.c ****         {
 825              		.loc 1 773 0
 826 0168 14301BE5 		ldr	r3, [fp, #-20]
 827 016c 013083E2 		add	r3, r3, #1
 828 0170 14300BE5 		str	r3, [fp, #-20]
 829              	.L59:
 773:../Xilinx_src/micro.c ****         {
 830              		.loc 1 773 0 is_stmt 0 discriminator 1
 831 0174 20301BE5 		ldr	r3, [fp, #-32]
 832 0178 000053E3 		cmp	r3, #0
 833 017c 0200000A 		beq	.L62
 773:../Xilinx_src/micro.c ****         {
 834              		.loc 1 773 0 discriminator 2
 835 0180 14301BE5 		ldr	r3, [fp, #-20]
 836 0184 070053E3 		cmp	r3, #7
 837 0188 C8FFFFDA 		ble	.L63
 838              	.L62:
 798:../Xilinx_src/micro.c ****         }
 799:../Xilinx_src/micro.c **** 
 800:../Xilinx_src/micro.c ****         /* Save the TDO byte value */
 801:../Xilinx_src/micro.c ****         if ( pucTdo )
 839              		.loc 1 801 0 is_stmt 1
 840 018c 0C301BE5 		ldr	r3, [fp, #-12]
 841 0190 000053E3 		cmp	r3, #0
 842 0194 0500000A 		beq	.L58
 802:../Xilinx_src/micro.c ****         {
 803:../Xilinx_src/micro.c ****             (*(--pucTdo))   = ucTdoByte;
 843              		.loc 1 803 0
 844 0198 0C301BE5 		ldr	r3, [fp, #-12]
 845 019c 013043E2 		sub	r3, r3, #1
 846 01a0 0C300BE5 		str	r3, [fp, #-12]
 847 01a4 0C301BE5 		ldr	r3, [fp, #-12]
 848 01a8 0E205BE5 		ldrb	r2, [fp, #-14]
 849 01ac 0020C3E5 		strb	r2, [r3]
 850              	.L58:
 768:../Xilinx_src/micro.c ****     {
 851              		.loc 1 768 0 discriminator 1
 852 01b0 20301BE5 		ldr	r3, [fp, #-32]
 853 01b4 000053E3 		cmp	r3, #0
 854 01b8 B1FFFF1A 		bne	.L64
 804:../Xilinx_src/micro.c ****         }
 805:../Xilinx_src/micro.c ****     }
 806:../Xilinx_src/micro.c **** }
 855              		.loc 1 806 0
 856 01bc 04D04BE2 		sub	sp, fp, #4
 857              		@ sp needed
 858 01c0 0088BDE8 		ldmfd	sp!, {fp, pc}
 859              		.cfi_endproc
 860              	.LFE5:
 862              		.section	.text.xsvfShift,"ax",%progbits
 863              		.align	2
 864              		.global	xsvfShift
 866              	xsvfShift:
 867              	.LFB6:
 807:../Xilinx_src/micro.c **** 
 808:../Xilinx_src/micro.c **** /*****************************************************************************
 809:../Xilinx_src/micro.c **** * Function:     xsvfShift
 810:../Xilinx_src/micro.c **** * Description:  Goes to the given starting TAP state.
 811:../Xilinx_src/micro.c **** *               Calls xsvfShiftOnly to shift in the given TDI data and
 812:../Xilinx_src/micro.c **** *               optionally capture the TDO data.
 813:../Xilinx_src/micro.c **** *               Compares the TDO captured data against the TDO expected
 814:../Xilinx_src/micro.c **** *               data.
 815:../Xilinx_src/micro.c **** *               If a data mismatch occurs, then executes the exception
 816:../Xilinx_src/micro.c **** *               handling loop upto ucMaxRepeat times.
 817:../Xilinx_src/micro.c **** * Parameters:   pucTapState     - Ptr to current TAP state.
 818:../Xilinx_src/micro.c **** *               ucStartState    - Starting shift state: Shift-DR or Shift-IR.
 819:../Xilinx_src/micro.c **** *               lNumBits        - number of bits to shift.
 820:../Xilinx_src/micro.c **** *               plvTdi          - ptr to lenval for TDI data.
 821:../Xilinx_src/micro.c **** *               plvTdoCaptured  - ptr to lenval for storing TDO data.
 822:../Xilinx_src/micro.c **** *               plvTdoExpected  - ptr to expected TDO data.
 823:../Xilinx_src/micro.c **** *               plvTdoMask      - ptr to TDO mask.
 824:../Xilinx_src/micro.c **** *               ucEndState      - state in which to end the shift.
 825:../Xilinx_src/micro.c **** *               lRunTestTime    - amount of time to wait after the shift.
 826:../Xilinx_src/micro.c **** *               ucMaxRepeat     - Maximum number of retries on TDO mismatch.
 827:../Xilinx_src/micro.c **** * Returns:      int             - 0 = success; otherwise TDO mismatch.
 828:../Xilinx_src/micro.c **** * Notes:        XC9500XL-only Optimization:
 829:../Xilinx_src/micro.c **** *               Skip the waitTime() if plvTdoMask->val[0:plvTdoMask->len-1]
 830:../Xilinx_src/micro.c **** *               is NOT all zeros and sMatch==1.
 831:../Xilinx_src/micro.c **** *****************************************************************************/
 832:../Xilinx_src/micro.c **** int xsvfShift( unsigned char*   pucTapState,
 833:../Xilinx_src/micro.c ****                unsigned char    ucStartState,
 834:../Xilinx_src/micro.c ****                long             lNumBits,
 835:../Xilinx_src/micro.c ****                lenVal*          plvTdi,
 836:../Xilinx_src/micro.c ****                lenVal*          plvTdoCaptured,
 837:../Xilinx_src/micro.c ****                lenVal*          plvTdoExpected,
 838:../Xilinx_src/micro.c ****                lenVal*          plvTdoMask,
 839:../Xilinx_src/micro.c ****                unsigned char    ucEndState,
 840:../Xilinx_src/micro.c ****                long             lRunTestTime,
 841:../Xilinx_src/micro.c ****                unsigned char    ucMaxRepeat )
 842:../Xilinx_src/micro.c **** {
 868              		.loc 1 842 0
 869              		.cfi_startproc
 870              		@ args = 24, pretend = 0, frame = 32
 871              		@ frame_needed = 1, uses_anonymous_args = 0
 872 0000 00482DE9 		stmfd	sp!, {fp, lr}
 873              	.LCFI12:
 874              		.cfi_def_cfa_offset 8
 875              		.cfi_offset 11, -8
 876              		.cfi_offset 14, -4
 877 0004 04B08DE2 		add	fp, sp, #4
 878              	.LCFI13:
 879              		.cfi_def_cfa 11, 4
 880 0008 20D04DE2 		sub	sp, sp, #32
 881 000c 18000BE5 		str	r0, [fp, #-24]
 882 0010 20200BE5 		str	r2, [fp, #-32]
 883 0014 24300BE5 		str	r3, [fp, #-36]
 884 0018 0130A0E1 		mov	r3, r1
 885 001c 19304BE5 		strb	r3, [fp, #-25]
 843:../Xilinx_src/micro.c ****     int             iErrorCode;
 844:../Xilinx_src/micro.c ****     int             iMismatch;
 845:../Xilinx_src/micro.c ****     unsigned char   ucRepeat;
 846:../Xilinx_src/micro.c ****     int             iExitShift;
 847:../Xilinx_src/micro.c **** 
 848:../Xilinx_src/micro.c ****     iErrorCode  = XSVF_ERROR_NONE;
 886              		.loc 1 848 0
 887 0020 0030A0E3 		mov	r3, #0
 888 0024 08300BE5 		str	r3, [fp, #-8]
 849:../Xilinx_src/micro.c ****     iMismatch   = 0;
 889              		.loc 1 849 0
 890 0028 0030A0E3 		mov	r3, #0
 891 002c 0C300BE5 		str	r3, [fp, #-12]
 850:../Xilinx_src/micro.c ****     ucRepeat    = 0;
 892              		.loc 1 850 0
 893 0030 0030A0E3 		mov	r3, #0
 894 0034 0D304BE5 		strb	r3, [fp, #-13]
 851:../Xilinx_src/micro.c ****     iExitShift  = ( ucStartState != ucEndState );
 895              		.loc 1 851 0
 896 0038 19205BE5 		ldrb	r2, [fp, #-25]	@ zero_extendqisi2
 897 003c 1030DBE5 		ldrb	r3, [fp, #16]	@ zero_extendqisi2
 898 0040 030052E1 		cmp	r2, r3
 899 0044 0030A003 		moveq	r3, #0
 900 0048 0130A013 		movne	r3, #1
 901 004c FF3003E2 		and	r3, r3, #255
 902 0050 14300BE5 		str	r3, [fp, #-20]
 852:../Xilinx_src/micro.c **** 
 853:../Xilinx_src/micro.c ****     XSVFDBG_PRINTF1( 3, "   Shift Length = %d\n", lNumBits );
 854:../Xilinx_src/micro.c ****     XSVFDBG_PRINTF( 4, "    TDI          = ");
 855:../Xilinx_src/micro.c ****     XSVFDBG_PRINTLENVAL( 4, plvTdi );
 856:../Xilinx_src/micro.c ****     XSVFDBG_PRINTF( 4, "\n");
 857:../Xilinx_src/micro.c ****     XSVFDBG_PRINTF( 4, "    TDO Expected = ");
 858:../Xilinx_src/micro.c ****     XSVFDBG_PRINTLENVAL( 4, plvTdoExpected );
 859:../Xilinx_src/micro.c ****     XSVFDBG_PRINTF( 4, "\n");
 860:../Xilinx_src/micro.c **** 
 861:../Xilinx_src/micro.c ****     if ( !lNumBits )
 903              		.loc 1 861 0
 904 0054 20301BE5 		ldr	r3, [fp, #-32]
 905 0058 000053E3 		cmp	r3, #0
 906 005c 0800001A 		bne	.L66
 862:../Xilinx_src/micro.c ****     {
 863:../Xilinx_src/micro.c ****         /* Compatibility with XSVF2.00:  XSDR 0 = no shift, but wait in RTI */
 864:../Xilinx_src/micro.c ****         if ( lRunTestTime )
 907              		.loc 1 864 0
 908 0060 14309BE5 		ldr	r3, [fp, #20]
 909 0064 000053E3 		cmp	r3, #0
 910 0068 4F00000A 		beq	.L68
 865:../Xilinx_src/micro.c ****         {
 866:../Xilinx_src/micro.c ****             /* Wait for prespecified XRUNTEST time */
 867:../Xilinx_src/micro.c ****             xsvfGotoTapState( pucTapState, XTAPSTATE_RUNTEST );
 911              		.loc 1 867 0
 912 006c 18001BE5 		ldr	r0, [fp, #-24]
 913 0070 0110A0E3 		mov	r1, #1
 914 0074 FEFFFFEB 		bl	xsvfGotoTapState
 868:../Xilinx_src/micro.c ****             XSVFDBG_PRINTF1( 3, "   Wait = %d usec\n", lRunTestTime );
 869:../Xilinx_src/micro.c ****             waitTime( lRunTestTime );
 915              		.loc 1 869 0
 916 0078 14009BE5 		ldr	r0, [fp, #20]
 917 007c FEFFFFEB 		bl	waitTime
 918 0080 490000EA 		b	.L68
 919              	.L66:
 870:../Xilinx_src/micro.c ****         }
 871:../Xilinx_src/micro.c ****     }
 872:../Xilinx_src/micro.c ****     else
 873:../Xilinx_src/micro.c ****     {
 874:../Xilinx_src/micro.c ****         do
 875:../Xilinx_src/micro.c ****         {
 876:../Xilinx_src/micro.c ****             /* Goto Shift-DR or Shift-IR */
 877:../Xilinx_src/micro.c ****             xsvfGotoTapState( pucTapState, ucStartState );
 920              		.loc 1 877 0
 921 0084 19305BE5 		ldrb	r3, [fp, #-25]	@ zero_extendqisi2
 922 0088 18001BE5 		ldr	r0, [fp, #-24]
 923 008c 0310A0E1 		mov	r1, r3
 924 0090 FEFFFFEB 		bl	xsvfGotoTapState
 878:../Xilinx_src/micro.c **** 
 879:../Xilinx_src/micro.c ****             /* Shift TDI and capture TDO */
 880:../Xilinx_src/micro.c ****             xsvfShiftOnly( lNumBits, plvTdi, plvTdoCaptured, iExitShift );
 925              		.loc 1 880 0
 926 0094 20001BE5 		ldr	r0, [fp, #-32]
 927 0098 24101BE5 		ldr	r1, [fp, #-36]
 928 009c 04209BE5 		ldr	r2, [fp, #4]
 929 00a0 14301BE5 		ldr	r3, [fp, #-20]
 930 00a4 FEFFFFEB 		bl	xsvfShiftOnly
 881:../Xilinx_src/micro.c **** 
 882:../Xilinx_src/micro.c ****             if ( plvTdoExpected )
 931              		.loc 1 882 0
 932 00a8 08309BE5 		ldr	r3, [fp, #8]
 933 00ac 000053E3 		cmp	r3, #0
 934 00b0 0900000A 		beq	.L69
 883:../Xilinx_src/micro.c ****             {
 884:../Xilinx_src/micro.c ****                 /* Compare TDO data to expected TDO data */
 885:../Xilinx_src/micro.c ****                 iMismatch   = !EqualLenVal( plvTdoExpected,
 935              		.loc 1 885 0
 936 00b4 08009BE5 		ldr	r0, [fp, #8]
 937 00b8 04109BE5 		ldr	r1, [fp, #4]
 938 00bc 0C209BE5 		ldr	r2, [fp, #12]
 939 00c0 FEFFFFEB 		bl	EqualLenVal
 940 00c4 0030A0E1 		mov	r3, r0
 941 00c8 000053E3 		cmp	r3, #0
 942 00cc 0030A013 		movne	r3, #0
 943 00d0 0130A003 		moveq	r3, #1
 944 00d4 FF3003E2 		and	r3, r3, #255
 945 00d8 0C300BE5 		str	r3, [fp, #-12]
 946              	.L69:
 886:../Xilinx_src/micro.c ****                                             plvTdoCaptured,
 887:../Xilinx_src/micro.c ****                                             plvTdoMask );
 888:../Xilinx_src/micro.c ****             }
 889:../Xilinx_src/micro.c **** 
 890:../Xilinx_src/micro.c ****             if ( iExitShift )
 947              		.loc 1 890 0
 948 00dc 14301BE5 		ldr	r3, [fp, #-20]
 949 00e0 000053E3 		cmp	r3, #0
 950 00e4 2700000A 		beq	.L70
 891:../Xilinx_src/micro.c ****             {
 892:../Xilinx_src/micro.c ****                 /* Update TAP state:  Shift->Exit */
 893:../Xilinx_src/micro.c ****                 ++(*pucTapState);
 951              		.loc 1 893 0
 952 00e8 18301BE5 		ldr	r3, [fp, #-24]
 953 00ec 0030D3E5 		ldrb	r3, [r3]	@ zero_extendqisi2
 954 00f0 013083E2 		add	r3, r3, #1
 955 00f4 FF2003E2 		and	r2, r3, #255
 956 00f8 18301BE5 		ldr	r3, [fp, #-24]
 957 00fc 0020C3E5 		strb	r2, [r3]
 894:../Xilinx_src/micro.c ****                 XSVFDBG_PRINTF1( 3, "   TAP State = %s\n",
 895:../Xilinx_src/micro.c ****                                  xsvf_pzTapState[ *pucTapState ] );
 896:../Xilinx_src/micro.c **** 
 897:../Xilinx_src/micro.c ****                 if ( iMismatch && lRunTestTime && ( ucRepeat < ucMaxRepeat ) )
 958              		.loc 1 897 0
 959 0100 0C301BE5 		ldr	r3, [fp, #-12]
 960 0104 000053E3 		cmp	r3, #0
 961 0108 1200000A 		beq	.L71
 962              		.loc 1 897 0 is_stmt 0 discriminator 1
 963 010c 14309BE5 		ldr	r3, [fp, #20]
 964 0110 000053E3 		cmp	r3, #0
 965 0114 0F00000A 		beq	.L71
 966 0118 0D205BE5 		ldrb	r2, [fp, #-13]	@ zero_extendqisi2
 967 011c 1830DBE5 		ldrb	r3, [fp, #24]	@ zero_extendqisi2
 968 0120 030052E1 		cmp	r2, r3
 969 0124 0B00002A 		bcs	.L71
 898:../Xilinx_src/micro.c ****                 {
 899:../Xilinx_src/micro.c ****                     XSVFDBG_PRINTF( 4, "    TDO Expected = ");
 900:../Xilinx_src/micro.c ****                     XSVFDBG_PRINTLENVAL( 4, plvTdoExpected );
 901:../Xilinx_src/micro.c ****                     XSVFDBG_PRINTF( 4, "\n");
 902:../Xilinx_src/micro.c ****                     XSVFDBG_PRINTF( 4, "    TDO Captured = ");
 903:../Xilinx_src/micro.c ****                     XSVFDBG_PRINTLENVAL( 4, plvTdoCaptured );
 904:../Xilinx_src/micro.c ****                     XSVFDBG_PRINTF( 4, "\n");
 905:../Xilinx_src/micro.c ****                     XSVFDBG_PRINTF( 4, "    TDO Mask     = ");
 906:../Xilinx_src/micro.c ****                     XSVFDBG_PRINTLENVAL( 4, plvTdoMask );
 907:../Xilinx_src/micro.c ****                     XSVFDBG_PRINTF( 4, "\n");
 908:../Xilinx_src/micro.c ****                     XSVFDBG_PRINTF1( 3, "   Retry #%d\n", ( ucRepeat + 1 ) );
 909:../Xilinx_src/micro.c ****                     /* Do exception handling retry - ShiftDR only */
 910:../Xilinx_src/micro.c ****                     xsvfGotoTapState( pucTapState, XTAPSTATE_PAUSEDR );
 970              		.loc 1 910 0 is_stmt 1
 971 0128 18001BE5 		ldr	r0, [fp, #-24]
 972 012c 0610A0E3 		mov	r1, #6
 973 0130 FEFFFFEB 		bl	xsvfGotoTapState
 911:../Xilinx_src/micro.c ****                     /* Shift 1 extra bit */
 912:../Xilinx_src/micro.c ****                     xsvfGotoTapState( pucTapState, XTAPSTATE_SHIFTDR );
 974              		.loc 1 912 0
 975 0134 18001BE5 		ldr	r0, [fp, #-24]
 976 0138 0410A0E3 		mov	r1, #4
 977 013c FEFFFFEB 		bl	xsvfGotoTapState
 913:../Xilinx_src/micro.c ****                     /* Increment RUNTEST time by an additional 25% */
 914:../Xilinx_src/micro.c ****                     lRunTestTime    += ( lRunTestTime >> 2 );
 978              		.loc 1 914 0
 979 0140 14309BE5 		ldr	r3, [fp, #20]
 980 0144 4331A0E1 		mov	r3, r3, asr #2
 981 0148 14209BE5 		ldr	r2, [fp, #20]
 982 014c 033082E0 		add	r3, r2, r3
 983 0150 14308BE5 		str	r3, [fp, #20]
 984 0154 030000EA 		b	.L72
 985              	.L71:
 915:../Xilinx_src/micro.c ****                 }
 916:../Xilinx_src/micro.c ****                 else
 917:../Xilinx_src/micro.c ****                 {
 918:../Xilinx_src/micro.c ****                     /* Do normal exit from Shift-XR */
 919:../Xilinx_src/micro.c ****                     xsvfGotoTapState( pucTapState, ucEndState );
 986              		.loc 1 919 0
 987 0158 1030DBE5 		ldrb	r3, [fp, #16]	@ zero_extendqisi2
 988 015c 18001BE5 		ldr	r0, [fp, #-24]
 989 0160 0310A0E1 		mov	r1, r3
 990 0164 FEFFFFEB 		bl	xsvfGotoTapState
 991              	.L72:
 920:../Xilinx_src/micro.c ****                 }
 921:../Xilinx_src/micro.c **** 
 922:../Xilinx_src/micro.c ****                 if ( lRunTestTime )
 992              		.loc 1 922 0
 993 0168 14309BE5 		ldr	r3, [fp, #20]
 994 016c 000053E3 		cmp	r3, #0
 995 0170 0400000A 		beq	.L70
 923:../Xilinx_src/micro.c ****                 {
 924:../Xilinx_src/micro.c ****                     /* Wait for prespecified XRUNTEST time */
 925:../Xilinx_src/micro.c ****                     xsvfGotoTapState( pucTapState, XTAPSTATE_RUNTEST );
 996              		.loc 1 925 0
 997 0174 18001BE5 		ldr	r0, [fp, #-24]
 998 0178 0110A0E3 		mov	r1, #1
 999 017c FEFFFFEB 		bl	xsvfGotoTapState
 926:../Xilinx_src/micro.c ****                     XSVFDBG_PRINTF1( 3, "   Wait = %d usec\n", lRunTestTime );
 927:../Xilinx_src/micro.c ****                     waitTime( lRunTestTime );
 1000              		.loc 1 927 0
 1001 0180 14009BE5 		ldr	r0, [fp, #20]
 1002 0184 FEFFFFEB 		bl	waitTime
 1003              	.L70:
 928:../Xilinx_src/micro.c ****                 }
 929:../Xilinx_src/micro.c ****             }
 930:../Xilinx_src/micro.c ****         } while ( iMismatch && ( ucRepeat++ < ucMaxRepeat ) );
 1004              		.loc 1 930 0
 1005 0188 0C301BE5 		ldr	r3, [fp, #-12]
 1006 018c 000053E3 		cmp	r3, #0
 1007 0190 0500000A 		beq	.L68
 1008              		.loc 1 930 0 is_stmt 0 discriminator 1
 1009 0194 0D305BE5 		ldrb	r3, [fp, #-13]	@ zero_extendqisi2
 1010 0198 012083E2 		add	r2, r3, #1
 1011 019c 0D204BE5 		strb	r2, [fp, #-13]
 1012 01a0 1820DBE5 		ldrb	r2, [fp, #24]	@ zero_extendqisi2
 1013 01a4 030052E1 		cmp	r2, r3
 1014 01a8 B5FFFF8A 		bhi	.L66
 1015              	.L68:
 931:../Xilinx_src/micro.c ****     }
 932:../Xilinx_src/micro.c **** 
 933:../Xilinx_src/micro.c ****     if ( iMismatch )
 1016              		.loc 1 933 0 is_stmt 1
 1017 01ac 0C301BE5 		ldr	r3, [fp, #-12]
 1018 01b0 000053E3 		cmp	r3, #0
 1019 01b4 0B00000A 		beq	.L73
 934:../Xilinx_src/micro.c ****     {
 935:../Xilinx_src/micro.c ****         XSVFDBG_PRINTF( 1, " TDO Expected = ");
 936:../Xilinx_src/micro.c ****         XSVFDBG_PRINTLENVAL( 1, plvTdoExpected );
 937:../Xilinx_src/micro.c ****         XSVFDBG_PRINTF( 1, "\n");
 938:../Xilinx_src/micro.c ****         XSVFDBG_PRINTF( 1, " TDO Captured = ");
 939:../Xilinx_src/micro.c ****         XSVFDBG_PRINTLENVAL( 1, plvTdoCaptured );
 940:../Xilinx_src/micro.c ****         XSVFDBG_PRINTF( 1, "\n");
 941:../Xilinx_src/micro.c ****         XSVFDBG_PRINTF( 1, " TDO Mask     = ");
 942:../Xilinx_src/micro.c ****         XSVFDBG_PRINTLENVAL( 1, plvTdoMask );
 943:../Xilinx_src/micro.c ****         XSVFDBG_PRINTF( 1, "\n");
 944:../Xilinx_src/micro.c ****         if ( ucMaxRepeat && ( ucRepeat > ucMaxRepeat ) )
 1020              		.loc 1 944 0
 1021 01b8 1830DBE5 		ldrb	r3, [fp, #24]	@ zero_extendqisi2
 1022 01bc 000053E3 		cmp	r3, #0
 1023 01c0 0600000A 		beq	.L74
 1024              		.loc 1 944 0 is_stmt 0 discriminator 1
 1025 01c4 0D205BE5 		ldrb	r2, [fp, #-13]	@ zero_extendqisi2
 1026 01c8 1830DBE5 		ldrb	r3, [fp, #24]	@ zero_extendqisi2
 1027 01cc 030052E1 		cmp	r2, r3
 1028 01d0 0200009A 		bls	.L74
 945:../Xilinx_src/micro.c ****         {
 946:../Xilinx_src/micro.c ****             iErrorCode  = XSVF_ERROR_MAXRETRIES;
 1029              		.loc 1 946 0 is_stmt 1
 1030 01d4 0330A0E3 		mov	r3, #3
 1031 01d8 08300BE5 		str	r3, [fp, #-8]
 1032 01dc 010000EA 		b	.L73
 1033              	.L74:
 947:../Xilinx_src/micro.c ****         }
 948:../Xilinx_src/micro.c ****         else
 949:../Xilinx_src/micro.c ****         {
 950:../Xilinx_src/micro.c ****             iErrorCode  = XSVF_ERROR_TDOMISMATCH;
 1034              		.loc 1 950 0
 1035 01e0 0230A0E3 		mov	r3, #2
 1036 01e4 08300BE5 		str	r3, [fp, #-8]
 1037              	.L73:
 951:../Xilinx_src/micro.c ****         }
 952:../Xilinx_src/micro.c ****     }
 953:../Xilinx_src/micro.c **** 
 954:../Xilinx_src/micro.c ****     return( iErrorCode );
 1038              		.loc 1 954 0
 1039 01e8 08301BE5 		ldr	r3, [fp, #-8]
 955:../Xilinx_src/micro.c **** }
 1040              		.loc 1 955 0
 1041 01ec 0300A0E1 		mov	r0, r3
 1042 01f0 04D04BE2 		sub	sp, fp, #4
 1043              		@ sp needed
 1044 01f4 0088BDE8 		ldmfd	sp!, {fp, pc}
 1045              		.cfi_endproc
 1046              	.LFE6:
 1048              		.section	.text.xsvfBasicXSDRTDO,"ax",%progbits
 1049              		.align	2
 1050              		.global	xsvfBasicXSDRTDO
 1052              	xsvfBasicXSDRTDO:
 1053              	.LFB7:
 956:../Xilinx_src/micro.c **** 
 957:../Xilinx_src/micro.c **** /*****************************************************************************
 958:../Xilinx_src/micro.c **** * Function:     xsvfBasicXSDRTDO
 959:../Xilinx_src/micro.c **** * Description:  Get the XSDRTDO parameters and execute the XSDRTDO command.
 960:../Xilinx_src/micro.c **** *               This is the common function for all XSDRTDO commands.
 961:../Xilinx_src/micro.c **** * Parameters:   pucTapState         - Current TAP state.
 962:../Xilinx_src/micro.c **** *               lShiftLengthBits    - number of bits to shift.
 963:../Xilinx_src/micro.c **** *               sShiftLengthBytes   - number of bytes to read.
 964:../Xilinx_src/micro.c **** *               plvTdi              - ptr to lenval for TDI data.
 965:../Xilinx_src/micro.c **** *               lvTdoCaptured       - ptr to lenval for storing TDO data.
 966:../Xilinx_src/micro.c **** *               iEndState           - state in which to end the shift.
 967:../Xilinx_src/micro.c **** *               lRunTestTime        - amount of time to wait after the shift.
 968:../Xilinx_src/micro.c **** *               ucMaxRepeat         - maximum xc9500/xl retries.
 969:../Xilinx_src/micro.c **** * Returns:      int                 - 0 = success; otherwise TDO mismatch.
 970:../Xilinx_src/micro.c **** *****************************************************************************/
 971:../Xilinx_src/micro.c **** int xsvfBasicXSDRTDO( unsigned char*    pucTapState,
 972:../Xilinx_src/micro.c ****                       long              lShiftLengthBits,
 973:../Xilinx_src/micro.c ****                       short             sShiftLengthBytes,
 974:../Xilinx_src/micro.c ****                       lenVal*           plvTdi,
 975:../Xilinx_src/micro.c ****                       lenVal*           plvTdoCaptured,
 976:../Xilinx_src/micro.c ****                       lenVal*           plvTdoExpected,
 977:../Xilinx_src/micro.c ****                       lenVal*           plvTdoMask,
 978:../Xilinx_src/micro.c ****                       unsigned char     ucEndState,
 979:../Xilinx_src/micro.c ****                       long              lRunTestTime,
 980:../Xilinx_src/micro.c ****                       unsigned char     ucMaxRepeat )
 981:../Xilinx_src/micro.c **** {
 1054              		.loc 1 981 0
 1055              		.cfi_startproc
 1056              		@ args = 24, pretend = 0, frame = 16
 1057              		@ frame_needed = 1, uses_anonymous_args = 0
 1058 0000 00482DE9 		stmfd	sp!, {fp, lr}
 1059              	.LCFI14:
 1060              		.cfi_def_cfa_offset 8
 1061              		.cfi_offset 11, -8
 1062              		.cfi_offset 14, -4
 1063 0004 04B08DE2 		add	fp, sp, #4
 1064              	.LCFI15:
 1065              		.cfi_def_cfa 11, 4
 1066 0008 28D04DE2 		sub	sp, sp, #40
 1067 000c 08000BE5 		str	r0, [fp, #-8]
 1068 0010 0C100BE5 		str	r1, [fp, #-12]
 1069 0014 14300BE5 		str	r3, [fp, #-20]
 1070 0018 BE204BE1 		strh	r2, [fp, #-14]	@ movhi
 982:../Xilinx_src/micro.c ****     readVal( plvTdi, sShiftLengthBytes );
 1071              		.loc 1 982 0
 1072 001c FE305BE1 		ldrsh	r3, [fp, #-14]
 1073 0020 14001BE5 		ldr	r0, [fp, #-20]
 1074 0024 0310A0E1 		mov	r1, r3
 1075 0028 FEFFFFEB 		bl	readVal
 983:../Xilinx_src/micro.c ****     if ( plvTdoExpected )
 1076              		.loc 1 983 0
 1077 002c 08309BE5 		ldr	r3, [fp, #8]
 1078 0030 000053E3 		cmp	r3, #0
 1079 0034 0300000A 		beq	.L77
 984:../Xilinx_src/micro.c ****     {
 985:../Xilinx_src/micro.c ****         readVal( plvTdoExpected, sShiftLengthBytes );
 1080              		.loc 1 985 0
 1081 0038 FE305BE1 		ldrsh	r3, [fp, #-14]
 1082 003c 08009BE5 		ldr	r0, [fp, #8]
 1083 0040 0310A0E1 		mov	r1, r3
 1084 0044 FEFFFFEB 		bl	readVal
 1085              	.L77:
 986:../Xilinx_src/micro.c ****     }
 987:../Xilinx_src/micro.c ****     return( xsvfShift( pucTapState, XTAPSTATE_SHIFTDR, lShiftLengthBits,
 1086              		.loc 1 987 0
 1087 0048 04309BE5 		ldr	r3, [fp, #4]
 1088 004c 00308DE5 		str	r3, [sp]
 1089 0050 08309BE5 		ldr	r3, [fp, #8]
 1090 0054 04308DE5 		str	r3, [sp, #4]
 1091 0058 0C309BE5 		ldr	r3, [fp, #12]
 1092 005c 08308DE5 		str	r3, [sp, #8]
 1093 0060 1030DBE5 		ldrb	r3, [fp, #16]	@ zero_extendqisi2
 1094 0064 0C308DE5 		str	r3, [sp, #12]
 1095 0068 14309BE5 		ldr	r3, [fp, #20]
 1096 006c 10308DE5 		str	r3, [sp, #16]
 1097 0070 1830DBE5 		ldrb	r3, [fp, #24]	@ zero_extendqisi2
 1098 0074 14308DE5 		str	r3, [sp, #20]
 1099 0078 08001BE5 		ldr	r0, [fp, #-8]
 1100 007c 0410A0E3 		mov	r1, #4
 1101 0080 0C201BE5 		ldr	r2, [fp, #-12]
 1102 0084 14301BE5 		ldr	r3, [fp, #-20]
 1103 0088 FEFFFFEB 		bl	xsvfShift
 1104 008c 0030A0E1 		mov	r3, r0
 988:../Xilinx_src/micro.c ****                        plvTdi, plvTdoCaptured, plvTdoExpected, plvTdoMask,
 989:../Xilinx_src/micro.c ****                        ucEndState, lRunTestTime, ucMaxRepeat ) );
 990:../Xilinx_src/micro.c **** }
 1105              		.loc 1 990 0
 1106 0090 0300A0E1 		mov	r0, r3
 1107 0094 04D04BE2 		sub	sp, fp, #4
 1108              		@ sp needed
 1109 0098 0088BDE8 		ldmfd	sp!, {fp, pc}
 1110              		.cfi_endproc
 1111              	.LFE7:
 1113              		.section	.text.xsvfDoSDRMasking,"ax",%progbits
 1114              		.align	2
 1115              		.global	xsvfDoSDRMasking
 1117              	xsvfDoSDRMasking:
 1118              	.LFB8:
 991:../Xilinx_src/micro.c **** 
 992:../Xilinx_src/micro.c **** /*****************************************************************************
 993:../Xilinx_src/micro.c **** * Function:     xsvfDoSDRMasking
 994:../Xilinx_src/micro.c **** * Description:  Update the data value with the next XSDRINC data and address.
 995:../Xilinx_src/micro.c **** * Example:      dataVal=0x01ff, nextData=0xab, addressMask=0x0100,
 996:../Xilinx_src/micro.c **** *               dataMask=0x00ff, should set dataVal to 0x02ab
 997:../Xilinx_src/micro.c **** * Parameters:   plvTdi          - The current TDI value.
 998:../Xilinx_src/micro.c **** *               plvNextData     - the next data value.
 999:../Xilinx_src/micro.c **** *               plvAddressMask  - the address mask.
1000:../Xilinx_src/micro.c **** *               plvDataMask     - the data mask.
1001:../Xilinx_src/micro.c **** * Returns:      void.
1002:../Xilinx_src/micro.c **** *****************************************************************************/
1003:../Xilinx_src/micro.c **** #ifdef  XSVF_SUPPORT_COMPRESSION
1004:../Xilinx_src/micro.c **** void xsvfDoSDRMasking( lenVal*  plvTdi,
1005:../Xilinx_src/micro.c ****                        lenVal*  plvNextData,
1006:../Xilinx_src/micro.c ****                        lenVal*  plvAddressMask,
1007:../Xilinx_src/micro.c ****                        lenVal*  plvDataMask )
1008:../Xilinx_src/micro.c **** {
 1119              		.loc 1 1008 0
 1120              		.cfi_startproc
 1121              		@ args = 0, pretend = 0, frame = 32
 1122              		@ frame_needed = 1, uses_anonymous_args = 0
 1123 0000 00482DE9 		stmfd	sp!, {fp, lr}
 1124              	.LCFI16:
 1125              		.cfi_def_cfa_offset 8
 1126              		.cfi_offset 11, -8
 1127              		.cfi_offset 14, -4
 1128 0004 04B08DE2 		add	fp, sp, #4
 1129              	.LCFI17:
 1130              		.cfi_def_cfa 11, 4
 1131 0008 20D04DE2 		sub	sp, sp, #32
 1132 000c 18000BE5 		str	r0, [fp, #-24]
 1133 0010 1C100BE5 		str	r1, [fp, #-28]
 1134 0014 20200BE5 		str	r2, [fp, #-32]
 1135 0018 24300BE5 		str	r3, [fp, #-36]
1009:../Xilinx_src/micro.c ****     int             i;
1010:../Xilinx_src/micro.c ****     unsigned char   ucTdi;
1011:../Xilinx_src/micro.c ****     unsigned char   ucTdiMask;
1012:../Xilinx_src/micro.c ****     unsigned char   ucDataMask;
1013:../Xilinx_src/micro.c ****     unsigned char   ucNextData;
1014:../Xilinx_src/micro.c ****     unsigned char   ucNextMask;
1015:../Xilinx_src/micro.c ****     short           sNextData;
1016:../Xilinx_src/micro.c **** 
1017:../Xilinx_src/micro.c ****     /* add the address Mask to dataVal and return as a new dataVal */
1018:../Xilinx_src/micro.c ****     addVal( plvTdi, plvTdi, plvAddressMask );
 1136              		.loc 1 1018 0
 1137 001c 18001BE5 		ldr	r0, [fp, #-24]
 1138 0020 18101BE5 		ldr	r1, [fp, #-24]
 1139 0024 20201BE5 		ldr	r2, [fp, #-32]
 1140 0028 FEFFFFEB 		bl	addVal
1019:../Xilinx_src/micro.c **** 
1020:../Xilinx_src/micro.c ****     ucNextData  = 0;
 1141              		.loc 1 1020 0
 1142 002c 0030A0E3 		mov	r3, #0
 1143 0030 0C304BE5 		strb	r3, [fp, #-12]
1021:../Xilinx_src/micro.c ****     ucNextMask  = 0;
 1144              		.loc 1 1021 0
 1145 0034 0030A0E3 		mov	r3, #0
 1146 0038 0D304BE5 		strb	r3, [fp, #-13]
1022:../Xilinx_src/micro.c ****     sNextData   = plvNextData->len;
 1147              		.loc 1 1022 0
 1148 003c 1C301BE5 		ldr	r3, [fp, #-28]
 1149 0040 B030D3E1 		ldrh	r3, [r3]	@ movhi
 1150 0044 B0314BE1 		strh	r3, [fp, #-16]	@ movhi
1023:../Xilinx_src/micro.c ****     for ( i = plvDataMask->len - 1; i >= 0; --i )
 1151              		.loc 1 1023 0
 1152 0048 24301BE5 		ldr	r3, [fp, #-36]
 1153 004c B030D3E1 		ldrh	r3, [r3]
 1154 0050 0338A0E1 		mov	r3, r3, asl #16
 1155 0054 4338A0E1 		mov	r3, r3, asr #16
 1156 0058 013043E2 		sub	r3, r3, #1
 1157 005c 08300BE5 		str	r3, [fp, #-8]
 1158 0060 480000EA 		b	.L80
 1159              	.L88:
1024:../Xilinx_src/micro.c ****     {
1025:../Xilinx_src/micro.c ****         /* Go through data mask in reverse order looking for mask (1) bits */
1026:../Xilinx_src/micro.c ****         ucDataMask  = plvDataMask->val[ i ];
 1160              		.loc 1 1026 0
 1161 0064 24201BE5 		ldr	r2, [fp, #-36]
 1162 0068 08301BE5 		ldr	r3, [fp, #-8]
 1163 006c 033082E0 		add	r3, r2, r3
 1164 0070 0230D3E5 		ldrb	r3, [r3, #2]
 1165 0074 0B304BE5 		strb	r3, [fp, #-11]
1027:../Xilinx_src/micro.c ****         if ( ucDataMask )
 1166              		.loc 1 1027 0
 1167 0078 0B305BE5 		ldrb	r3, [fp, #-11]	@ zero_extendqisi2
 1168 007c 000053E3 		cmp	r3, #0
 1169 0080 3D00000A 		beq	.L81
1028:../Xilinx_src/micro.c ****         {
1029:../Xilinx_src/micro.c ****             /* Retrieve the corresponding TDI byte value */
1030:../Xilinx_src/micro.c ****             ucTdi       = plvTdi->val[ i ];
 1170              		.loc 1 1030 0
 1171 0084 18201BE5 		ldr	r2, [fp, #-24]
 1172 0088 08301BE5 		ldr	r3, [fp, #-8]
 1173 008c 033082E0 		add	r3, r2, r3
 1174 0090 0230D3E5 		ldrb	r3, [r3, #2]
 1175 0094 09304BE5 		strb	r3, [fp, #-9]
1031:../Xilinx_src/micro.c **** 
1032:../Xilinx_src/micro.c ****             /* For each bit in the data mask byte, look for 1's */
1033:../Xilinx_src/micro.c ****             ucTdiMask   = 1;
 1176              		.loc 1 1033 0
 1177 0098 0130A0E3 		mov	r3, #1
 1178 009c 0A304BE5 		strb	r3, [fp, #-10]
1034:../Xilinx_src/micro.c ****             while ( ucDataMask )
 1179              		.loc 1 1034 0
 1180 00a0 2D0000EA 		b	.L82
 1181              	.L87:
1035:../Xilinx_src/micro.c ****             {
1036:../Xilinx_src/micro.c ****                 if ( ucDataMask & 1 )
 1182              		.loc 1 1036 0
 1183 00a4 0B305BE5 		ldrb	r3, [fp, #-11]	@ zero_extendqisi2
 1184 00a8 013003E2 		and	r3, r3, #1
 1185 00ac 000053E3 		cmp	r3, #0
 1186 00b0 2300000A 		beq	.L83
1037:../Xilinx_src/micro.c ****                 {
1038:../Xilinx_src/micro.c ****                     if ( !ucNextMask )
 1187              		.loc 1 1038 0
 1188 00b4 0D305BE5 		ldrb	r3, [fp, #-13]	@ zero_extendqisi2
 1189 00b8 000053E3 		cmp	r3, #0
 1190 00bc 0B00001A 		bne	.L84
1039:../Xilinx_src/micro.c ****                     {
1040:../Xilinx_src/micro.c ****                         /* Get the next data byte */
1041:../Xilinx_src/micro.c ****                         ucNextData  = plvNextData->val[ --sNextData ];
 1191              		.loc 1 1041 0
 1192 00c0 B0315BE1 		ldrh	r3, [fp, #-16]	@ movhi
 1193 00c4 013043E2 		sub	r3, r3, #1
 1194 00c8 B0314BE1 		strh	r3, [fp, #-16]	@ movhi
 1195 00cc F0215BE1 		ldrsh	r2, [fp, #-16]
 1196 00d0 1C101BE5 		ldr	r1, [fp, #-28]
 1197 00d4 0230A0E3 		mov	r3, #2
 1198 00d8 022081E0 		add	r2, r1, r2
 1199 00dc 033082E0 		add	r3, r2, r3
 1200 00e0 0030D3E5 		ldrb	r3, [r3]
 1201 00e4 0C304BE5 		strb	r3, [fp, #-12]
1042:../Xilinx_src/micro.c ****                         ucNextMask  = 1;
 1202              		.loc 1 1042 0
 1203 00e8 0130A0E3 		mov	r3, #1
 1204 00ec 0D304BE5 		strb	r3, [fp, #-13]
 1205              	.L84:
1043:../Xilinx_src/micro.c ****                     }
1044:../Xilinx_src/micro.c **** 
1045:../Xilinx_src/micro.c ****                     /* Set or clear the data bit according to the next data */
1046:../Xilinx_src/micro.c ****                     if ( ucNextData & ucNextMask )
 1206              		.loc 1 1046 0
 1207 00f0 0C205BE5 		ldrb	r2, [fp, #-12]
 1208 00f4 0D305BE5 		ldrb	r3, [fp, #-13]
 1209 00f8 033002E0 		and	r3, r2, r3
 1210 00fc FF3003E2 		and	r3, r3, #255
 1211 0100 000053E3 		cmp	r3, #0
 1212 0104 0400000A 		beq	.L85
1047:../Xilinx_src/micro.c ****                     {
1048:../Xilinx_src/micro.c ****                         ucTdi   |= ucTdiMask;       /* Set bit */
 1213              		.loc 1 1048 0
 1214 0108 09205BE5 		ldrb	r2, [fp, #-9]
 1215 010c 0A305BE5 		ldrb	r3, [fp, #-10]
 1216 0110 033082E1 		orr	r3, r2, r3
 1217 0114 09304BE5 		strb	r3, [fp, #-9]
 1218 0118 060000EA 		b	.L86
 1219              	.L85:
1049:../Xilinx_src/micro.c ****                     }
1050:../Xilinx_src/micro.c ****                     else
1051:../Xilinx_src/micro.c ****                     {
1052:../Xilinx_src/micro.c ****                         ucTdi   &= ( ~ucTdiMask );  /* Clear bit */
 1220              		.loc 1 1052 0
 1221 011c 0A305BE5 		ldrb	r3, [fp, #-10]	@ zero_extendqisi2
 1222 0120 0330E0E1 		mvn	r3, r3
 1223 0124 FF2003E2 		and	r2, r3, #255
 1224 0128 09305BE5 		ldrb	r3, [fp, #-9]	@ zero_extendqisi2
 1225 012c 033002E0 		and	r3, r2, r3
 1226 0130 FF3003E2 		and	r3, r3, #255
 1227 0134 09304BE5 		strb	r3, [fp, #-9]
 1228              	.L86:
1053:../Xilinx_src/micro.c ****                     }
1054:../Xilinx_src/micro.c **** 
1055:../Xilinx_src/micro.c ****                     /* Update the next data */
1056:../Xilinx_src/micro.c ****                     ucNextMask  <<= 1;
 1229              		.loc 1 1056 0
 1230 0138 0D305BE5 		ldrb	r3, [fp, #-13]
 1231 013c 8330A0E1 		mov	r3, r3, asl #1
 1232 0140 0D304BE5 		strb	r3, [fp, #-13]
 1233              	.L83:
1057:../Xilinx_src/micro.c ****                 }
1058:../Xilinx_src/micro.c ****                 ucTdiMask   <<= 1;
 1234              		.loc 1 1058 0
 1235 0144 0A305BE5 		ldrb	r3, [fp, #-10]
 1236 0148 8330A0E1 		mov	r3, r3, asl #1
 1237 014c 0A304BE5 		strb	r3, [fp, #-10]
1059:../Xilinx_src/micro.c ****                 ucDataMask  >>= 1;
 1238              		.loc 1 1059 0
 1239 0150 0B305BE5 		ldrb	r3, [fp, #-11]	@ zero_extendqisi2
 1240 0154 A330A0E1 		mov	r3, r3, lsr #1
 1241 0158 0B304BE5 		strb	r3, [fp, #-11]
 1242              	.L82:
1034:../Xilinx_src/micro.c ****             {
 1243              		.loc 1 1034 0 discriminator 1
 1244 015c 0B305BE5 		ldrb	r3, [fp, #-11]	@ zero_extendqisi2
 1245 0160 000053E3 		cmp	r3, #0
 1246 0164 CEFFFF1A 		bne	.L87
1060:../Xilinx_src/micro.c ****             }
1061:../Xilinx_src/micro.c **** 
1062:../Xilinx_src/micro.c ****             /* Update the TDI value */
1063:../Xilinx_src/micro.c ****             plvTdi->val[ i ]    = ucTdi;
 1247              		.loc 1 1063 0
 1248 0168 18201BE5 		ldr	r2, [fp, #-24]
 1249 016c 08301BE5 		ldr	r3, [fp, #-8]
 1250 0170 033082E0 		add	r3, r2, r3
 1251 0174 09205BE5 		ldrb	r2, [fp, #-9]
 1252 0178 0220C3E5 		strb	r2, [r3, #2]
 1253              	.L81:
1023:../Xilinx_src/micro.c ****     {
 1254              		.loc 1 1023 0
 1255 017c 08301BE5 		ldr	r3, [fp, #-8]
 1256 0180 013043E2 		sub	r3, r3, #1
 1257 0184 08300BE5 		str	r3, [fp, #-8]
 1258              	.L80:
1023:../Xilinx_src/micro.c ****     {
 1259              		.loc 1 1023 0 is_stmt 0 discriminator 1
 1260 0188 08301BE5 		ldr	r3, [fp, #-8]
 1261 018c 000053E3 		cmp	r3, #0
 1262 0190 B3FFFFAA 		bge	.L88
1064:../Xilinx_src/micro.c ****         }
1065:../Xilinx_src/micro.c ****     }
1066:../Xilinx_src/micro.c **** }
 1263              		.loc 1 1066 0 is_stmt 1
 1264 0194 04D04BE2 		sub	sp, fp, #4
 1265              		@ sp needed
 1266 0198 0088BDE8 		ldmfd	sp!, {fp, pc}
 1267              		.cfi_endproc
 1268              	.LFE8:
 1270              		.section	.text.xsvfDoIllegalCmd,"ax",%progbits
 1271              		.align	2
 1272              		.global	xsvfDoIllegalCmd
 1274              	xsvfDoIllegalCmd:
 1275              	.LFB9:
1067:../Xilinx_src/micro.c **** #endif  /* XSVF_SUPPORT_COMPRESSION */
1068:../Xilinx_src/micro.c **** 
1069:../Xilinx_src/micro.c **** /*============================================================================
1070:../Xilinx_src/micro.c **** * XSVF Command Functions (type = TXsvfDoCmdFuncPtr)
1071:../Xilinx_src/micro.c **** * These functions update pXsvfInfo->iErrorCode only on an error.
1072:../Xilinx_src/micro.c **** * Otherwise, the error code is left alone.
1073:../Xilinx_src/micro.c **** * The function returns the error code from the function.
1074:../Xilinx_src/micro.c **** ============================================================================*/
1075:../Xilinx_src/micro.c **** 
1076:../Xilinx_src/micro.c **** /*****************************************************************************
1077:../Xilinx_src/micro.c **** * Function:     xsvfDoIllegalCmd
1078:../Xilinx_src/micro.c **** * Description:  Function place holder for illegal/unsupported commands.
1079:../Xilinx_src/micro.c **** * Parameters:   pXsvfInfo   - XSVF information pointer.
1080:../Xilinx_src/micro.c **** * Returns:      int         - 0 = success;  non-zero = error.
1081:../Xilinx_src/micro.c **** *****************************************************************************/
1082:../Xilinx_src/micro.c **** int xsvfDoIllegalCmd( SXsvfInfo* pXsvfInfo )
1083:../Xilinx_src/micro.c **** {
 1276              		.loc 1 1083 0
 1277              		.cfi_startproc
 1278              		@ args = 0, pretend = 0, frame = 8
 1279              		@ frame_needed = 1, uses_anonymous_args = 0
 1280              		@ link register save eliminated.
 1281 0000 04B02DE5 		str	fp, [sp, #-4]!
 1282              	.LCFI18:
 1283              		.cfi_def_cfa_offset 4
 1284              		.cfi_offset 11, -4
 1285 0004 00B08DE2 		add	fp, sp, #0
 1286              	.LCFI19:
 1287              		.cfi_def_cfa_register 11
 1288 0008 0CD04DE2 		sub	sp, sp, #12
 1289 000c 08000BE5 		str	r0, [fp, #-8]
1084:../Xilinx_src/micro.c ****     XSVFDBG_PRINTF2( 0, "ERROR:  Encountered unsupported command #%d (%s)\n",
1085:../Xilinx_src/micro.c ****                      ((unsigned int)(pXsvfInfo->ucCommand)),
1086:../Xilinx_src/micro.c ****                      ((pXsvfInfo->ucCommand < XLASTCMD)
1087:../Xilinx_src/micro.c ****                       ? (xsvf_pzCommandName[pXsvfInfo->ucCommand])
1088:../Xilinx_src/micro.c ****                       : "Unknown") );
1089:../Xilinx_src/micro.c ****     pXsvfInfo->iErrorCode   = XSVF_ERROR_ILLEGALCMD;
 1290              		.loc 1 1089 0
 1291 0010 08301BE5 		ldr	r3, [fp, #-8]
 1292 0014 0420A0E3 		mov	r2, #4
 1293 0018 082083E5 		str	r2, [r3, #8]
1090:../Xilinx_src/micro.c ****     return( pXsvfInfo->iErrorCode );
 1294              		.loc 1 1090 0
 1295 001c 08301BE5 		ldr	r3, [fp, #-8]
 1296 0020 083093E5 		ldr	r3, [r3, #8]
1091:../Xilinx_src/micro.c **** }
 1297              		.loc 1 1091 0
 1298 0024 0300A0E1 		mov	r0, r3
 1299 0028 00D04BE2 		sub	sp, fp, #0
 1300              		@ sp needed
 1301 002c 04B09DE4 		ldr	fp, [sp], #4
 1302 0030 1EFF2FE1 		bx	lr
 1303              		.cfi_endproc
 1304              	.LFE9:
 1306              		.section	.text.xsvfDoXCOMPLETE,"ax",%progbits
 1307              		.align	2
 1308              		.global	xsvfDoXCOMPLETE
 1310              	xsvfDoXCOMPLETE:
 1311              	.LFB10:
1092:../Xilinx_src/micro.c **** 
1093:../Xilinx_src/micro.c **** /*****************************************************************************
1094:../Xilinx_src/micro.c **** * Function:     xsvfDoXCOMPLETE
1095:../Xilinx_src/micro.c **** * Description:  XCOMPLETE (no parameters)
1096:../Xilinx_src/micro.c **** *               Update complete status for XSVF player.
1097:../Xilinx_src/micro.c **** * Parameters:   pXsvfInfo   - XSVF information pointer.
1098:../Xilinx_src/micro.c **** * Returns:      int         - 0 = success;  non-zero = error.
1099:../Xilinx_src/micro.c **** *****************************************************************************/
1100:../Xilinx_src/micro.c **** int xsvfDoXCOMPLETE( SXsvfInfo* pXsvfInfo )
1101:../Xilinx_src/micro.c **** {
 1312              		.loc 1 1101 0
 1313              		.cfi_startproc
 1314              		@ args = 0, pretend = 0, frame = 8
 1315              		@ frame_needed = 1, uses_anonymous_args = 0
 1316              		@ link register save eliminated.
 1317 0000 04B02DE5 		str	fp, [sp, #-4]!
 1318              	.LCFI20:
 1319              		.cfi_def_cfa_offset 4
 1320              		.cfi_offset 11, -4
 1321 0004 00B08DE2 		add	fp, sp, #0
 1322              	.LCFI21:
 1323              		.cfi_def_cfa_register 11
 1324 0008 0CD04DE2 		sub	sp, sp, #12
 1325 000c 08000BE5 		str	r0, [fp, #-8]
1102:../Xilinx_src/micro.c ****     pXsvfInfo->ucComplete   = 1;
 1326              		.loc 1 1102 0
 1327 0010 08301BE5 		ldr	r3, [fp, #-8]
 1328 0014 0120A0E3 		mov	r2, #1
 1329 0018 0020C3E5 		strb	r2, [r3]
1103:../Xilinx_src/micro.c ****     return( XSVF_ERROR_NONE );
 1330              		.loc 1 1103 0
 1331 001c 0030A0E3 		mov	r3, #0
1104:../Xilinx_src/micro.c **** }
 1332              		.loc 1 1104 0
 1333 0020 0300A0E1 		mov	r0, r3
 1334 0024 00D04BE2 		sub	sp, fp, #0
 1335              		@ sp needed
 1336 0028 04B09DE4 		ldr	fp, [sp], #4
 1337 002c 1EFF2FE1 		bx	lr
 1338              		.cfi_endproc
 1339              	.LFE10:
 1341              		.section	.text.xsvfDoXTDOMASK,"ax",%progbits
 1342              		.align	2
 1343              		.global	xsvfDoXTDOMASK
 1345              	xsvfDoXTDOMASK:
 1346              	.LFB11:
1105:../Xilinx_src/micro.c **** 
1106:../Xilinx_src/micro.c **** /*****************************************************************************
1107:../Xilinx_src/micro.c **** * Function:     xsvfDoXTDOMASK
1108:../Xilinx_src/micro.c **** * Description:  XTDOMASK <lenVal.TdoMask[XSDRSIZE]>
1109:../Xilinx_src/micro.c **** *               Prespecify the TDO compare mask.
1110:../Xilinx_src/micro.c **** * Parameters:   pXsvfInfo   - XSVF information pointer.
1111:../Xilinx_src/micro.c **** * Returns:      int         - 0 = success;  non-zero = error.
1112:../Xilinx_src/micro.c **** *****************************************************************************/
1113:../Xilinx_src/micro.c **** int xsvfDoXTDOMASK( SXsvfInfo* pXsvfInfo )
1114:../Xilinx_src/micro.c **** {
 1347              		.loc 1 1114 0
 1348              		.cfi_startproc
 1349              		@ args = 0, pretend = 0, frame = 8
 1350              		@ frame_needed = 1, uses_anonymous_args = 0
 1351 0000 00482DE9 		stmfd	sp!, {fp, lr}
 1352              	.LCFI22:
 1353              		.cfi_def_cfa_offset 8
 1354              		.cfi_offset 11, -8
 1355              		.cfi_offset 14, -4
 1356 0004 04B08DE2 		add	fp, sp, #4
 1357              	.LCFI23:
 1358              		.cfi_def_cfa 11, 4
 1359 0008 08D04DE2 		sub	sp, sp, #8
 1360 000c 08000BE5 		str	r0, [fp, #-8]
1115:../Xilinx_src/micro.c ****     readVal( &(pXsvfInfo->lvTdoMask), pXsvfInfo->sShiftLengthBytes );
 1361              		.loc 1 1115 0
 1362 0010 08301BE5 		ldr	r3, [fp, #-8]
 1363 0014 063B83E2 		add	r3, r3, #6144
 1364 0018 263083E2 		add	r3, r3, #38
 1365 001c 08201BE5 		ldr	r2, [fp, #-8]
 1366 0020 B821D2E1 		ldrh	r2, [r2, #24]
 1367 0024 0228A0E1 		mov	r2, r2, asl #16
 1368 0028 4228A0E1 		mov	r2, r2, asr #16
 1369 002c 0300A0E1 		mov	r0, r3
 1370 0030 0210A0E1 		mov	r1, r2
 1371 0034 FEFFFFEB 		bl	readVal
1116:../Xilinx_src/micro.c ****     XSVFDBG_PRINTF( 4, "    TDO Mask     = ");
1117:../Xilinx_src/micro.c ****     XSVFDBG_PRINTLENVAL( 4, &(pXsvfInfo->lvTdoMask) );
1118:../Xilinx_src/micro.c ****     XSVFDBG_PRINTF( 4, "\n");
1119:../Xilinx_src/micro.c ****     return( XSVF_ERROR_NONE );
 1372              		.loc 1 1119 0
 1373 0038 0030A0E3 		mov	r3, #0
1120:../Xilinx_src/micro.c **** }
 1374              		.loc 1 1120 0
 1375 003c 0300A0E1 		mov	r0, r3
 1376 0040 04D04BE2 		sub	sp, fp, #4
 1377              		@ sp needed
 1378 0044 0088BDE8 		ldmfd	sp!, {fp, pc}
 1379              		.cfi_endproc
 1380              	.LFE11:
 1382              		.section	.text.xsvfDoXSIR,"ax",%progbits
 1383              		.align	2
 1384              		.global	xsvfDoXSIR
 1386              	xsvfDoXSIR:
 1387              	.LFB12:
1121:../Xilinx_src/micro.c **** 
1122:../Xilinx_src/micro.c **** /*****************************************************************************
1123:../Xilinx_src/micro.c **** * Function:     xsvfDoXSIR
1124:../Xilinx_src/micro.c **** * Description:  XSIR <(byte)shiftlen> <lenVal.TDI[shiftlen]>
1125:../Xilinx_src/micro.c **** *               Get the instruction and shift the instruction into the TAP.
1126:../Xilinx_src/micro.c **** *               If prespecified XRUNTEST!=0, goto RUNTEST and wait after
1127:../Xilinx_src/micro.c **** *               the shift for XRUNTEST usec.
1128:../Xilinx_src/micro.c **** * Parameters:   pXsvfInfo   - XSVF information pointer.
1129:../Xilinx_src/micro.c **** * Returns:      int         - 0 = success;  non-zero = error.
1130:../Xilinx_src/micro.c **** *****************************************************************************/
1131:../Xilinx_src/micro.c **** int xsvfDoXSIR( SXsvfInfo* pXsvfInfo )
1132:../Xilinx_src/micro.c **** {
 1388              		.loc 1 1132 0
 1389              		.cfi_startproc
 1390              		@ args = 0, pretend = 0, frame = 16
 1391              		@ frame_needed = 1, uses_anonymous_args = 0
 1392 0000 10482DE9 		stmfd	sp!, {r4, fp, lr}
 1393              	.LCFI24:
 1394              		.cfi_def_cfa_offset 12
 1395              		.cfi_offset 4, -12
 1396              		.cfi_offset 11, -8
 1397              		.cfi_offset 14, -4
 1398 0004 08B08DE2 		add	fp, sp, #8
 1399              	.LCFI25:
 1400              		.cfi_def_cfa 11, 4
 1401 0008 2CD04DE2 		sub	sp, sp, #44
 1402 000c 18000BE5 		str	r0, [fp, #-24]
1133:../Xilinx_src/micro.c ****     unsigned char   ucShiftIrBits;
1134:../Xilinx_src/micro.c ****     short           sShiftIrBytes;
1135:../Xilinx_src/micro.c ****     int             iErrorCode;
1136:../Xilinx_src/micro.c **** 
1137:../Xilinx_src/micro.c ****     /* Get the shift length and store */
1138:../Xilinx_src/micro.c ****     readByte( &ucShiftIrBits );
 1403              		.loc 1 1138 0
 1404 0010 13304BE2 		sub	r3, fp, #19
 1405 0014 0300A0E1 		mov	r0, r3
 1406 0018 FEFFFFEB 		bl	readByte
1139:../Xilinx_src/micro.c ****     sShiftIrBytes   = xsvfGetAsNumBytes( ucShiftIrBits );
 1407              		.loc 1 1139 0
 1408 001c 13305BE5 		ldrb	r3, [fp, #-19]	@ zero_extendqisi2
 1409 0020 0300A0E1 		mov	r0, r3
 1410 0024 FEFFFFEB 		bl	xsvfGetAsNumBytes
 1411 0028 0030A0E1 		mov	r3, r0
 1412 002c B2314BE1 		strh	r3, [fp, #-18]	@ movhi
1140:../Xilinx_src/micro.c ****     XSVFDBG_PRINTF1( 3, "   XSIR length = %d\n",
1141:../Xilinx_src/micro.c ****                      ((unsigned int)ucShiftIrBits) );
1142:../Xilinx_src/micro.c **** 
1143:../Xilinx_src/micro.c ****     if ( sShiftIrBytes > MAX_LEN )
 1413              		.loc 1 1143 0
 1414 0030 F2315BE1 		ldrsh	r3, [fp, #-18]
 1415 0034 020B53E3 		cmp	r3, #2048
 1416 0038 020000DA 		ble	.L96
1144:../Xilinx_src/micro.c ****     {
1145:../Xilinx_src/micro.c ****         iErrorCode  = XSVF_ERROR_DATAOVERFLOW;
 1417              		.loc 1 1145 0
 1418 003c 0630A0E3 		mov	r3, #6
 1419 0040 10300BE5 		str	r3, [fp, #-16]
 1420 0044 200000EA 		b	.L97
 1421              	.L96:
1146:../Xilinx_src/micro.c ****     }
1147:../Xilinx_src/micro.c ****     else
1148:../Xilinx_src/micro.c ****     {
1149:../Xilinx_src/micro.c ****         /* Get and store instruction to shift in */
1150:../Xilinx_src/micro.c ****         readVal( &(pXsvfInfo->lvTdi), xsvfGetAsNumBytes( ucShiftIrBits ) );
 1422              		.loc 1 1150 0
 1423 0048 18301BE5 		ldr	r3, [fp, #-24]
 1424 004c 1A4083E2 		add	r4, r3, #26
 1425 0050 13305BE5 		ldrb	r3, [fp, #-19]	@ zero_extendqisi2
 1426 0054 0300A0E1 		mov	r0, r3
 1427 0058 FEFFFFEB 		bl	xsvfGetAsNumBytes
 1428 005c 0030A0E1 		mov	r3, r0
 1429 0060 0400A0E1 		mov	r0, r4
 1430 0064 0310A0E1 		mov	r1, r3
 1431 0068 FEFFFFEB 		bl	readVal
1151:../Xilinx_src/micro.c **** 
1152:../Xilinx_src/micro.c ****         /* Shift the data */
1153:../Xilinx_src/micro.c ****         iErrorCode  = xsvfShift( &(pXsvfInfo->ucTapState), XTAPSTATE_SHIFTIR,
 1432              		.loc 1 1153 0
 1433 006c 18301BE5 		ldr	r3, [fp, #-24]
 1434 0070 0C1083E2 		add	r1, r3, #12
 1435 0074 13305BE5 		ldrb	r3, [fp, #-19]	@ zero_extendqisi2
 1436 0078 0320A0E1 		mov	r2, r3
 1437 007c 18301BE5 		ldr	r3, [fp, #-24]
 1438 0080 1A3083E2 		add	r3, r3, #26
 1439 0084 18001BE5 		ldr	r0, [fp, #-24]
 1440 0088 0DC0D0E5 		ldrb	ip, [r0, #13]	@ zero_extendqisi2
 1441 008c 18001BE5 		ldr	r0, [fp, #-24]
 1442 0090 100090E5 		ldr	r0, [r0, #16]
 1443 0094 00E0A0E3 		mov	lr, #0
 1444 0098 00E08DE5 		str	lr, [sp]
 1445 009c 00E0A0E3 		mov	lr, #0
 1446 00a0 04E08DE5 		str	lr, [sp, #4]
 1447 00a4 00E0A0E3 		mov	lr, #0
 1448 00a8 08E08DE5 		str	lr, [sp, #8]
 1449 00ac 0CC08DE5 		str	ip, [sp, #12]
 1450 00b0 10008DE5 		str	r0, [sp, #16]
 1451 00b4 0000A0E3 		mov	r0, #0
 1452 00b8 14008DE5 		str	r0, [sp, #20]
 1453 00bc 0100A0E1 		mov	r0, r1
 1454 00c0 0B10A0E3 		mov	r1, #11
 1455 00c4 FEFFFFEB 		bl	xsvfShift
 1456 00c8 10000BE5 		str	r0, [fp, #-16]
 1457              	.L97:
1154:../Xilinx_src/micro.c ****                                  ucShiftIrBits, &(pXsvfInfo->lvTdi),
1155:../Xilinx_src/micro.c ****                                  /*plvTdoCaptured*/0, /*plvTdoExpected*/0,
1156:../Xilinx_src/micro.c ****                                  /*plvTdoMask*/0, pXsvfInfo->ucEndIR,
1157:../Xilinx_src/micro.c ****                                  pXsvfInfo->lRunTestTime, /*ucMaxRepeat*/0 );
1158:../Xilinx_src/micro.c ****      }
1159:../Xilinx_src/micro.c **** 
1160:../Xilinx_src/micro.c ****     if ( iErrorCode != XSVF_ERROR_NONE )
 1458              		.loc 1 1160 0
 1459 00cc 10301BE5 		ldr	r3, [fp, #-16]
 1460 00d0 000053E3 		cmp	r3, #0
 1461 00d4 0200000A 		beq	.L98
1161:../Xilinx_src/micro.c ****     {
1162:../Xilinx_src/micro.c ****         pXsvfInfo->iErrorCode   = iErrorCode;
 1462              		.loc 1 1162 0
 1463 00d8 18301BE5 		ldr	r3, [fp, #-24]
 1464 00dc 10201BE5 		ldr	r2, [fp, #-16]
 1465 00e0 082083E5 		str	r2, [r3, #8]
 1466              	.L98:
1163:../Xilinx_src/micro.c ****     }
1164:../Xilinx_src/micro.c ****     return( iErrorCode );
 1467              		.loc 1 1164 0
 1468 00e4 10301BE5 		ldr	r3, [fp, #-16]
1165:../Xilinx_src/micro.c **** }
 1469              		.loc 1 1165 0
 1470 00e8 0300A0E1 		mov	r0, r3
 1471 00ec 08D04BE2 		sub	sp, fp, #8
 1472              		@ sp needed
 1473 00f0 1088BDE8 		ldmfd	sp!, {r4, fp, pc}
 1474              		.cfi_endproc
 1475              	.LFE12:
 1477              		.section	.text.xsvfDoXSIR2,"ax",%progbits
 1478              		.align	2
 1479              		.global	xsvfDoXSIR2
 1481              	xsvfDoXSIR2:
 1482              	.LFB13:
1166:../Xilinx_src/micro.c **** 
1167:../Xilinx_src/micro.c **** /*****************************************************************************
1168:../Xilinx_src/micro.c **** * Function:     xsvfDoXSIR2
1169:../Xilinx_src/micro.c **** * Description:  XSIR <(2-byte)shiftlen> <lenVal.TDI[shiftlen]>
1170:../Xilinx_src/micro.c **** *               Get the instruction and shift the instruction into the TAP.
1171:../Xilinx_src/micro.c **** *               If prespecified XRUNTEST!=0, goto RUNTEST and wait after
1172:../Xilinx_src/micro.c **** *               the shift for XRUNTEST usec.
1173:../Xilinx_src/micro.c **** * Parameters:   pXsvfInfo   - XSVF information pointer.
1174:../Xilinx_src/micro.c **** * Returns:      int         - 0 = success;  non-zero = error.
1175:../Xilinx_src/micro.c **** *****************************************************************************/
1176:../Xilinx_src/micro.c **** int xsvfDoXSIR2( SXsvfInfo* pXsvfInfo )
1177:../Xilinx_src/micro.c **** {
 1483              		.loc 1 1177 0
 1484              		.cfi_startproc
 1485              		@ args = 0, pretend = 0, frame = 24
 1486              		@ frame_needed = 1, uses_anonymous_args = 0
 1487 0000 10482DE9 		stmfd	sp!, {r4, fp, lr}
 1488              	.LCFI26:
 1489              		.cfi_def_cfa_offset 12
 1490              		.cfi_offset 4, -12
 1491              		.cfi_offset 11, -8
 1492              		.cfi_offset 14, -4
 1493 0004 08B08DE2 		add	fp, sp, #8
 1494              	.LCFI27:
 1495              		.cfi_def_cfa 11, 4
 1496 0008 34D04DE2 		sub	sp, sp, #52
 1497 000c 20000BE5 		str	r0, [fp, #-32]
1178:../Xilinx_src/micro.c ****     long            lShiftIrBits;
1179:../Xilinx_src/micro.c ****     short           sShiftIrBytes;
1180:../Xilinx_src/micro.c ****     int             iErrorCode;
1181:../Xilinx_src/micro.c **** 
1182:../Xilinx_src/micro.c ****     /* Get the shift length and store */
1183:../Xilinx_src/micro.c ****     readVal( &(pXsvfInfo->lvTdi), 2 );
 1498              		.loc 1 1183 0
 1499 0010 20301BE5 		ldr	r3, [fp, #-32]
 1500 0014 1A3083E2 		add	r3, r3, #26
 1501 0018 0300A0E1 		mov	r0, r3
 1502 001c 0210A0E3 		mov	r1, #2
 1503 0020 FEFFFFEB 		bl	readVal
1184:../Xilinx_src/micro.c ****     lShiftIrBits    = value( &(pXsvfInfo->lvTdi) );
 1504              		.loc 1 1184 0
 1505 0024 20301BE5 		ldr	r3, [fp, #-32]
 1506 0028 1A3083E2 		add	r3, r3, #26
 1507 002c 0300A0E1 		mov	r0, r3
 1508 0030 FEFFFFEB 		bl	value
 1509 0034 14000BE5 		str	r0, [fp, #-20]
1185:../Xilinx_src/micro.c ****     sShiftIrBytes   = xsvfGetAsNumBytes( lShiftIrBits );
 1510              		.loc 1 1185 0
 1511 0038 14001BE5 		ldr	r0, [fp, #-20]
 1512 003c FEFFFFEB 		bl	xsvfGetAsNumBytes
 1513 0040 0030A0E1 		mov	r3, r0
 1514 0044 B6314BE1 		strh	r3, [fp, #-22]	@ movhi
1186:../Xilinx_src/micro.c ****     XSVFDBG_PRINTF1( 3, "   XSIR2 length = %d\n", lShiftIrBits);
1187:../Xilinx_src/micro.c **** 
1188:../Xilinx_src/micro.c ****     if ( sShiftIrBytes > MAX_LEN )
 1515              		.loc 1 1188 0
 1516 0048 F6315BE1 		ldrsh	r3, [fp, #-22]
 1517 004c 020B53E3 		cmp	r3, #2048
 1518 0050 020000DA 		ble	.L101
1189:../Xilinx_src/micro.c ****     {
1190:../Xilinx_src/micro.c ****         iErrorCode  = XSVF_ERROR_DATAOVERFLOW;
 1519              		.loc 1 1190 0
 1520 0054 0630A0E3 		mov	r3, #6
 1521 0058 10300BE5 		str	r3, [fp, #-16]
 1522 005c 1E0000EA 		b	.L102
 1523              	.L101:
1191:../Xilinx_src/micro.c ****     }
1192:../Xilinx_src/micro.c ****     else
1193:../Xilinx_src/micro.c ****     {
1194:../Xilinx_src/micro.c ****         /* Get and store instruction to shift in */
1195:../Xilinx_src/micro.c ****         readVal( &(pXsvfInfo->lvTdi), xsvfGetAsNumBytes( lShiftIrBits ) );
 1524              		.loc 1 1195 0
 1525 0060 20301BE5 		ldr	r3, [fp, #-32]
 1526 0064 1A4083E2 		add	r4, r3, #26
 1527 0068 14001BE5 		ldr	r0, [fp, #-20]
 1528 006c FEFFFFEB 		bl	xsvfGetAsNumBytes
 1529 0070 0030A0E1 		mov	r3, r0
 1530 0074 0400A0E1 		mov	r0, r4
 1531 0078 0310A0E1 		mov	r1, r3
 1532 007c FEFFFFEB 		bl	readVal
1196:../Xilinx_src/micro.c **** 
1197:../Xilinx_src/micro.c ****         /* Shift the data */
1198:../Xilinx_src/micro.c ****         iErrorCode  = xsvfShift( &(pXsvfInfo->ucTapState), XTAPSTATE_SHIFTIR,
 1533              		.loc 1 1198 0
 1534 0080 20301BE5 		ldr	r3, [fp, #-32]
 1535 0084 0C2083E2 		add	r2, r3, #12
 1536 0088 20301BE5 		ldr	r3, [fp, #-32]
 1537 008c 1A3083E2 		add	r3, r3, #26
 1538 0090 20101BE5 		ldr	r1, [fp, #-32]
 1539 0094 0D00D1E5 		ldrb	r0, [r1, #13]	@ zero_extendqisi2
 1540 0098 20101BE5 		ldr	r1, [fp, #-32]
 1541 009c 101091E5 		ldr	r1, [r1, #16]
 1542 00a0 00C0A0E3 		mov	ip, #0
 1543 00a4 00C08DE5 		str	ip, [sp]
 1544 00a8 00C0A0E3 		mov	ip, #0
 1545 00ac 04C08DE5 		str	ip, [sp, #4]
 1546 00b0 00C0A0E3 		mov	ip, #0
 1547 00b4 08C08DE5 		str	ip, [sp, #8]
 1548 00b8 0C008DE5 		str	r0, [sp, #12]
 1549 00bc 10108DE5 		str	r1, [sp, #16]
 1550 00c0 0010A0E3 		mov	r1, #0
 1551 00c4 14108DE5 		str	r1, [sp, #20]
 1552 00c8 0200A0E1 		mov	r0, r2
 1553 00cc 0B10A0E3 		mov	r1, #11
 1554 00d0 14201BE5 		ldr	r2, [fp, #-20]
 1555 00d4 FEFFFFEB 		bl	xsvfShift
 1556 00d8 10000BE5 		str	r0, [fp, #-16]
 1557              	.L102:
1199:../Xilinx_src/micro.c ****                                  lShiftIrBits, &(pXsvfInfo->lvTdi),
1200:../Xilinx_src/micro.c ****                                  /*plvTdoCaptured*/0, /*plvTdoExpected*/0,
1201:../Xilinx_src/micro.c ****                                  /*plvTdoMask*/0, pXsvfInfo->ucEndIR,
1202:../Xilinx_src/micro.c ****                                  pXsvfInfo->lRunTestTime, /*ucMaxRepeat*/0 );
1203:../Xilinx_src/micro.c ****     }
1204:../Xilinx_src/micro.c **** 
1205:../Xilinx_src/micro.c ****     if ( iErrorCode != XSVF_ERROR_NONE )
 1558              		.loc 1 1205 0
 1559 00dc 10301BE5 		ldr	r3, [fp, #-16]
 1560 00e0 000053E3 		cmp	r3, #0
 1561 00e4 0200000A 		beq	.L103
1206:../Xilinx_src/micro.c ****     {
1207:../Xilinx_src/micro.c ****         pXsvfInfo->iErrorCode   = iErrorCode;
 1562              		.loc 1 1207 0
 1563 00e8 20301BE5 		ldr	r3, [fp, #-32]
 1564 00ec 10201BE5 		ldr	r2, [fp, #-16]
 1565 00f0 082083E5 		str	r2, [r3, #8]
 1566              	.L103:
1208:../Xilinx_src/micro.c ****     }
1209:../Xilinx_src/micro.c ****     return( iErrorCode );
 1567              		.loc 1 1209 0
 1568 00f4 10301BE5 		ldr	r3, [fp, #-16]
1210:../Xilinx_src/micro.c **** }
 1569              		.loc 1 1210 0
 1570 00f8 0300A0E1 		mov	r0, r3
 1571 00fc 08D04BE2 		sub	sp, fp, #8
 1572              		@ sp needed
 1573 0100 1088BDE8 		ldmfd	sp!, {r4, fp, pc}
 1574              		.cfi_endproc
 1575              	.LFE13:
 1577              		.section	.text.xsvfDoXSDR,"ax",%progbits
 1578              		.align	2
 1579              		.global	xsvfDoXSDR
 1581              	xsvfDoXSDR:
 1582              	.LFB14:
1211:../Xilinx_src/micro.c **** 
1212:../Xilinx_src/micro.c **** /*****************************************************************************
1213:../Xilinx_src/micro.c **** * Function:     xsvfDoXSDR
1214:../Xilinx_src/micro.c **** * Description:  XSDR <lenVal.TDI[XSDRSIZE]>
1215:../Xilinx_src/micro.c **** *               Shift the given TDI data into the JTAG scan chain.
1216:../Xilinx_src/micro.c **** *               Compare the captured TDO with the expected TDO from the
1217:../Xilinx_src/micro.c **** *               previous XSDRTDO command using the previously specified
1218:../Xilinx_src/micro.c **** *               XTDOMASK.
1219:../Xilinx_src/micro.c **** * Parameters:   pXsvfInfo   - XSVF information pointer.
1220:../Xilinx_src/micro.c **** * Returns:      int         - 0 = success;  non-zero = error.
1221:../Xilinx_src/micro.c **** *****************************************************************************/
1222:../Xilinx_src/micro.c **** int xsvfDoXSDR( SXsvfInfo* pXsvfInfo )
1223:../Xilinx_src/micro.c **** {
 1583              		.loc 1 1223 0
 1584              		.cfi_startproc
 1585              		@ args = 0, pretend = 0, frame = 16
 1586              		@ frame_needed = 1, uses_anonymous_args = 0
 1587 0000 70482DE9 		stmfd	sp!, {r4, r5, r6, fp, lr}
 1588              	.LCFI28:
 1589              		.cfi_def_cfa_offset 20
 1590              		.cfi_offset 4, -20
 1591              		.cfi_offset 5, -16
 1592              		.cfi_offset 6, -12
 1593              		.cfi_offset 11, -8
 1594              		.cfi_offset 14, -4
 1595 0004 10B08DE2 		add	fp, sp, #16
 1596              	.LCFI29:
 1597              		.cfi_def_cfa 11, 4
 1598 0008 2CD04DE2 		sub	sp, sp, #44
 1599 000c 20000BE5 		str	r0, [fp, #-32]
1224:../Xilinx_src/micro.c ****     int iErrorCode;
1225:../Xilinx_src/micro.c ****     readVal( &(pXsvfInfo->lvTdi), pXsvfInfo->sShiftLengthBytes );
 1600              		.loc 1 1225 0
 1601 0010 20301BE5 		ldr	r3, [fp, #-32]
 1602 0014 1A2083E2 		add	r2, r3, #26
 1603 0018 20301BE5 		ldr	r3, [fp, #-32]
 1604 001c B831D3E1 		ldrh	r3, [r3, #24]
 1605 0020 0338A0E1 		mov	r3, r3, asl #16
 1606 0024 4338A0E1 		mov	r3, r3, asr #16
 1607 0028 0200A0E1 		mov	r0, r2
 1608 002c 0310A0E1 		mov	r1, r3
 1609 0030 FEFFFFEB 		bl	readVal
1226:../Xilinx_src/micro.c ****     /* use TDOExpected from last XSDRTDO instruction */
1227:../Xilinx_src/micro.c ****     iErrorCode  = xsvfShift( &(pXsvfInfo->ucTapState), XTAPSTATE_SHIFTDR,
 1610              		.loc 1 1227 0
 1611 0034 20301BE5 		ldr	r3, [fp, #-32]
 1612 0038 0C0083E2 		add	r0, r3, #12
 1613 003c 20301BE5 		ldr	r3, [fp, #-32]
 1614 0040 14E093E5 		ldr	lr, [r3, #20]
 1615 0044 20301BE5 		ldr	r3, [fp, #-32]
 1616 0048 1AC083E2 		add	ip, r3, #26
 1617 004c 20301BE5 		ldr	r3, [fp, #-32]
 1618 0050 011A83E2 		add	r1, r3, #4096
 1619 0054 221081E2 		add	r1, r1, #34
 1620 0058 20301BE5 		ldr	r3, [fp, #-32]
 1621 005c 812E83E2 		add	r2, r3, #2064
 1622 0060 0E2082E2 		add	r2, r2, #14
 1623 0064 20301BE5 		ldr	r3, [fp, #-32]
 1624 0068 063B83E2 		add	r3, r3, #6144
 1625 006c 263083E2 		add	r3, r3, #38
 1626 0070 20401BE5 		ldr	r4, [fp, #-32]
 1627 0074 0E60D4E5 		ldrb	r6, [r4, #14]	@ zero_extendqisi2
 1628 0078 20401BE5 		ldr	r4, [fp, #-32]
 1629 007c 105094E5 		ldr	r5, [r4, #16]
 1630 0080 20401BE5 		ldr	r4, [fp, #-32]
 1631 0084 0F40D4E5 		ldrb	r4, [r4, #15]	@ zero_extendqisi2
 1632 0088 00108DE5 		str	r1, [sp]
 1633 008c 04208DE5 		str	r2, [sp, #4]
 1634 0090 08308DE5 		str	r3, [sp, #8]
 1635 0094 0C608DE5 		str	r6, [sp, #12]
 1636 0098 10508DE5 		str	r5, [sp, #16]
 1637 009c 14408DE5 		str	r4, [sp, #20]
 1638 00a0 0410A0E3 		mov	r1, #4
 1639 00a4 0E20A0E1 		mov	r2, lr
 1640 00a8 0C30A0E1 		mov	r3, ip
 1641 00ac FEFFFFEB 		bl	xsvfShift
 1642 00b0 18000BE5 		str	r0, [fp, #-24]
1228:../Xilinx_src/micro.c ****                              pXsvfInfo->lShiftLengthBits, &(pXsvfInfo->lvTdi),
1229:../Xilinx_src/micro.c ****                              &(pXsvfInfo->lvTdoCaptured),
1230:../Xilinx_src/micro.c ****                              &(pXsvfInfo->lvTdoExpected),
1231:../Xilinx_src/micro.c ****                              &(pXsvfInfo->lvTdoMask), pXsvfInfo->ucEndDR,
1232:../Xilinx_src/micro.c ****                              pXsvfInfo->lRunTestTime, pXsvfInfo->ucMaxRepeat );
1233:../Xilinx_src/micro.c ****     if ( iErrorCode != XSVF_ERROR_NONE )
 1643              		.loc 1 1233 0
 1644 00b4 18301BE5 		ldr	r3, [fp, #-24]
 1645 00b8 000053E3 		cmp	r3, #0
 1646 00bc 0200000A 		beq	.L106
1234:../Xilinx_src/micro.c ****     {
1235:../Xilinx_src/micro.c ****         pXsvfInfo->iErrorCode   = iErrorCode;
 1647              		.loc 1 1235 0
 1648 00c0 20301BE5 		ldr	r3, [fp, #-32]
 1649 00c4 18201BE5 		ldr	r2, [fp, #-24]
 1650 00c8 082083E5 		str	r2, [r3, #8]
 1651              	.L106:
1236:../Xilinx_src/micro.c ****     }
1237:../Xilinx_src/micro.c ****     return( iErrorCode );
 1652              		.loc 1 1237 0
 1653 00cc 18301BE5 		ldr	r3, [fp, #-24]
1238:../Xilinx_src/micro.c **** }
 1654              		.loc 1 1238 0
 1655 00d0 0300A0E1 		mov	r0, r3
 1656 00d4 10D04BE2 		sub	sp, fp, #16
 1657              		@ sp needed
 1658 00d8 7088BDE8 		ldmfd	sp!, {r4, r5, r6, fp, pc}
 1659              		.cfi_endproc
 1660              	.LFE14:
 1662              		.section	.text.xsvfDoXRUNTEST,"ax",%progbits
 1663              		.align	2
 1664              		.global	xsvfDoXRUNTEST
 1666              	xsvfDoXRUNTEST:
 1667              	.LFB15:
1239:../Xilinx_src/micro.c **** 
1240:../Xilinx_src/micro.c **** /*****************************************************************************
1241:../Xilinx_src/micro.c **** * Function:     xsvfDoXRUNTEST
1242:../Xilinx_src/micro.c **** * Description:  XRUNTEST <uint32>
1243:../Xilinx_src/micro.c **** *               Prespecify the XRUNTEST wait time for shift operations.
1244:../Xilinx_src/micro.c **** * Parameters:   pXsvfInfo   - XSVF information pointer.
1245:../Xilinx_src/micro.c **** * Returns:      int         - 0 = success;  non-zero = error.
1246:../Xilinx_src/micro.c **** *****************************************************************************/
1247:../Xilinx_src/micro.c **** int xsvfDoXRUNTEST( SXsvfInfo* pXsvfInfo )
1248:../Xilinx_src/micro.c **** {
 1668              		.loc 1 1248 0
 1669              		.cfi_startproc
 1670              		@ args = 0, pretend = 0, frame = 8
 1671              		@ frame_needed = 1, uses_anonymous_args = 0
 1672 0000 00482DE9 		stmfd	sp!, {fp, lr}
 1673              	.LCFI30:
 1674              		.cfi_def_cfa_offset 8
 1675              		.cfi_offset 11, -8
 1676              		.cfi_offset 14, -4
 1677 0004 04B08DE2 		add	fp, sp, #4
 1678              	.LCFI31:
 1679              		.cfi_def_cfa 11, 4
 1680 0008 08D04DE2 		sub	sp, sp, #8
 1681 000c 08000BE5 		str	r0, [fp, #-8]
1249:../Xilinx_src/micro.c ****     readVal( &(pXsvfInfo->lvTdi), 4 );
 1682              		.loc 1 1249 0
 1683 0010 08301BE5 		ldr	r3, [fp, #-8]
 1684 0014 1A3083E2 		add	r3, r3, #26
 1685 0018 0300A0E1 		mov	r0, r3
 1686 001c 0410A0E3 		mov	r1, #4
 1687 0020 FEFFFFEB 		bl	readVal
1250:../Xilinx_src/micro.c ****     pXsvfInfo->lRunTestTime = value( &(pXsvfInfo->lvTdi) );
 1688              		.loc 1 1250 0
 1689 0024 08301BE5 		ldr	r3, [fp, #-8]
 1690 0028 1A3083E2 		add	r3, r3, #26
 1691 002c 0300A0E1 		mov	r0, r3
 1692 0030 FEFFFFEB 		bl	value
 1693 0034 0020A0E1 		mov	r2, r0
 1694 0038 08301BE5 		ldr	r3, [fp, #-8]
 1695 003c 102083E5 		str	r2, [r3, #16]
1251:../Xilinx_src/micro.c ****     XSVFDBG_PRINTF1( 3, "   XRUNTEST = %d\n", pXsvfInfo->lRunTestTime );
1252:../Xilinx_src/micro.c ****     return( XSVF_ERROR_NONE );
 1696              		.loc 1 1252 0
 1697 0040 0030A0E3 		mov	r3, #0
1253:../Xilinx_src/micro.c **** }
 1698              		.loc 1 1253 0
 1699 0044 0300A0E1 		mov	r0, r3
 1700 0048 04D04BE2 		sub	sp, fp, #4
 1701              		@ sp needed
 1702 004c 0088BDE8 		ldmfd	sp!, {fp, pc}
 1703              		.cfi_endproc
 1704              	.LFE15:
 1706              		.section	.text.xsvfDoXREPEAT,"ax",%progbits
 1707              		.align	2
 1708              		.global	xsvfDoXREPEAT
 1710              	xsvfDoXREPEAT:
 1711              	.LFB16:
1254:../Xilinx_src/micro.c **** 
1255:../Xilinx_src/micro.c **** /*****************************************************************************
1256:../Xilinx_src/micro.c **** * Function:     xsvfDoXREPEAT
1257:../Xilinx_src/micro.c **** * Description:  XREPEAT <byte>
1258:../Xilinx_src/micro.c **** *               Prespecify the maximum number of XC9500/XL retries.
1259:../Xilinx_src/micro.c **** * Parameters:   pXsvfInfo   - XSVF information pointer.
1260:../Xilinx_src/micro.c **** * Returns:      int         - 0 = success;  non-zero = error.
1261:../Xilinx_src/micro.c **** *****************************************************************************/
1262:../Xilinx_src/micro.c **** int xsvfDoXREPEAT( SXsvfInfo* pXsvfInfo )
1263:../Xilinx_src/micro.c **** {
 1712              		.loc 1 1263 0
 1713              		.cfi_startproc
 1714              		@ args = 0, pretend = 0, frame = 8
 1715              		@ frame_needed = 1, uses_anonymous_args = 0
 1716 0000 00482DE9 		stmfd	sp!, {fp, lr}
 1717              	.LCFI32:
 1718              		.cfi_def_cfa_offset 8
 1719              		.cfi_offset 11, -8
 1720              		.cfi_offset 14, -4
 1721 0004 04B08DE2 		add	fp, sp, #4
 1722              	.LCFI33:
 1723              		.cfi_def_cfa 11, 4
 1724 0008 08D04DE2 		sub	sp, sp, #8
 1725 000c 08000BE5 		str	r0, [fp, #-8]
1264:../Xilinx_src/micro.c ****     readByte( &(pXsvfInfo->ucMaxRepeat) );
 1726              		.loc 1 1264 0
 1727 0010 08301BE5 		ldr	r3, [fp, #-8]
 1728 0014 0F3083E2 		add	r3, r3, #15
 1729 0018 0300A0E1 		mov	r0, r3
 1730 001c FEFFFFEB 		bl	readByte
1265:../Xilinx_src/micro.c ****     XSVFDBG_PRINTF1( 3, "   XREPEAT = %d\n",
1266:../Xilinx_src/micro.c ****                      ((unsigned int)(pXsvfInfo->ucMaxRepeat)) );
1267:../Xilinx_src/micro.c ****     return( XSVF_ERROR_NONE );
 1731              		.loc 1 1267 0
 1732 0020 0030A0E3 		mov	r3, #0
1268:../Xilinx_src/micro.c **** }
 1733              		.loc 1 1268 0
 1734 0024 0300A0E1 		mov	r0, r3
 1735 0028 04D04BE2 		sub	sp, fp, #4
 1736              		@ sp needed
 1737 002c 0088BDE8 		ldmfd	sp!, {fp, pc}
 1738              		.cfi_endproc
 1739              	.LFE16:
 1741              		.section	.text.xsvfDoXSDRSIZE,"ax",%progbits
 1742              		.align	2
 1743              		.global	xsvfDoXSDRSIZE
 1745              	xsvfDoXSDRSIZE:
 1746              	.LFB17:
1269:../Xilinx_src/micro.c **** 
1270:../Xilinx_src/micro.c **** /*****************************************************************************
1271:../Xilinx_src/micro.c **** * Function:     xsvfDoXSDRSIZE
1272:../Xilinx_src/micro.c **** * Description:  XSDRSIZE <uint32>
1273:../Xilinx_src/micro.c **** *               Prespecify the XRUNTEST wait time for shift operations.
1274:../Xilinx_src/micro.c **** * Parameters:   pXsvfInfo   - XSVF information pointer.
1275:../Xilinx_src/micro.c **** * Returns:      int         - 0 = success;  non-zero = error.
1276:../Xilinx_src/micro.c **** *****************************************************************************/
1277:../Xilinx_src/micro.c **** int xsvfDoXSDRSIZE( SXsvfInfo* pXsvfInfo )
1278:../Xilinx_src/micro.c **** {
 1747              		.loc 1 1278 0
 1748              		.cfi_startproc
 1749              		@ args = 0, pretend = 0, frame = 16
 1750              		@ frame_needed = 1, uses_anonymous_args = 0
 1751 0000 00482DE9 		stmfd	sp!, {fp, lr}
 1752              	.LCFI34:
 1753              		.cfi_def_cfa_offset 8
 1754              		.cfi_offset 11, -8
 1755              		.cfi_offset 14, -4
 1756 0004 04B08DE2 		add	fp, sp, #4
 1757              	.LCFI35:
 1758              		.cfi_def_cfa 11, 4
 1759 0008 10D04DE2 		sub	sp, sp, #16
 1760 000c 10000BE5 		str	r0, [fp, #-16]
1279:../Xilinx_src/micro.c ****     int iErrorCode;
1280:../Xilinx_src/micro.c ****     iErrorCode  = XSVF_ERROR_NONE;
 1761              		.loc 1 1280 0
 1762 0010 0030A0E3 		mov	r3, #0
 1763 0014 08300BE5 		str	r3, [fp, #-8]
1281:../Xilinx_src/micro.c ****     readVal( &(pXsvfInfo->lvTdi), 4 );
 1764              		.loc 1 1281 0
 1765 0018 10301BE5 		ldr	r3, [fp, #-16]
 1766 001c 1A3083E2 		add	r3, r3, #26
 1767 0020 0300A0E1 		mov	r0, r3
 1768 0024 0410A0E3 		mov	r1, #4
 1769 0028 FEFFFFEB 		bl	readVal
1282:../Xilinx_src/micro.c ****     pXsvfInfo->lShiftLengthBits = value( &(pXsvfInfo->lvTdi) );
 1770              		.loc 1 1282 0
 1771 002c 10301BE5 		ldr	r3, [fp, #-16]
 1772 0030 1A3083E2 		add	r3, r3, #26
 1773 0034 0300A0E1 		mov	r0, r3
 1774 0038 FEFFFFEB 		bl	value
 1775 003c 0020A0E1 		mov	r2, r0
 1776 0040 10301BE5 		ldr	r3, [fp, #-16]
 1777 0044 142083E5 		str	r2, [r3, #20]
1283:../Xilinx_src/micro.c ****     pXsvfInfo->sShiftLengthBytes= xsvfGetAsNumBytes( pXsvfInfo->lShiftLengthBits );
 1778              		.loc 1 1283 0
 1779 0048 10301BE5 		ldr	r3, [fp, #-16]
 1780 004c 143093E5 		ldr	r3, [r3, #20]
 1781 0050 0300A0E1 		mov	r0, r3
 1782 0054 FEFFFFEB 		bl	xsvfGetAsNumBytes
 1783 0058 0030A0E1 		mov	r3, r0
 1784 005c 0320A0E1 		mov	r2, r3
 1785 0060 10301BE5 		ldr	r3, [fp, #-16]
 1786 0064 B821C3E1 		strh	r2, [r3, #24]	@ movhi
1284:../Xilinx_src/micro.c ****     XSVFDBG_PRINTF1( 3, "   XSDRSIZE = %d\n", pXsvfInfo->lShiftLengthBits );
1285:../Xilinx_src/micro.c ****     if ( pXsvfInfo->sShiftLengthBytes > MAX_LEN )
 1787              		.loc 1 1285 0
 1788 0068 10301BE5 		ldr	r3, [fp, #-16]
 1789 006c B831D3E1 		ldrh	r3, [r3, #24]
 1790 0070 0338A0E1 		mov	r3, r3, asl #16
 1791 0074 4338A0E1 		mov	r3, r3, asr #16
 1792 0078 020B53E3 		cmp	r3, #2048
 1793 007c 040000DA 		ble	.L113
1286:../Xilinx_src/micro.c ****     {
1287:../Xilinx_src/micro.c ****         iErrorCode  = XSVF_ERROR_DATAOVERFLOW;
 1794              		.loc 1 1287 0
 1795 0080 0630A0E3 		mov	r3, #6
 1796 0084 08300BE5 		str	r3, [fp, #-8]
1288:../Xilinx_src/micro.c ****         pXsvfInfo->iErrorCode   = iErrorCode;
 1797              		.loc 1 1288 0
 1798 0088 10301BE5 		ldr	r3, [fp, #-16]
 1799 008c 08201BE5 		ldr	r2, [fp, #-8]
 1800 0090 082083E5 		str	r2, [r3, #8]
 1801              	.L113:
1289:../Xilinx_src/micro.c ****     }
1290:../Xilinx_src/micro.c ****     return( iErrorCode );
 1802              		.loc 1 1290 0
 1803 0094 08301BE5 		ldr	r3, [fp, #-8]
1291:../Xilinx_src/micro.c **** }
 1804              		.loc 1 1291 0
 1805 0098 0300A0E1 		mov	r0, r3
 1806 009c 04D04BE2 		sub	sp, fp, #4
 1807              		@ sp needed
 1808 00a0 0088BDE8 		ldmfd	sp!, {fp, pc}
 1809              		.cfi_endproc
 1810              	.LFE17:
 1812              		.section	.text.xsvfDoXSDRTDO,"ax",%progbits
 1813              		.align	2
 1814              		.global	xsvfDoXSDRTDO
 1816              	xsvfDoXSDRTDO:
 1817              	.LFB18:
1292:../Xilinx_src/micro.c **** 
1293:../Xilinx_src/micro.c **** /*****************************************************************************
1294:../Xilinx_src/micro.c **** * Function:     xsvfDoXSDRTDO
1295:../Xilinx_src/micro.c **** * Description:  XSDRTDO <lenVal.TDI[XSDRSIZE]> <lenVal.TDO[XSDRSIZE]>
1296:../Xilinx_src/micro.c **** *               Get the TDI and expected TDO values.  Then, shift.
1297:../Xilinx_src/micro.c **** *               Compare the expected TDO with the captured TDO using the
1298:../Xilinx_src/micro.c **** *               prespecified XTDOMASK.
1299:../Xilinx_src/micro.c **** * Parameters:   pXsvfInfo   - XSVF information pointer.
1300:../Xilinx_src/micro.c **** * Returns:      int         - 0 = success;  non-zero = error.
1301:../Xilinx_src/micro.c **** *****************************************************************************/
1302:../Xilinx_src/micro.c **** int xsvfDoXSDRTDO( SXsvfInfo* pXsvfInfo )
1303:../Xilinx_src/micro.c **** {
 1818              		.loc 1 1303 0
 1819              		.cfi_startproc
 1820              		@ args = 0, pretend = 0, frame = 16
 1821              		@ frame_needed = 1, uses_anonymous_args = 0
 1822 0000 F0482DE9 		stmfd	sp!, {r4, r5, r6, r7, fp, lr}
 1823              	.LCFI36:
 1824              		.cfi_def_cfa_offset 24
 1825              		.cfi_offset 4, -24
 1826              		.cfi_offset 5, -20
 1827              		.cfi_offset 6, -16
 1828              		.cfi_offset 7, -12
 1829              		.cfi_offset 11, -8
 1830              		.cfi_offset 14, -4
 1831 0004 14B08DE2 		add	fp, sp, #20
 1832              	.LCFI37:
 1833              		.cfi_def_cfa 11, 4
 1834 0008 28D04DE2 		sub	sp, sp, #40
 1835 000c 20000BE5 		str	r0, [fp, #-32]
1304:../Xilinx_src/micro.c ****     int iErrorCode;
1305:../Xilinx_src/micro.c ****     iErrorCode  = xsvfBasicXSDRTDO( &(pXsvfInfo->ucTapState),
 1836              		.loc 1 1305 0
 1837 0010 20301BE5 		ldr	r3, [fp, #-32]
 1838 0014 0C0083E2 		add	r0, r3, #12
 1839 0018 20301BE5 		ldr	r3, [fp, #-32]
 1840 001c 144093E5 		ldr	r4, [r3, #20]
 1841 0020 20301BE5 		ldr	r3, [fp, #-32]
 1842 0024 B8E1D3E1 		ldrh	lr, [r3, #24]
 1843 0028 20301BE5 		ldr	r3, [fp, #-32]
 1844 002c 1AC083E2 		add	ip, r3, #26
 1845 0030 20301BE5 		ldr	r3, [fp, #-32]
 1846 0034 011A83E2 		add	r1, r3, #4096
 1847 0038 221081E2 		add	r1, r1, #34
 1848 003c 20301BE5 		ldr	r3, [fp, #-32]
 1849 0040 812E83E2 		add	r2, r3, #2064
 1850 0044 0E2082E2 		add	r2, r2, #14
 1851 0048 20301BE5 		ldr	r3, [fp, #-32]
 1852 004c 063B83E2 		add	r3, r3, #6144
 1853 0050 263083E2 		add	r3, r3, #38
 1854 0054 20501BE5 		ldr	r5, [fp, #-32]
 1855 0058 0E70D5E5 		ldrb	r7, [r5, #14]	@ zero_extendqisi2
 1856 005c 20501BE5 		ldr	r5, [fp, #-32]
 1857 0060 106095E5 		ldr	r6, [r5, #16]
 1858 0064 20501BE5 		ldr	r5, [fp, #-32]
 1859 0068 0F50D5E5 		ldrb	r5, [r5, #15]	@ zero_extendqisi2
 1860 006c 0EE8A0E1 		mov	lr, lr, asl #16
 1861 0070 4EE8A0E1 		mov	lr, lr, asr #16
 1862 0074 00108DE5 		str	r1, [sp]
 1863 0078 04208DE5 		str	r2, [sp, #4]
 1864 007c 08308DE5 		str	r3, [sp, #8]
 1865 0080 0C708DE5 		str	r7, [sp, #12]
 1866 0084 10608DE5 		str	r6, [sp, #16]
 1867 0088 14508DE5 		str	r5, [sp, #20]
 1868 008c 0410A0E1 		mov	r1, r4
 1869 0090 0E20A0E1 		mov	r2, lr
 1870 0094 0C30A0E1 		mov	r3, ip
 1871 0098 FEFFFFEB 		bl	xsvfBasicXSDRTDO
 1872 009c 18000BE5 		str	r0, [fp, #-24]
1306:../Xilinx_src/micro.c ****                                     pXsvfInfo->lShiftLengthBits,
1307:../Xilinx_src/micro.c ****                                     pXsvfInfo->sShiftLengthBytes,
1308:../Xilinx_src/micro.c ****                                     &(pXsvfInfo->lvTdi),
1309:../Xilinx_src/micro.c ****                                     &(pXsvfInfo->lvTdoCaptured),
1310:../Xilinx_src/micro.c ****                                     &(pXsvfInfo->lvTdoExpected),
1311:../Xilinx_src/micro.c ****                                     &(pXsvfInfo->lvTdoMask),
1312:../Xilinx_src/micro.c ****                                     pXsvfInfo->ucEndDR,
1313:../Xilinx_src/micro.c ****                                     pXsvfInfo->lRunTestTime,
1314:../Xilinx_src/micro.c ****                                     pXsvfInfo->ucMaxRepeat );
1315:../Xilinx_src/micro.c ****     if ( iErrorCode != XSVF_ERROR_NONE )
 1873              		.loc 1 1315 0
 1874 00a0 18301BE5 		ldr	r3, [fp, #-24]
 1875 00a4 000053E3 		cmp	r3, #0
 1876 00a8 0200000A 		beq	.L116
1316:../Xilinx_src/micro.c ****     {
1317:../Xilinx_src/micro.c ****         pXsvfInfo->iErrorCode   = iErrorCode;
 1877              		.loc 1 1317 0
 1878 00ac 20301BE5 		ldr	r3, [fp, #-32]
 1879 00b0 18201BE5 		ldr	r2, [fp, #-24]
 1880 00b4 082083E5 		str	r2, [r3, #8]
 1881              	.L116:
1318:../Xilinx_src/micro.c ****     }
1319:../Xilinx_src/micro.c ****     return( iErrorCode );
 1882              		.loc 1 1319 0
 1883 00b8 18301BE5 		ldr	r3, [fp, #-24]
1320:../Xilinx_src/micro.c **** }
 1884              		.loc 1 1320 0
 1885 00bc 0300A0E1 		mov	r0, r3
 1886 00c0 14D04BE2 		sub	sp, fp, #20
 1887              		@ sp needed
 1888 00c4 F088BDE8 		ldmfd	sp!, {r4, r5, r6, r7, fp, pc}
 1889              		.cfi_endproc
 1890              	.LFE18:
 1892              		.section	.text.xsvfDoXSETSDRMASKS,"ax",%progbits
 1893              		.align	2
 1894              		.global	xsvfDoXSETSDRMASKS
 1896              	xsvfDoXSETSDRMASKS:
 1897              	.LFB19:
1321:../Xilinx_src/micro.c **** 
1322:../Xilinx_src/micro.c **** /*****************************************************************************
1323:../Xilinx_src/micro.c **** * Function:     xsvfDoXSETSDRMASKS
1324:../Xilinx_src/micro.c **** * Description:  XSETSDRMASKS <lenVal.AddressMask[XSDRSIZE]>
1325:../Xilinx_src/micro.c **** *                            <lenVal.DataMask[XSDRSIZE]>
1326:../Xilinx_src/micro.c **** *               Get the prespecified address and data mask for the XSDRINC
1327:../Xilinx_src/micro.c **** *               command.
1328:../Xilinx_src/micro.c **** *               Used for xc9500/xl compressed XSVF data.
1329:../Xilinx_src/micro.c **** * Parameters:   pXsvfInfo   - XSVF information pointer.
1330:../Xilinx_src/micro.c **** * Returns:      int         - 0 = success;  non-zero = error.
1331:../Xilinx_src/micro.c **** *****************************************************************************/
1332:../Xilinx_src/micro.c **** #ifdef  XSVF_SUPPORT_COMPRESSION
1333:../Xilinx_src/micro.c **** int xsvfDoXSETSDRMASKS( SXsvfInfo* pXsvfInfo )
1334:../Xilinx_src/micro.c **** {
 1898              		.loc 1 1334 0
 1899              		.cfi_startproc
 1900              		@ args = 0, pretend = 0, frame = 8
 1901              		@ frame_needed = 1, uses_anonymous_args = 0
 1902 0000 00482DE9 		stmfd	sp!, {fp, lr}
 1903              	.LCFI38:
 1904              		.cfi_def_cfa_offset 8
 1905              		.cfi_offset 11, -8
 1906              		.cfi_offset 14, -4
 1907 0004 04B08DE2 		add	fp, sp, #4
 1908              	.LCFI39:
 1909              		.cfi_def_cfa 11, 4
 1910 0008 08D04DE2 		sub	sp, sp, #8
 1911 000c 08000BE5 		str	r0, [fp, #-8]
1335:../Xilinx_src/micro.c ****     /* read the addressMask */
1336:../Xilinx_src/micro.c ****     readVal( &(pXsvfInfo->lvAddressMask), pXsvfInfo->sShiftLengthBytes );
 1912              		.loc 1 1336 0
 1913 0010 08301BE5 		ldr	r3, [fp, #-8]
 1914 0014 023A83E2 		add	r3, r3, #8192
 1915 0018 2A3083E2 		add	r3, r3, #42
 1916 001c 08201BE5 		ldr	r2, [fp, #-8]
 1917 0020 B821D2E1 		ldrh	r2, [r2, #24]
 1918 0024 0228A0E1 		mov	r2, r2, asl #16
 1919 0028 4228A0E1 		mov	r2, r2, asr #16
 1920 002c 0300A0E1 		mov	r0, r3
 1921 0030 0210A0E1 		mov	r1, r2
 1922 0034 FEFFFFEB 		bl	readVal
1337:../Xilinx_src/micro.c ****     /* read the dataMask    */
1338:../Xilinx_src/micro.c ****     readVal( &(pXsvfInfo->lvDataMask), pXsvfInfo->sShiftLengthBytes );
 1923              		.loc 1 1338 0
 1924 0038 08301BE5 		ldr	r3, [fp, #-8]
 1925 003c 0A3B83E2 		add	r3, r3, #10240
 1926 0040 2E3083E2 		add	r3, r3, #46
 1927 0044 08201BE5 		ldr	r2, [fp, #-8]
 1928 0048 B821D2E1 		ldrh	r2, [r2, #24]
 1929 004c 0228A0E1 		mov	r2, r2, asl #16
 1930 0050 4228A0E1 		mov	r2, r2, asr #16
 1931 0054 0300A0E1 		mov	r0, r3
 1932 0058 0210A0E1 		mov	r1, r2
 1933 005c FEFFFFEB 		bl	readVal
1339:../Xilinx_src/micro.c **** 
1340:../Xilinx_src/micro.c ****     XSVFDBG_PRINTF( 4, "    Address Mask = " );
1341:../Xilinx_src/micro.c ****     XSVFDBG_PRINTLENVAL( 4, &(pXsvfInfo->lvAddressMask) );
1342:../Xilinx_src/micro.c ****     XSVFDBG_PRINTF( 4, "\n" );
1343:../Xilinx_src/micro.c ****     XSVFDBG_PRINTF( 4, "    Data Mask    = " );
1344:../Xilinx_src/micro.c ****     XSVFDBG_PRINTLENVAL( 4, &(pXsvfInfo->lvDataMask) );
1345:../Xilinx_src/micro.c ****     XSVFDBG_PRINTF( 4, "\n" );
1346:../Xilinx_src/micro.c **** 
1347:../Xilinx_src/micro.c ****     return( XSVF_ERROR_NONE );
 1934              		.loc 1 1347 0
 1935 0060 0030A0E3 		mov	r3, #0
1348:../Xilinx_src/micro.c **** }
 1936              		.loc 1 1348 0
 1937 0064 0300A0E1 		mov	r0, r3
 1938 0068 04D04BE2 		sub	sp, fp, #4
 1939              		@ sp needed
 1940 006c 0088BDE8 		ldmfd	sp!, {fp, pc}
 1941              		.cfi_endproc
 1942              	.LFE19:
 1944              		.section	.text.xsvfDoXSDRINC,"ax",%progbits
 1945              		.align	2
 1946              		.global	xsvfDoXSDRINC
 1948              	xsvfDoXSDRINC:
 1949              	.LFB20:
1349:../Xilinx_src/micro.c **** #endif  /* XSVF_SUPPORT_COMPRESSION */
1350:../Xilinx_src/micro.c **** 
1351:../Xilinx_src/micro.c **** /*****************************************************************************
1352:../Xilinx_src/micro.c **** * Function:     xsvfDoXSDRINC
1353:../Xilinx_src/micro.c **** * Description:  XSDRINC <lenVal.firstTDI[XSDRSIZE]> <byte(numTimes)>
1354:../Xilinx_src/micro.c **** *                       <lenVal.data[XSETSDRMASKS.dataMask.len]> ...
1355:../Xilinx_src/micro.c **** *               Get the XSDRINC parameters and execute the XSDRINC command.
1356:../Xilinx_src/micro.c **** *               XSDRINC starts by loading the first TDI shift value.
1357:../Xilinx_src/micro.c **** *               Then, for numTimes, XSDRINC gets the next piece of data,
1358:../Xilinx_src/micro.c **** *               replaces the bits from the starting TDI as defined by the
1359:../Xilinx_src/micro.c **** *               XSETSDRMASKS.dataMask, adds the address mask from
1360:../Xilinx_src/micro.c **** *               XSETSDRMASKS.addressMask, shifts the new TDI value,
1361:../Xilinx_src/micro.c **** *               and compares the TDO to the expected TDO from the previous
1362:../Xilinx_src/micro.c **** *               XSDRTDO command using the XTDOMASK.
1363:../Xilinx_src/micro.c **** *               Used for xc9500/xl compressed XSVF data.
1364:../Xilinx_src/micro.c **** * Parameters:   pXsvfInfo   - XSVF information pointer.
1365:../Xilinx_src/micro.c **** * Returns:      int         - 0 = success;  non-zero = error.
1366:../Xilinx_src/micro.c **** *****************************************************************************/
1367:../Xilinx_src/micro.c **** #ifdef  XSVF_SUPPORT_COMPRESSION
1368:../Xilinx_src/micro.c **** int xsvfDoXSDRINC( SXsvfInfo* pXsvfInfo )
1369:../Xilinx_src/micro.c **** {
 1950              		.loc 1 1369 0
 1951              		.cfi_startproc
 1952              		@ args = 0, pretend = 0, frame = 24
 1953              		@ frame_needed = 1, uses_anonymous_args = 0
 1954 0000 70482DE9 		stmfd	sp!, {r4, r5, r6, fp, lr}
 1955              	.LCFI40:
 1956              		.cfi_def_cfa_offset 20
 1957              		.cfi_offset 4, -20
 1958              		.cfi_offset 5, -16
 1959              		.cfi_offset 6, -12
 1960              		.cfi_offset 11, -8
 1961              		.cfi_offset 14, -4
 1962 0004 10B08DE2 		add	fp, sp, #16
 1963              	.LCFI41:
 1964              		.cfi_def_cfa 11, 4
 1965 0008 34D04DE2 		sub	sp, sp, #52
 1966 000c 28000BE5 		str	r0, [fp, #-40]
1370:../Xilinx_src/micro.c ****     int             iErrorCode;
1371:../Xilinx_src/micro.c ****     int             iDataMaskLen;
1372:../Xilinx_src/micro.c ****     unsigned char   ucDataMask;
1373:../Xilinx_src/micro.c ****     unsigned char   ucNumTimes;
1374:../Xilinx_src/micro.c ****     unsigned char   i;
1375:../Xilinx_src/micro.c **** 
1376:../Xilinx_src/micro.c ****     readVal( &(pXsvfInfo->lvTdi), pXsvfInfo->sShiftLengthBytes );
 1967              		.loc 1 1376 0
 1968 0010 28301BE5 		ldr	r3, [fp, #-40]
 1969 0014 1A2083E2 		add	r2, r3, #26
 1970 0018 28301BE5 		ldr	r3, [fp, #-40]
 1971 001c B831D3E1 		ldrh	r3, [r3, #24]
 1972 0020 0338A0E1 		mov	r3, r3, asl #16
 1973 0024 4338A0E1 		mov	r3, r3, asr #16
 1974 0028 0200A0E1 		mov	r0, r2
 1975 002c 0310A0E1 		mov	r1, r3
 1976 0030 FEFFFFEB 		bl	readVal
1377:../Xilinx_src/micro.c ****     iErrorCode  = xsvfShift( &(pXsvfInfo->ucTapState), XTAPSTATE_SHIFTDR,
 1977              		.loc 1 1377 0
 1978 0034 28301BE5 		ldr	r3, [fp, #-40]
 1979 0038 0C0083E2 		add	r0, r3, #12
 1980 003c 28301BE5 		ldr	r3, [fp, #-40]
 1981 0040 14E093E5 		ldr	lr, [r3, #20]
 1982 0044 28301BE5 		ldr	r3, [fp, #-40]
 1983 0048 1AC083E2 		add	ip, r3, #26
 1984 004c 28301BE5 		ldr	r3, [fp, #-40]
 1985 0050 011A83E2 		add	r1, r3, #4096
 1986 0054 221081E2 		add	r1, r1, #34
 1987 0058 28301BE5 		ldr	r3, [fp, #-40]
 1988 005c 812E83E2 		add	r2, r3, #2064
 1989 0060 0E2082E2 		add	r2, r2, #14
 1990 0064 28301BE5 		ldr	r3, [fp, #-40]
 1991 0068 063B83E2 		add	r3, r3, #6144
 1992 006c 263083E2 		add	r3, r3, #38
 1993 0070 28401BE5 		ldr	r4, [fp, #-40]
 1994 0074 0E60D4E5 		ldrb	r6, [r4, #14]	@ zero_extendqisi2
 1995 0078 28401BE5 		ldr	r4, [fp, #-40]
 1996 007c 105094E5 		ldr	r5, [r4, #16]
 1997 0080 28401BE5 		ldr	r4, [fp, #-40]
 1998 0084 0F40D4E5 		ldrb	r4, [r4, #15]	@ zero_extendqisi2
 1999 0088 00108DE5 		str	r1, [sp]
 2000 008c 04208DE5 		str	r2, [sp, #4]
 2001 0090 08308DE5 		str	r3, [sp, #8]
 2002 0094 0C608DE5 		str	r6, [sp, #12]
 2003 0098 10508DE5 		str	r5, [sp, #16]
 2004 009c 14408DE5 		str	r4, [sp, #20]
 2005 00a0 0410A0E3 		mov	r1, #4
 2006 00a4 0E20A0E1 		mov	r2, lr
 2007 00a8 0C30A0E1 		mov	r3, ip
 2008 00ac FEFFFFEB 		bl	xsvfShift
 2009 00b0 18000BE5 		str	r0, [fp, #-24]
1378:../Xilinx_src/micro.c ****                              pXsvfInfo->lShiftLengthBits,
1379:../Xilinx_src/micro.c ****                              &(pXsvfInfo->lvTdi), &(pXsvfInfo->lvTdoCaptured),
1380:../Xilinx_src/micro.c ****                              &(pXsvfInfo->lvTdoExpected),
1381:../Xilinx_src/micro.c ****                              &(pXsvfInfo->lvTdoMask), pXsvfInfo->ucEndDR,
1382:../Xilinx_src/micro.c ****                              pXsvfInfo->lRunTestTime, pXsvfInfo->ucMaxRepeat );
1383:../Xilinx_src/micro.c ****     if ( !iErrorCode )
 2010              		.loc 1 1383 0
 2011 00b4 18301BE5 		ldr	r3, [fp, #-24]
 2012 00b8 000053E3 		cmp	r3, #0
 2013 00bc 6700001A 		bne	.L121
1384:../Xilinx_src/micro.c ****     {
1385:../Xilinx_src/micro.c ****         /* Calculate number of data mask bits */
1386:../Xilinx_src/micro.c ****         iDataMaskLen    = 0;
 2014              		.loc 1 1386 0
 2015 00c0 0030A0E3 		mov	r3, #0
 2016 00c4 1C300BE5 		str	r3, [fp, #-28]
1387:../Xilinx_src/micro.c ****         for ( i = 0; i < pXsvfInfo->lvDataMask.len; ++i )
 2017              		.loc 1 1387 0
 2018 00c8 0030A0E3 		mov	r3, #0
 2019 00cc 1E304BE5 		strb	r3, [fp, #-30]
 2020 00d0 150000EA 		b	.L122
 2021              	.L125:
1388:../Xilinx_src/micro.c ****         {
1389:../Xilinx_src/micro.c ****             ucDataMask  = pXsvfInfo->lvDataMask.val[ i ];
 2022              		.loc 1 1389 0
 2023 00d4 1E205BE5 		ldrb	r2, [fp, #-30]	@ zero_extendqisi2
 2024 00d8 28101BE5 		ldr	r1, [fp, #-40]
 2025 00dc A4319FE5 		ldr	r3, .L130
 2026 00e0 022081E0 		add	r2, r1, r2
 2027 00e4 033082E0 		add	r3, r2, r3
 2028 00e8 0830D3E5 		ldrb	r3, [r3, #8]
 2029 00ec 1D304BE5 		strb	r3, [fp, #-29]
1390:../Xilinx_src/micro.c ****             while ( ucDataMask )
 2030              		.loc 1 1390 0
 2031 00f0 070000EA 		b	.L123
 2032              	.L124:
1391:../Xilinx_src/micro.c ****             {
1392:../Xilinx_src/micro.c ****                 iDataMaskLen    += ( ucDataMask & 1 );
 2033              		.loc 1 1392 0
 2034 00f4 1D305BE5 		ldrb	r3, [fp, #-29]	@ zero_extendqisi2
 2035 00f8 013003E2 		and	r3, r3, #1
 2036 00fc 1C201BE5 		ldr	r2, [fp, #-28]
 2037 0100 033082E0 		add	r3, r2, r3
 2038 0104 1C300BE5 		str	r3, [fp, #-28]
1393:../Xilinx_src/micro.c ****                 ucDataMask      >>= 1;
 2039              		.loc 1 1393 0
 2040 0108 1D305BE5 		ldrb	r3, [fp, #-29]	@ zero_extendqisi2
 2041 010c A330A0E1 		mov	r3, r3, lsr #1
 2042 0110 1D304BE5 		strb	r3, [fp, #-29]
 2043              	.L123:
1390:../Xilinx_src/micro.c ****             while ( ucDataMask )
 2044              		.loc 1 1390 0 discriminator 1
 2045 0114 1D305BE5 		ldrb	r3, [fp, #-29]	@ zero_extendqisi2
 2046 0118 000053E3 		cmp	r3, #0
 2047 011c F4FFFF1A 		bne	.L124
1387:../Xilinx_src/micro.c ****         {
 2048              		.loc 1 1387 0
 2049 0120 1E305BE5 		ldrb	r3, [fp, #-30]
 2050 0124 013083E2 		add	r3, r3, #1
 2051 0128 1E304BE5 		strb	r3, [fp, #-30]
 2052              	.L122:
1387:../Xilinx_src/micro.c ****         {
 2053              		.loc 1 1387 0 is_stmt 0 discriminator 1
 2054 012c 1E205BE5 		ldrb	r2, [fp, #-30]	@ zero_extendqisi2
 2055 0130 28101BE5 		ldr	r1, [fp, #-40]
 2056 0134 50319FE5 		ldr	r3, .L130+4
 2057 0138 B33091E1 		ldrh	r3, [r1, r3]
 2058 013c 0338A0E1 		mov	r3, r3, asl #16
 2059 0140 4338A0E1 		mov	r3, r3, asr #16
 2060 0144 030052E1 		cmp	r2, r3
 2061 0148 E1FFFFBA 		blt	.L125
1394:../Xilinx_src/micro.c ****             }
1395:../Xilinx_src/micro.c ****         }
1396:../Xilinx_src/micro.c **** 
1397:../Xilinx_src/micro.c ****         /* Get the number of data pieces, i.e. number of times to shift */
1398:../Xilinx_src/micro.c ****         readByte( &ucNumTimes );
 2062              		.loc 1 1398 0 is_stmt 1
 2063 014c 1F304BE2 		sub	r3, fp, #31
 2064 0150 0300A0E1 		mov	r0, r3
 2065 0154 FEFFFFEB 		bl	readByte
1399:../Xilinx_src/micro.c **** 
1400:../Xilinx_src/micro.c ****         /* For numTimes, get data, fix TDI, and shift */
1401:../Xilinx_src/micro.c ****         for ( i = 0; !iErrorCode && ( i < ucNumTimes ); ++i )
 2066              		.loc 1 1401 0
 2067 0158 0030A0E3 		mov	r3, #0
 2068 015c 1E304BE5 		strb	r3, [fp, #-30]
 2069 0160 370000EA 		b	.L126
 2070              	.L127:
1402:../Xilinx_src/micro.c ****         {
1403:../Xilinx_src/micro.c ****             readVal( &(pXsvfInfo->lvNextData),
 2071              		.loc 1 1403 0 discriminator 1
 2072 0164 28301BE5 		ldr	r3, [fp, #-40]
 2073 0168 034A83E2 		add	r4, r3, #12288
 2074 016c 324084E2 		add	r4, r4, #50
 2075 0170 1C001BE5 		ldr	r0, [fp, #-28]
 2076 0174 FEFFFFEB 		bl	xsvfGetAsNumBytes
 2077 0178 0030A0E1 		mov	r3, r0
 2078 017c 0400A0E1 		mov	r0, r4
 2079 0180 0310A0E1 		mov	r1, r3
 2080 0184 FEFFFFEB 		bl	readVal
1404:../Xilinx_src/micro.c ****                      xsvfGetAsNumBytes( iDataMaskLen ) );
1405:../Xilinx_src/micro.c ****             xsvfDoSDRMasking( &(pXsvfInfo->lvTdi),
 2081              		.loc 1 1405 0 discriminator 1
 2082 0188 28301BE5 		ldr	r3, [fp, #-40]
 2083 018c 1A0083E2 		add	r0, r3, #26
 2084 0190 28301BE5 		ldr	r3, [fp, #-40]
 2085 0194 031A83E2 		add	r1, r3, #12288
 2086 0198 321081E2 		add	r1, r1, #50
 2087 019c 28301BE5 		ldr	r3, [fp, #-40]
 2088 01a0 022A83E2 		add	r2, r3, #8192
 2089 01a4 2A2082E2 		add	r2, r2, #42
 2090 01a8 28301BE5 		ldr	r3, [fp, #-40]
 2091 01ac 0A3B83E2 		add	r3, r3, #10240
 2092 01b0 2E3083E2 		add	r3, r3, #46
 2093 01b4 FEFFFFEB 		bl	xsvfDoSDRMasking
1406:../Xilinx_src/micro.c ****                               &(pXsvfInfo->lvNextData),
1407:../Xilinx_src/micro.c ****                               &(pXsvfInfo->lvAddressMask),
1408:../Xilinx_src/micro.c ****                               &(pXsvfInfo->lvDataMask) );
1409:../Xilinx_src/micro.c ****             iErrorCode  = xsvfShift( &(pXsvfInfo->ucTapState),
 2094              		.loc 1 1409 0 discriminator 1
 2095 01b8 28301BE5 		ldr	r3, [fp, #-40]
 2096 01bc 0C0083E2 		add	r0, r3, #12
 2097 01c0 28301BE5 		ldr	r3, [fp, #-40]
 2098 01c4 14E093E5 		ldr	lr, [r3, #20]
 2099 01c8 28301BE5 		ldr	r3, [fp, #-40]
 2100 01cc 1AC083E2 		add	ip, r3, #26
 2101 01d0 28301BE5 		ldr	r3, [fp, #-40]
 2102 01d4 011A83E2 		add	r1, r3, #4096
 2103 01d8 221081E2 		add	r1, r1, #34
 2104 01dc 28301BE5 		ldr	r3, [fp, #-40]
 2105 01e0 812E83E2 		add	r2, r3, #2064
 2106 01e4 0E2082E2 		add	r2, r2, #14
 2107 01e8 28301BE5 		ldr	r3, [fp, #-40]
 2108 01ec 063B83E2 		add	r3, r3, #6144
 2109 01f0 263083E2 		add	r3, r3, #38
 2110 01f4 28401BE5 		ldr	r4, [fp, #-40]
 2111 01f8 0E60D4E5 		ldrb	r6, [r4, #14]	@ zero_extendqisi2
 2112 01fc 28401BE5 		ldr	r4, [fp, #-40]
 2113 0200 105094E5 		ldr	r5, [r4, #16]
 2114 0204 28401BE5 		ldr	r4, [fp, #-40]
 2115 0208 0F40D4E5 		ldrb	r4, [r4, #15]	@ zero_extendqisi2
 2116 020c 00108DE5 		str	r1, [sp]
 2117 0210 04208DE5 		str	r2, [sp, #4]
 2118 0214 08308DE5 		str	r3, [sp, #8]
 2119 0218 0C608DE5 		str	r6, [sp, #12]
 2120 021c 10508DE5 		str	r5, [sp, #16]
 2121 0220 14408DE5 		str	r4, [sp, #20]
 2122 0224 0410A0E3 		mov	r1, #4
 2123 0228 0E20A0E1 		mov	r2, lr
 2124 022c 0C30A0E1 		mov	r3, ip
 2125 0230 FEFFFFEB 		bl	xsvfShift
 2126 0234 18000BE5 		str	r0, [fp, #-24]
1401:../Xilinx_src/micro.c ****         {
 2127              		.loc 1 1401 0 discriminator 1
 2128 0238 1E305BE5 		ldrb	r3, [fp, #-30]
 2129 023c 013083E2 		add	r3, r3, #1
 2130 0240 1E304BE5 		strb	r3, [fp, #-30]
 2131              	.L126:
 2132 0244 18301BE5 		ldr	r3, [fp, #-24]
 2133 0248 000053E3 		cmp	r3, #0
 2134 024c 0300001A 		bne	.L121
1401:../Xilinx_src/micro.c ****         {
 2135              		.loc 1 1401 0 is_stmt 0 discriminator 2
 2136 0250 1F305BE5 		ldrb	r3, [fp, #-31]	@ zero_extendqisi2
 2137 0254 1E205BE5 		ldrb	r2, [fp, #-30]	@ zero_extendqisi2
 2138 0258 030052E1 		cmp	r2, r3
 2139 025c C0FFFF3A 		bcc	.L127
 2140              	.L121:
1410:../Xilinx_src/micro.c ****                                      XTAPSTATE_SHIFTDR,
1411:../Xilinx_src/micro.c ****                                      pXsvfInfo->lShiftLengthBits,
1412:../Xilinx_src/micro.c ****                                      &(pXsvfInfo->lvTdi),
1413:../Xilinx_src/micro.c ****                                      &(pXsvfInfo->lvTdoCaptured),
1414:../Xilinx_src/micro.c ****                                      &(pXsvfInfo->lvTdoExpected),
1415:../Xilinx_src/micro.c ****                                      &(pXsvfInfo->lvTdoMask),
1416:../Xilinx_src/micro.c ****                                      pXsvfInfo->ucEndDR,
1417:../Xilinx_src/micro.c ****                                      pXsvfInfo->lRunTestTime,
1418:../Xilinx_src/micro.c ****                                      pXsvfInfo->ucMaxRepeat );
1419:../Xilinx_src/micro.c ****         }
1420:../Xilinx_src/micro.c ****     }
1421:../Xilinx_src/micro.c ****     if ( iErrorCode != XSVF_ERROR_NONE )
 2141              		.loc 1 1421 0 is_stmt 1
 2142 0260 18301BE5 		ldr	r3, [fp, #-24]
 2143 0264 000053E3 		cmp	r3, #0
 2144 0268 0200000A 		beq	.L128
1422:../Xilinx_src/micro.c ****     {
1423:../Xilinx_src/micro.c ****         pXsvfInfo->iErrorCode   = iErrorCode;
 2145              		.loc 1 1423 0
 2146 026c 28301BE5 		ldr	r3, [fp, #-40]
 2147 0270 18201BE5 		ldr	r2, [fp, #-24]
 2148 0274 082083E5 		str	r2, [r3, #8]
 2149              	.L128:
1424:../Xilinx_src/micro.c ****     }
1425:../Xilinx_src/micro.c ****     return( iErrorCode );
 2150              		.loc 1 1425 0
 2151 0278 18301BE5 		ldr	r3, [fp, #-24]
1426:../Xilinx_src/micro.c **** }
 2152              		.loc 1 1426 0
 2153 027c 0300A0E1 		mov	r0, r3
 2154 0280 10D04BE2 		sub	sp, fp, #16
 2155              		@ sp needed
 2156 0284 7088BDE8 		ldmfd	sp!, {r4, r5, r6, fp, pc}
 2157              	.L131:
 2158              		.align	2
 2159              	.L130:
 2160 0288 28280000 		.word	10280
 2161 028c 2E280000 		.word	10286
 2162              		.cfi_endproc
 2163              	.LFE20:
 2165              		.section	.text.xsvfDoXSDRBCE,"ax",%progbits
 2166              		.align	2
 2167              		.global	xsvfDoXSDRBCE
 2169              	xsvfDoXSDRBCE:
 2170              	.LFB21:
1427:../Xilinx_src/micro.c **** #endif  /* XSVF_SUPPORT_COMPRESSION */
1428:../Xilinx_src/micro.c **** 
1429:../Xilinx_src/micro.c **** /*****************************************************************************
1430:../Xilinx_src/micro.c **** * Function:     xsvfDoXSDRBCE
1431:../Xilinx_src/micro.c **** * Description:  XSDRB/XSDRC/XSDRE <lenVal.TDI[XSDRSIZE]>
1432:../Xilinx_src/micro.c **** *               If not already in SHIFTDR, goto SHIFTDR.
1433:../Xilinx_src/micro.c **** *               Shift the given TDI data into the JTAG scan chain.
1434:../Xilinx_src/micro.c **** *               Ignore TDO.
1435:../Xilinx_src/micro.c **** *               If cmd==XSDRE, then goto ENDDR.  Otherwise, stay in ShiftDR.
1436:../Xilinx_src/micro.c **** *               XSDRB, XSDRC, and XSDRE are the same implementation.
1437:../Xilinx_src/micro.c **** * Parameters:   pXsvfInfo   - XSVF information pointer.
1438:../Xilinx_src/micro.c **** * Returns:      int         - 0 = success;  non-zero = error.
1439:../Xilinx_src/micro.c **** *****************************************************************************/
1440:../Xilinx_src/micro.c **** int xsvfDoXSDRBCE( SXsvfInfo* pXsvfInfo )
1441:../Xilinx_src/micro.c **** {
 2171              		.loc 1 1441 0
 2172              		.cfi_startproc
 2173              		@ args = 0, pretend = 0, frame = 16
 2174              		@ frame_needed = 1, uses_anonymous_args = 0
 2175 0000 00482DE9 		stmfd	sp!, {fp, lr}
 2176              	.LCFI42:
 2177              		.cfi_def_cfa_offset 8
 2178              		.cfi_offset 11, -8
 2179              		.cfi_offset 14, -4
 2180 0004 04B08DE2 		add	fp, sp, #4
 2181              	.LCFI43:
 2182              		.cfi_def_cfa 11, 4
 2183 0008 28D04DE2 		sub	sp, sp, #40
 2184 000c 10000BE5 		str	r0, [fp, #-16]
1442:../Xilinx_src/micro.c ****     unsigned char   ucEndDR;
1443:../Xilinx_src/micro.c ****     int             iErrorCode;
1444:../Xilinx_src/micro.c ****     ucEndDR = (unsigned char)(( pXsvfInfo->ucCommand == XSDRE ) ?
 2185              		.loc 1 1444 0
 2186 0010 10301BE5 		ldr	r3, [fp, #-16]
 2187 0014 0130D3E5 		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2188 0018 0E0053E3 		cmp	r3, #14
 2189 001c 0200001A 		bne	.L133
 2190              		.loc 1 1444 0 is_stmt 0 discriminator 1
 2191 0020 10301BE5 		ldr	r3, [fp, #-16]
 2192 0024 0E30D3E5 		ldrb	r3, [r3, #14]	@ zero_extendqisi2
 2193 0028 000000EA 		b	.L134
 2194              	.L133:
 2195              		.loc 1 1444 0 discriminator 2
 2196 002c 0430A0E3 		mov	r3, #4
 2197              	.L134:
 2198              		.loc 1 1444 0 discriminator 3
 2199 0030 05304BE5 		strb	r3, [fp, #-5]
1445:../Xilinx_src/micro.c ****                                 pXsvfInfo->ucEndDR : XTAPSTATE_SHIFTDR);
1446:../Xilinx_src/micro.c ****     iErrorCode  = xsvfBasicXSDRTDO( &(pXsvfInfo->ucTapState),
 2200              		.loc 1 1446 0 is_stmt 1 discriminator 3
 2201 0034 10301BE5 		ldr	r3, [fp, #-16]
 2202 0038 0C0083E2 		add	r0, r3, #12
 2203 003c 10301BE5 		ldr	r3, [fp, #-16]
 2204 0040 141093E5 		ldr	r1, [r3, #20]
 2205 0044 10301BE5 		ldr	r3, [fp, #-16]
 2206 0048 B821D3E1 		ldrh	r2, [r3, #24]
 2207 004c 10301BE5 		ldr	r3, [fp, #-16]
 2208 0050 1A3083E2 		add	r3, r3, #26
 2209 0054 0228A0E1 		mov	r2, r2, asl #16
 2210 0058 4228A0E1 		mov	r2, r2, asr #16
 2211 005c 00C0A0E3 		mov	ip, #0
 2212 0060 00C08DE5 		str	ip, [sp]
 2213 0064 00C0A0E3 		mov	ip, #0
 2214 0068 04C08DE5 		str	ip, [sp, #4]
 2215 006c 00C0A0E3 		mov	ip, #0
 2216 0070 08C08DE5 		str	ip, [sp, #8]
 2217 0074 05C05BE5 		ldrb	ip, [fp, #-5]	@ zero_extendqisi2
 2218 0078 0CC08DE5 		str	ip, [sp, #12]
 2219 007c 00C0A0E3 		mov	ip, #0
 2220 0080 10C08DE5 		str	ip, [sp, #16]
 2221 0084 00C0A0E3 		mov	ip, #0
 2222 0088 14C08DE5 		str	ip, [sp, #20]
 2223 008c FEFFFFEB 		bl	xsvfBasicXSDRTDO
 2224 0090 0C000BE5 		str	r0, [fp, #-12]
1447:../Xilinx_src/micro.c ****                                     pXsvfInfo->lShiftLengthBits,
1448:../Xilinx_src/micro.c ****                                     pXsvfInfo->sShiftLengthBytes,
1449:../Xilinx_src/micro.c ****                                     &(pXsvfInfo->lvTdi),
1450:../Xilinx_src/micro.c ****                                     /*plvTdoCaptured*/0, /*plvTdoExpected*/0,
1451:../Xilinx_src/micro.c ****                                     /*plvTdoMask*/0, ucEndDR,
1452:../Xilinx_src/micro.c ****                                     /*lRunTestTime*/0, /*ucMaxRepeat*/0 );
1453:../Xilinx_src/micro.c ****     if ( iErrorCode != XSVF_ERROR_NONE )
 2225              		.loc 1 1453 0 discriminator 3
 2226 0094 0C301BE5 		ldr	r3, [fp, #-12]
 2227 0098 000053E3 		cmp	r3, #0
 2228 009c 0200000A 		beq	.L135
1454:../Xilinx_src/micro.c ****     {
1455:../Xilinx_src/micro.c ****         pXsvfInfo->iErrorCode   = iErrorCode;
 2229              		.loc 1 1455 0
 2230 00a0 10301BE5 		ldr	r3, [fp, #-16]
 2231 00a4 0C201BE5 		ldr	r2, [fp, #-12]
 2232 00a8 082083E5 		str	r2, [r3, #8]
 2233              	.L135:
1456:../Xilinx_src/micro.c ****     }
1457:../Xilinx_src/micro.c ****     return( iErrorCode );
 2234              		.loc 1 1457 0
 2235 00ac 0C301BE5 		ldr	r3, [fp, #-12]
1458:../Xilinx_src/micro.c **** }
 2236              		.loc 1 1458 0
 2237 00b0 0300A0E1 		mov	r0, r3
 2238 00b4 04D04BE2 		sub	sp, fp, #4
 2239              		@ sp needed
 2240 00b8 0088BDE8 		ldmfd	sp!, {fp, pc}
 2241              		.cfi_endproc
 2242              	.LFE21:
 2244              		.section	.text.xsvfDoXSDRTDOBCE,"ax",%progbits
 2245              		.align	2
 2246              		.global	xsvfDoXSDRTDOBCE
 2248              	xsvfDoXSDRTDOBCE:
 2249              	.LFB22:
1459:../Xilinx_src/micro.c **** 
1460:../Xilinx_src/micro.c **** /*****************************************************************************
1461:../Xilinx_src/micro.c **** * Function:     xsvfDoXSDRTDOBCE
1462:../Xilinx_src/micro.c **** * Description:  XSDRB/XSDRC/XSDRE <lenVal.TDI[XSDRSIZE]> <lenVal.TDO[XSDRSIZE]>
1463:../Xilinx_src/micro.c **** *               If not already in SHIFTDR, goto SHIFTDR.
1464:../Xilinx_src/micro.c **** *               Shift the given TDI data into the JTAG scan chain.
1465:../Xilinx_src/micro.c **** *               Compare TDO, but do NOT use XTDOMASK.
1466:../Xilinx_src/micro.c **** *               If cmd==XSDRTDOE, then goto ENDDR.  Otherwise, stay in ShiftDR.
1467:../Xilinx_src/micro.c **** *               XSDRTDOB, XSDRTDOC, and XSDRTDOE are the same implementation.
1468:../Xilinx_src/micro.c **** * Parameters:   pXsvfInfo   - XSVF information pointer.
1469:../Xilinx_src/micro.c **** * Returns:      int         - 0 = success;  non-zero = error.
1470:../Xilinx_src/micro.c **** *****************************************************************************/
1471:../Xilinx_src/micro.c **** int xsvfDoXSDRTDOBCE( SXsvfInfo* pXsvfInfo )
1472:../Xilinx_src/micro.c **** {
 2250              		.loc 1 1472 0
 2251              		.cfi_startproc
 2252              		@ args = 0, pretend = 0, frame = 16
 2253              		@ frame_needed = 1, uses_anonymous_args = 0
 2254 0000 00482DE9 		stmfd	sp!, {fp, lr}
 2255              	.LCFI44:
 2256              		.cfi_def_cfa_offset 8
 2257              		.cfi_offset 11, -8
 2258              		.cfi_offset 14, -4
 2259 0004 04B08DE2 		add	fp, sp, #4
 2260              	.LCFI45:
 2261              		.cfi_def_cfa 11, 4
 2262 0008 28D04DE2 		sub	sp, sp, #40
 2263 000c 10000BE5 		str	r0, [fp, #-16]
1473:../Xilinx_src/micro.c ****     unsigned char   ucEndDR;
1474:../Xilinx_src/micro.c ****     int             iErrorCode;
1475:../Xilinx_src/micro.c ****     ucEndDR = (unsigned char)(( pXsvfInfo->ucCommand == XSDRTDOE ) ?
 2264              		.loc 1 1475 0
 2265 0010 10301BE5 		ldr	r3, [fp, #-16]
 2266 0014 0130D3E5 		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2267 0018 110053E3 		cmp	r3, #17
 2268 001c 0200001A 		bne	.L138
 2269              		.loc 1 1475 0 is_stmt 0 discriminator 1
 2270 0020 10301BE5 		ldr	r3, [fp, #-16]
 2271 0024 0E30D3E5 		ldrb	r3, [r3, #14]	@ zero_extendqisi2
 2272 0028 000000EA 		b	.L139
 2273              	.L138:
 2274              		.loc 1 1475 0 discriminator 2
 2275 002c 0430A0E3 		mov	r3, #4
 2276              	.L139:
 2277              		.loc 1 1475 0 discriminator 3
 2278 0030 05304BE5 		strb	r3, [fp, #-5]
1476:../Xilinx_src/micro.c ****                                 pXsvfInfo->ucEndDR : XTAPSTATE_SHIFTDR);
1477:../Xilinx_src/micro.c ****     iErrorCode  = xsvfBasicXSDRTDO( &(pXsvfInfo->ucTapState),
 2279              		.loc 1 1477 0 is_stmt 1 discriminator 3
 2280 0034 10301BE5 		ldr	r3, [fp, #-16]
 2281 0038 0C0083E2 		add	r0, r3, #12
 2282 003c 10301BE5 		ldr	r3, [fp, #-16]
 2283 0040 141093E5 		ldr	r1, [r3, #20]
 2284 0044 10301BE5 		ldr	r3, [fp, #-16]
 2285 0048 B8E1D3E1 		ldrh	lr, [r3, #24]
 2286 004c 10301BE5 		ldr	r3, [fp, #-16]
 2287 0050 1AC083E2 		add	ip, r3, #26
 2288 0054 10301BE5 		ldr	r3, [fp, #-16]
 2289 0058 012A83E2 		add	r2, r3, #4096
 2290 005c 222082E2 		add	r2, r2, #34
 2291 0060 10301BE5 		ldr	r3, [fp, #-16]
 2292 0064 813E83E2 		add	r3, r3, #2064
 2293 0068 0E3083E2 		add	r3, r3, #14
 2294 006c 0EE8A0E1 		mov	lr, lr, asl #16
 2295 0070 4EE8A0E1 		mov	lr, lr, asr #16
 2296 0074 00208DE5 		str	r2, [sp]
 2297 0078 04308DE5 		str	r3, [sp, #4]
 2298 007c 0030A0E3 		mov	r3, #0
 2299 0080 08308DE5 		str	r3, [sp, #8]
 2300 0084 05305BE5 		ldrb	r3, [fp, #-5]	@ zero_extendqisi2
 2301 0088 0C308DE5 		str	r3, [sp, #12]
 2302 008c 0030A0E3 		mov	r3, #0
 2303 0090 10308DE5 		str	r3, [sp, #16]
 2304 0094 0030A0E3 		mov	r3, #0
 2305 0098 14308DE5 		str	r3, [sp, #20]
 2306 009c 0E20A0E1 		mov	r2, lr
 2307 00a0 0C30A0E1 		mov	r3, ip
 2308 00a4 FEFFFFEB 		bl	xsvfBasicXSDRTDO
 2309 00a8 0C000BE5 		str	r0, [fp, #-12]
1478:../Xilinx_src/micro.c ****                                     pXsvfInfo->lShiftLengthBits,
1479:../Xilinx_src/micro.c ****                                     pXsvfInfo->sShiftLengthBytes,
1480:../Xilinx_src/micro.c ****                                     &(pXsvfInfo->lvTdi),
1481:../Xilinx_src/micro.c ****                                     &(pXsvfInfo->lvTdoCaptured),
1482:../Xilinx_src/micro.c ****                                     &(pXsvfInfo->lvTdoExpected),
1483:../Xilinx_src/micro.c ****                                     /*plvTdoMask*/0, ucEndDR,
1484:../Xilinx_src/micro.c ****                                     /*lRunTestTime*/0, /*ucMaxRepeat*/0 );
1485:../Xilinx_src/micro.c ****     if ( iErrorCode != XSVF_ERROR_NONE )
 2310              		.loc 1 1485 0 discriminator 3
 2311 00ac 0C301BE5 		ldr	r3, [fp, #-12]
 2312 00b0 000053E3 		cmp	r3, #0
 2313 00b4 0200000A 		beq	.L140
1486:../Xilinx_src/micro.c ****     {
1487:../Xilinx_src/micro.c ****         pXsvfInfo->iErrorCode   = iErrorCode;
 2314              		.loc 1 1487 0
 2315 00b8 10301BE5 		ldr	r3, [fp, #-16]
 2316 00bc 0C201BE5 		ldr	r2, [fp, #-12]
 2317 00c0 082083E5 		str	r2, [r3, #8]
 2318              	.L140:
1488:../Xilinx_src/micro.c ****     }
1489:../Xilinx_src/micro.c ****     return( iErrorCode );
 2319              		.loc 1 1489 0
 2320 00c4 0C301BE5 		ldr	r3, [fp, #-12]
1490:../Xilinx_src/micro.c **** }
 2321              		.loc 1 1490 0
 2322 00c8 0300A0E1 		mov	r0, r3
 2323 00cc 04D04BE2 		sub	sp, fp, #4
 2324              		@ sp needed
 2325 00d0 0088BDE8 		ldmfd	sp!, {fp, pc}
 2326              		.cfi_endproc
 2327              	.LFE22:
 2329              		.section	.text.xsvfDoXSTATE,"ax",%progbits
 2330              		.align	2
 2331              		.global	xsvfDoXSTATE
 2333              	xsvfDoXSTATE:
 2334              	.LFB23:
1491:../Xilinx_src/micro.c **** 
1492:../Xilinx_src/micro.c **** /*****************************************************************************
1493:../Xilinx_src/micro.c **** * Function:     xsvfDoXSTATE
1494:../Xilinx_src/micro.c **** * Description:  XSTATE <byte>
1495:../Xilinx_src/micro.c **** *               <byte> == XTAPSTATE;
1496:../Xilinx_src/micro.c **** *               Get the state parameter and transition the TAP to that state.
1497:../Xilinx_src/micro.c **** * Parameters:   pXsvfInfo   - XSVF information pointer.
1498:../Xilinx_src/micro.c **** * Returns:      int         - 0 = success;  non-zero = error.
1499:../Xilinx_src/micro.c **** *****************************************************************************/
1500:../Xilinx_src/micro.c **** int xsvfDoXSTATE( SXsvfInfo* pXsvfInfo )
1501:../Xilinx_src/micro.c **** {
 2335              		.loc 1 1501 0
 2336              		.cfi_startproc
 2337              		@ args = 0, pretend = 0, frame = 16
 2338              		@ frame_needed = 1, uses_anonymous_args = 0
 2339 0000 00482DE9 		stmfd	sp!, {fp, lr}
 2340              	.LCFI46:
 2341              		.cfi_def_cfa_offset 8
 2342              		.cfi_offset 11, -8
 2343              		.cfi_offset 14, -4
 2344 0004 04B08DE2 		add	fp, sp, #4
 2345              	.LCFI47:
 2346              		.cfi_def_cfa 11, 4
 2347 0008 10D04DE2 		sub	sp, sp, #16
 2348 000c 10000BE5 		str	r0, [fp, #-16]
1502:../Xilinx_src/micro.c ****     unsigned char   ucNextState;
1503:../Xilinx_src/micro.c ****     int             iErrorCode;
1504:../Xilinx_src/micro.c ****     readByte( &ucNextState );
 2349              		.loc 1 1504 0
 2350 0010 09304BE2 		sub	r3, fp, #9
 2351 0014 0300A0E1 		mov	r0, r3
 2352 0018 FEFFFFEB 		bl	readByte
1505:../Xilinx_src/micro.c ****     iErrorCode  = xsvfGotoTapState( &(pXsvfInfo->ucTapState), ucNextState );
 2353              		.loc 1 1505 0
 2354 001c 10301BE5 		ldr	r3, [fp, #-16]
 2355 0020 0C2083E2 		add	r2, r3, #12
 2356 0024 09305BE5 		ldrb	r3, [fp, #-9]	@ zero_extendqisi2
 2357 0028 0200A0E1 		mov	r0, r2
 2358 002c 0310A0E1 		mov	r1, r3
 2359 0030 FEFFFFEB 		bl	xsvfGotoTapState
 2360 0034 08000BE5 		str	r0, [fp, #-8]
1506:../Xilinx_src/micro.c ****     if ( iErrorCode != XSVF_ERROR_NONE )
 2361              		.loc 1 1506 0
 2362 0038 08301BE5 		ldr	r3, [fp, #-8]
 2363 003c 000053E3 		cmp	r3, #0
 2364 0040 0200000A 		beq	.L143
1507:../Xilinx_src/micro.c ****     {
1508:../Xilinx_src/micro.c ****         pXsvfInfo->iErrorCode   = iErrorCode;
 2365              		.loc 1 1508 0
 2366 0044 10301BE5 		ldr	r3, [fp, #-16]
 2367 0048 08201BE5 		ldr	r2, [fp, #-8]
 2368 004c 082083E5 		str	r2, [r3, #8]
 2369              	.L143:
1509:../Xilinx_src/micro.c ****     }
1510:../Xilinx_src/micro.c ****     return( iErrorCode );
 2370              		.loc 1 1510 0
 2371 0050 08301BE5 		ldr	r3, [fp, #-8]
1511:../Xilinx_src/micro.c **** }
 2372              		.loc 1 1511 0
 2373 0054 0300A0E1 		mov	r0, r3
 2374 0058 04D04BE2 		sub	sp, fp, #4
 2375              		@ sp needed
 2376 005c 0088BDE8 		ldmfd	sp!, {fp, pc}
 2377              		.cfi_endproc
 2378              	.LFE23:
 2380              		.section	.text.xsvfDoXENDXR,"ax",%progbits
 2381              		.align	2
 2382              		.global	xsvfDoXENDXR
 2384              	xsvfDoXENDXR:
 2385              	.LFB24:
1512:../Xilinx_src/micro.c **** 
1513:../Xilinx_src/micro.c **** /*****************************************************************************
1514:../Xilinx_src/micro.c **** * Function:     xsvfDoXENDXR
1515:../Xilinx_src/micro.c **** * Description:  XENDIR/XENDDR <byte>
1516:../Xilinx_src/micro.c **** *               <byte>:  0 = RUNTEST;  1 = PAUSE.
1517:../Xilinx_src/micro.c **** *               Get the prespecified XENDIR or XENDDR.
1518:../Xilinx_src/micro.c **** *               Both XENDIR and XENDDR use the same implementation.
1519:../Xilinx_src/micro.c **** * Parameters:   pXsvfInfo   - XSVF information pointer.
1520:../Xilinx_src/micro.c **** * Returns:      int         - 0 = success;  non-zero = error.
1521:../Xilinx_src/micro.c **** *****************************************************************************/
1522:../Xilinx_src/micro.c **** int xsvfDoXENDXR( SXsvfInfo* pXsvfInfo )
1523:../Xilinx_src/micro.c **** {
 2386              		.loc 1 1523 0
 2387              		.cfi_startproc
 2388              		@ args = 0, pretend = 0, frame = 16
 2389              		@ frame_needed = 1, uses_anonymous_args = 0
 2390 0000 00482DE9 		stmfd	sp!, {fp, lr}
 2391              	.LCFI48:
 2392              		.cfi_def_cfa_offset 8
 2393              		.cfi_offset 11, -8
 2394              		.cfi_offset 14, -4
 2395 0004 04B08DE2 		add	fp, sp, #4
 2396              	.LCFI49:
 2397              		.cfi_def_cfa 11, 4
 2398 0008 10D04DE2 		sub	sp, sp, #16
 2399 000c 10000BE5 		str	r0, [fp, #-16]
1524:../Xilinx_src/micro.c ****     int             iErrorCode;
1525:../Xilinx_src/micro.c ****     unsigned char   ucEndState;
1526:../Xilinx_src/micro.c **** 
1527:../Xilinx_src/micro.c ****     iErrorCode  = XSVF_ERROR_NONE;
 2400              		.loc 1 1527 0
 2401 0010 0030A0E3 		mov	r3, #0
 2402 0014 08300BE5 		str	r3, [fp, #-8]
1528:../Xilinx_src/micro.c ****     readByte( &ucEndState );
 2403              		.loc 1 1528 0
 2404 0018 09304BE2 		sub	r3, fp, #9
 2405 001c 0300A0E1 		mov	r0, r3
 2406 0020 FEFFFFEB 		bl	readByte
1529:../Xilinx_src/micro.c ****     if ( ( ucEndState != XENDXR_RUNTEST ) && ( ucEndState != XENDXR_PAUSE ) )
 2407              		.loc 1 1529 0
 2408 0024 09305BE5 		ldrb	r3, [fp, #-9]	@ zero_extendqisi2
 2409 0028 000053E3 		cmp	r3, #0
 2410 002c 0500000A 		beq	.L146
 2411              		.loc 1 1529 0 is_stmt 0 discriminator 1
 2412 0030 09305BE5 		ldrb	r3, [fp, #-9]	@ zero_extendqisi2
 2413 0034 010053E3 		cmp	r3, #1
 2414 0038 0200000A 		beq	.L146
1530:../Xilinx_src/micro.c ****     {
1531:../Xilinx_src/micro.c ****         iErrorCode  = XSVF_ERROR_ILLEGALSTATE;
 2415              		.loc 1 1531 0 is_stmt 1
 2416 003c 0530A0E3 		mov	r3, #5
 2417 0040 08300BE5 		str	r3, [fp, #-8]
 2418 0044 180000EA 		b	.L147
 2419              	.L146:
1532:../Xilinx_src/micro.c ****     }
1533:../Xilinx_src/micro.c ****     else
1534:../Xilinx_src/micro.c ****     {
1535:../Xilinx_src/micro.c **** 
1536:../Xilinx_src/micro.c ****     if ( pXsvfInfo->ucCommand == XENDIR )
 2420              		.loc 1 1536 0
 2421 0048 10301BE5 		ldr	r3, [fp, #-16]
 2422 004c 0130D3E5 		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2423 0050 130053E3 		cmp	r3, #19
 2424 0054 0A00001A 		bne	.L148
1537:../Xilinx_src/micro.c ****     {
1538:../Xilinx_src/micro.c ****             if ( ucEndState == XENDXR_RUNTEST )
 2425              		.loc 1 1538 0
 2426 0058 09305BE5 		ldrb	r3, [fp, #-9]	@ zero_extendqisi2
 2427 005c 000053E3 		cmp	r3, #0
 2428 0060 0300001A 		bne	.L149
1539:../Xilinx_src/micro.c ****             {
1540:../Xilinx_src/micro.c ****                 pXsvfInfo->ucEndIR  = XTAPSTATE_RUNTEST;
 2429              		.loc 1 1540 0
 2430 0064 10301BE5 		ldr	r3, [fp, #-16]
 2431 0068 0120A0E3 		mov	r2, #1
 2432 006c 0D20C3E5 		strb	r2, [r3, #13]
 2433 0070 0D0000EA 		b	.L147
 2434              	.L149:
1541:../Xilinx_src/micro.c ****             }
1542:../Xilinx_src/micro.c ****             else
1543:../Xilinx_src/micro.c ****             {
1544:../Xilinx_src/micro.c ****                 pXsvfInfo->ucEndIR  = XTAPSTATE_PAUSEIR;
 2435              		.loc 1 1544 0
 2436 0074 10301BE5 		ldr	r3, [fp, #-16]
 2437 0078 0D20A0E3 		mov	r2, #13
 2438 007c 0D20C3E5 		strb	r2, [r3, #13]
 2439 0080 090000EA 		b	.L147
 2440              	.L148:
1545:../Xilinx_src/micro.c ****             }
1546:../Xilinx_src/micro.c ****             XSVFDBG_PRINTF1( 3, "   ENDIR State = %s\n",
1547:../Xilinx_src/micro.c ****                              xsvf_pzTapState[ pXsvfInfo->ucEndIR ] );
1548:../Xilinx_src/micro.c ****         }
1549:../Xilinx_src/micro.c ****     else    /* XENDDR */
1550:../Xilinx_src/micro.c ****     {
1551:../Xilinx_src/micro.c ****             if ( ucEndState == XENDXR_RUNTEST )
 2441              		.loc 1 1551 0
 2442 0084 09305BE5 		ldrb	r3, [fp, #-9]	@ zero_extendqisi2
 2443 0088 000053E3 		cmp	r3, #0
 2444 008c 0300001A 		bne	.L151
1552:../Xilinx_src/micro.c ****             {
1553:../Xilinx_src/micro.c ****                 pXsvfInfo->ucEndDR  = XTAPSTATE_RUNTEST;
 2445              		.loc 1 1553 0
 2446 0090 10301BE5 		ldr	r3, [fp, #-16]
 2447 0094 0120A0E3 		mov	r2, #1
 2448 0098 0E20C3E5 		strb	r2, [r3, #14]
 2449 009c 020000EA 		b	.L147
 2450              	.L151:
1554:../Xilinx_src/micro.c ****             }
1555:../Xilinx_src/micro.c ****     else
1556:../Xilinx_src/micro.c ****     {
1557:../Xilinx_src/micro.c ****                 pXsvfInfo->ucEndDR  = XTAPSTATE_PAUSEDR;
 2451              		.loc 1 1557 0
 2452 00a0 10301BE5 		ldr	r3, [fp, #-16]
 2453 00a4 0620A0E3 		mov	r2, #6
 2454 00a8 0E20C3E5 		strb	r2, [r3, #14]
 2455              	.L147:
1558:../Xilinx_src/micro.c ****             }
1559:../Xilinx_src/micro.c ****             XSVFDBG_PRINTF1( 3, "   ENDDR State = %s\n",
1560:../Xilinx_src/micro.c ****                              xsvf_pzTapState[ pXsvfInfo->ucEndDR ] );
1561:../Xilinx_src/micro.c ****         }
1562:../Xilinx_src/micro.c ****     }
1563:../Xilinx_src/micro.c **** 
1564:../Xilinx_src/micro.c ****     if ( iErrorCode != XSVF_ERROR_NONE )
 2456              		.loc 1 1564 0
 2457 00ac 08301BE5 		ldr	r3, [fp, #-8]
 2458 00b0 000053E3 		cmp	r3, #0
 2459 00b4 0200000A 		beq	.L152
1565:../Xilinx_src/micro.c ****     {
1566:../Xilinx_src/micro.c ****         pXsvfInfo->iErrorCode   = iErrorCode;
 2460              		.loc 1 1566 0
 2461 00b8 10301BE5 		ldr	r3, [fp, #-16]
 2462 00bc 08201BE5 		ldr	r2, [fp, #-8]
 2463 00c0 082083E5 		str	r2, [r3, #8]
 2464              	.L152:
1567:../Xilinx_src/micro.c ****     }
1568:../Xilinx_src/micro.c ****     return( iErrorCode );
 2465              		.loc 1 1568 0
 2466 00c4 08301BE5 		ldr	r3, [fp, #-8]
1569:../Xilinx_src/micro.c **** }
 2467              		.loc 1 1569 0
 2468 00c8 0300A0E1 		mov	r0, r3
 2469 00cc 04D04BE2 		sub	sp, fp, #4
 2470              		@ sp needed
 2471 00d0 0088BDE8 		ldmfd	sp!, {fp, pc}
 2472              		.cfi_endproc
 2473              	.LFE24:
 2475              		.section	.text.xsvfDoXCOMMENT,"ax",%progbits
 2476              		.align	2
 2477              		.global	xsvfDoXCOMMENT
 2479              	xsvfDoXCOMMENT:
 2480              	.LFB25:
1570:../Xilinx_src/micro.c **** 
1571:../Xilinx_src/micro.c **** /*****************************************************************************
1572:../Xilinx_src/micro.c **** * Function:     xsvfDoXCOMMENT
1573:../Xilinx_src/micro.c **** * Description:  XCOMMENT <text string ending in \0>
1574:../Xilinx_src/micro.c **** *               <text string ending in \0> == text comment;
1575:../Xilinx_src/micro.c **** *               Arbitrary comment embedded in the XSVF.
1576:../Xilinx_src/micro.c **** * Parameters:   pXsvfInfo   - XSVF information pointer.
1577:../Xilinx_src/micro.c **** * Returns:      int         - 0 = success;  non-zero = error.
1578:../Xilinx_src/micro.c **** *****************************************************************************/
1579:../Xilinx_src/micro.c **** int xsvfDoXCOMMENT( SXsvfInfo* pXsvfInfo )
1580:../Xilinx_src/micro.c **** {
 2481              		.loc 1 1580 0
 2482              		.cfi_startproc
 2483              		@ args = 0, pretend = 0, frame = 16
 2484              		@ frame_needed = 1, uses_anonymous_args = 0
 2485 0000 00482DE9 		stmfd	sp!, {fp, lr}
 2486              	.LCFI50:
 2487              		.cfi_def_cfa_offset 8
 2488              		.cfi_offset 11, -8
 2489              		.cfi_offset 14, -4
 2490 0004 04B08DE2 		add	fp, sp, #4
 2491              	.LCFI51:
 2492              		.cfi_def_cfa 11, 4
 2493 0008 10D04DE2 		sub	sp, sp, #16
 2494 000c 10000BE5 		str	r0, [fp, #-16]
 2495              	.L155:
1581:../Xilinx_src/micro.c ****     /* Use the comment for debugging */
1582:../Xilinx_src/micro.c ****     /* Otherwise, read through the comment to the end '\0' and ignore */
1583:../Xilinx_src/micro.c ****     unsigned char   ucText;
1584:../Xilinx_src/micro.c **** 
1585:../Xilinx_src/micro.c ****     if ( xsvf_iDebugLevel > 0 )
1586:../Xilinx_src/micro.c ****     {
1587:../Xilinx_src/micro.c ****         putchar( ' ' );
1588:../Xilinx_src/micro.c ****     }
1589:../Xilinx_src/micro.c **** 
1590:../Xilinx_src/micro.c ****     do
1591:../Xilinx_src/micro.c ****     {
1592:../Xilinx_src/micro.c ****         readByte( &ucText );
 2496              		.loc 1 1592 0
 2497 0010 05304BE2 		sub	r3, fp, #5
 2498 0014 0300A0E1 		mov	r0, r3
 2499 0018 FEFFFFEB 		bl	readByte
1593:../Xilinx_src/micro.c ****         if ( xsvf_iDebugLevel > 0 )
1594:../Xilinx_src/micro.c ****         {
1595:../Xilinx_src/micro.c ****             putchar( ucText ? ucText : '\n' );
1596:../Xilinx_src/micro.c ****         }
1597:../Xilinx_src/micro.c ****     } while ( ucText );
 2500              		.loc 1 1597 0
 2501 001c 05305BE5 		ldrb	r3, [fp, #-5]	@ zero_extendqisi2
 2502 0020 000053E3 		cmp	r3, #0
 2503 0024 F9FFFF1A 		bne	.L155
1598:../Xilinx_src/micro.c **** 
1599:../Xilinx_src/micro.c ****     pXsvfInfo->iErrorCode   = XSVF_ERROR_NONE;
 2504              		.loc 1 1599 0
 2505 0028 10301BE5 		ldr	r3, [fp, #-16]
 2506 002c 0020A0E3 		mov	r2, #0
 2507 0030 082083E5 		str	r2, [r3, #8]
1600:../Xilinx_src/micro.c **** 
1601:../Xilinx_src/micro.c ****     return( pXsvfInfo->iErrorCode );
 2508              		.loc 1 1601 0
 2509 0034 10301BE5 		ldr	r3, [fp, #-16]
 2510 0038 083093E5 		ldr	r3, [r3, #8]
1602:../Xilinx_src/micro.c **** }
 2511              		.loc 1 1602 0
 2512 003c 0300A0E1 		mov	r0, r3
 2513 0040 04D04BE2 		sub	sp, fp, #4
 2514              		@ sp needed
 2515 0044 0088BDE8 		ldmfd	sp!, {fp, pc}
 2516              		.cfi_endproc
 2517              	.LFE25:
 2519              		.section	.text.xsvfDoXWAIT,"ax",%progbits
 2520              		.align	2
 2521              		.global	xsvfDoXWAIT
 2523              	xsvfDoXWAIT:
 2524              	.LFB26:
1603:../Xilinx_src/micro.c **** 
1604:../Xilinx_src/micro.c **** /*****************************************************************************
1605:../Xilinx_src/micro.c **** * Function:     xsvfDoXWAIT
1606:../Xilinx_src/micro.c **** * Description:  XWAIT <wait_state> <end_state> <wait_time>
1607:../Xilinx_src/micro.c **** *               If not already in <wait_state>, then go to <wait_state>.
1608:../Xilinx_src/micro.c **** *               Wait in <wait_state> for <wait_time> microseconds.
1609:../Xilinx_src/micro.c **** *               Finally, if not already in <end_state>, then goto <end_state>.
1610:../Xilinx_src/micro.c **** * Parameters:   pXsvfInfo   - XSVF information pointer.
1611:../Xilinx_src/micro.c **** * Returns:      int         - 0 = success;  non-zero = error.
1612:../Xilinx_src/micro.c **** *****************************************************************************/
1613:../Xilinx_src/micro.c **** int xsvfDoXWAIT( SXsvfInfo* pXsvfInfo )
1614:../Xilinx_src/micro.c **** {
 2525              		.loc 1 1614 0
 2526              		.cfi_startproc
 2527              		@ args = 0, pretend = 0, frame = 16
 2528              		@ frame_needed = 1, uses_anonymous_args = 0
 2529 0000 00482DE9 		stmfd	sp!, {fp, lr}
 2530              	.LCFI52:
 2531              		.cfi_def_cfa_offset 8
 2532              		.cfi_offset 11, -8
 2533              		.cfi_offset 14, -4
 2534 0004 04B08DE2 		add	fp, sp, #4
 2535              	.LCFI53:
 2536              		.cfi_def_cfa 11, 4
 2537 0008 10D04DE2 		sub	sp, sp, #16
 2538 000c 10000BE5 		str	r0, [fp, #-16]
1615:../Xilinx_src/micro.c ****     unsigned char   ucWaitState;
1616:../Xilinx_src/micro.c ****     unsigned char   ucEndState;
1617:../Xilinx_src/micro.c ****     long            lWaitTime;
1618:../Xilinx_src/micro.c **** 
1619:../Xilinx_src/micro.c ****     /* Get Parameters */
1620:../Xilinx_src/micro.c ****     /* <wait_state> */
1621:../Xilinx_src/micro.c ****     readVal( &(pXsvfInfo->lvTdi), 1 );
 2539              		.loc 1 1621 0
 2540 0010 10301BE5 		ldr	r3, [fp, #-16]
 2541 0014 1A3083E2 		add	r3, r3, #26
 2542 0018 0300A0E1 		mov	r0, r3
 2543 001c 0110A0E3 		mov	r1, #1
 2544 0020 FEFFFFEB 		bl	readVal
1622:../Xilinx_src/micro.c ****     ucWaitState = pXsvfInfo->lvTdi.val[0];
 2545              		.loc 1 1622 0
 2546 0024 10301BE5 		ldr	r3, [fp, #-16]
 2547 0028 1C30D3E5 		ldrb	r3, [r3, #28]
 2548 002c 05304BE5 		strb	r3, [fp, #-5]
1623:../Xilinx_src/micro.c **** 
1624:../Xilinx_src/micro.c ****     /* <end_state> */
1625:../Xilinx_src/micro.c ****     readVal( &(pXsvfInfo->lvTdi), 1 );
 2549              		.loc 1 1625 0
 2550 0030 10301BE5 		ldr	r3, [fp, #-16]
 2551 0034 1A3083E2 		add	r3, r3, #26
 2552 0038 0300A0E1 		mov	r0, r3
 2553 003c 0110A0E3 		mov	r1, #1
 2554 0040 FEFFFFEB 		bl	readVal
1626:../Xilinx_src/micro.c ****     ucEndState = pXsvfInfo->lvTdi.val[0];
 2555              		.loc 1 1626 0
 2556 0044 10301BE5 		ldr	r3, [fp, #-16]
 2557 0048 1C30D3E5 		ldrb	r3, [r3, #28]
 2558 004c 06304BE5 		strb	r3, [fp, #-6]
1627:../Xilinx_src/micro.c **** 
1628:../Xilinx_src/micro.c ****     /* <wait_time> */
1629:../Xilinx_src/micro.c ****     readVal( &(pXsvfInfo->lvTdi), 4 );
 2559              		.loc 1 1629 0
 2560 0050 10301BE5 		ldr	r3, [fp, #-16]
 2561 0054 1A3083E2 		add	r3, r3, #26
 2562 0058 0300A0E1 		mov	r0, r3
 2563 005c 0410A0E3 		mov	r1, #4
 2564 0060 FEFFFFEB 		bl	readVal
1630:../Xilinx_src/micro.c ****     lWaitTime = value( &(pXsvfInfo->lvTdi) );
 2565              		.loc 1 1630 0
 2566 0064 10301BE5 		ldr	r3, [fp, #-16]
 2567 0068 1A3083E2 		add	r3, r3, #26
 2568 006c 0300A0E1 		mov	r0, r3
 2569 0070 FEFFFFEB 		bl	value
 2570 0074 0C000BE5 		str	r0, [fp, #-12]
1631:../Xilinx_src/micro.c ****     XSVFDBG_PRINTF2( 3, "   XWAIT:  state = %s; time = %d\n",
1632:../Xilinx_src/micro.c ****                      xsvf_pzTapState[ ucWaitState ], lWaitTime );
1633:../Xilinx_src/micro.c **** 
1634:../Xilinx_src/micro.c ****     /* If not already in <wait_state>, go to <wait_state> */
1635:../Xilinx_src/micro.c ****     if ( pXsvfInfo->ucTapState != ucWaitState )
 2571              		.loc 1 1635 0
 2572 0078 10301BE5 		ldr	r3, [fp, #-16]
 2573 007c 0C30D3E5 		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 2574 0080 05205BE5 		ldrb	r2, [fp, #-5]	@ zero_extendqisi2
 2575 0084 030052E1 		cmp	r2, r3
 2576 0088 0500000A 		beq	.L158
1636:../Xilinx_src/micro.c ****     {
1637:../Xilinx_src/micro.c ****         xsvfGotoTapState( &(pXsvfInfo->ucTapState), ucWaitState );
 2577              		.loc 1 1637 0
 2578 008c 10301BE5 		ldr	r3, [fp, #-16]
 2579 0090 0C2083E2 		add	r2, r3, #12
 2580 0094 05305BE5 		ldrb	r3, [fp, #-5]	@ zero_extendqisi2
 2581 0098 0200A0E1 		mov	r0, r2
 2582 009c 0310A0E1 		mov	r1, r3
 2583 00a0 FEFFFFEB 		bl	xsvfGotoTapState
 2584              	.L158:
1638:../Xilinx_src/micro.c ****     }
1639:../Xilinx_src/micro.c **** 
1640:../Xilinx_src/micro.c ****     /* Wait for <wait_time> microseconds */
1641:../Xilinx_src/micro.c ****     waitTime( lWaitTime );
 2585              		.loc 1 1641 0
 2586 00a4 0C001BE5 		ldr	r0, [fp, #-12]
 2587 00a8 FEFFFFEB 		bl	waitTime
1642:../Xilinx_src/micro.c **** 
1643:../Xilinx_src/micro.c ****     /* If not already in <end_state>, go to <end_state> */
1644:../Xilinx_src/micro.c ****     if ( pXsvfInfo->ucTapState != ucEndState )
 2588              		.loc 1 1644 0
 2589 00ac 10301BE5 		ldr	r3, [fp, #-16]
 2590 00b0 0C30D3E5 		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 2591 00b4 06205BE5 		ldrb	r2, [fp, #-6]	@ zero_extendqisi2
 2592 00b8 030052E1 		cmp	r2, r3
 2593 00bc 0500000A 		beq	.L159
1645:../Xilinx_src/micro.c ****     {
1646:../Xilinx_src/micro.c ****         xsvfGotoTapState( &(pXsvfInfo->ucTapState), ucEndState );
 2594              		.loc 1 1646 0
 2595 00c0 10301BE5 		ldr	r3, [fp, #-16]
 2596 00c4 0C2083E2 		add	r2, r3, #12
 2597 00c8 06305BE5 		ldrb	r3, [fp, #-6]	@ zero_extendqisi2
 2598 00cc 0200A0E1 		mov	r0, r2
 2599 00d0 0310A0E1 		mov	r1, r3
 2600 00d4 FEFFFFEB 		bl	xsvfGotoTapState
 2601              	.L159:
1647:../Xilinx_src/micro.c ****     }
1648:../Xilinx_src/micro.c **** 
1649:../Xilinx_src/micro.c ****     return( XSVF_ERROR_NONE );
 2602              		.loc 1 1649 0
 2603 00d8 0030A0E3 		mov	r3, #0
1650:../Xilinx_src/micro.c **** }
 2604              		.loc 1 1650 0
 2605 00dc 0300A0E1 		mov	r0, r3
 2606 00e0 04D04BE2 		sub	sp, fp, #4
 2607              		@ sp needed
 2608 00e4 0088BDE8 		ldmfd	sp!, {fp, pc}
 2609              		.cfi_endproc
 2610              	.LFE26:
 2612              		.section	.text.xsvfInitialize,"ax",%progbits
 2613              		.align	2
 2614              		.global	xsvfInitialize
 2616              	xsvfInitialize:
 2617              	.LFB27:
1651:../Xilinx_src/micro.c **** 
1652:../Xilinx_src/micro.c **** 
1653:../Xilinx_src/micro.c **** /*============================================================================
1654:../Xilinx_src/micro.c **** * Execution Control Functions
1655:../Xilinx_src/micro.c **** ============================================================================*/
1656:../Xilinx_src/micro.c **** 
1657:../Xilinx_src/micro.c **** /*****************************************************************************
1658:../Xilinx_src/micro.c **** * Function:     xsvfInitialize
1659:../Xilinx_src/micro.c **** * Description:  Initialize the xsvf player.
1660:../Xilinx_src/micro.c **** *               Call this before running the player to initialize the data
1661:../Xilinx_src/micro.c **** *               in the SXsvfInfo struct.
1662:../Xilinx_src/micro.c **** *               xsvfCleanup is called to clean up the data in SXsvfInfo
1663:../Xilinx_src/micro.c **** *               after the XSVF is played.
1664:../Xilinx_src/micro.c **** * Parameters:   pXsvfInfo   - ptr to the XSVF information.
1665:../Xilinx_src/micro.c **** * Returns:      int - 0 = success; otherwise error.
1666:../Xilinx_src/micro.c **** *****************************************************************************/
1667:../Xilinx_src/micro.c **** int xsvfInitialize( SXsvfInfo* pXsvfInfo )
1668:../Xilinx_src/micro.c **** {
 2618              		.loc 1 1668 0
 2619              		.cfi_startproc
 2620              		@ args = 0, pretend = 0, frame = 8
 2621              		@ frame_needed = 1, uses_anonymous_args = 0
 2622 0000 00482DE9 		stmfd	sp!, {fp, lr}
 2623              	.LCFI54:
 2624              		.cfi_def_cfa_offset 8
 2625              		.cfi_offset 11, -8
 2626              		.cfi_offset 14, -4
 2627 0004 04B08DE2 		add	fp, sp, #4
 2628              	.LCFI55:
 2629              		.cfi_def_cfa 11, 4
 2630 0008 08D04DE2 		sub	sp, sp, #8
 2631 000c 08000BE5 		str	r0, [fp, #-8]
1669:../Xilinx_src/micro.c ****     /* Initialize values */
1670:../Xilinx_src/micro.c ****     pXsvfInfo->iErrorCode   = xsvfInfoInit( pXsvfInfo );
 2632              		.loc 1 1670 0
 2633 0010 08001BE5 		ldr	r0, [fp, #-8]
 2634 0014 FEFFFFEB 		bl	xsvfInfoInit
 2635 0018 0020A0E1 		mov	r2, r0
 2636 001c 08301BE5 		ldr	r3, [fp, #-8]
 2637 0020 082083E5 		str	r2, [r3, #8]
1671:../Xilinx_src/micro.c **** 
1672:../Xilinx_src/micro.c ****     if ( !pXsvfInfo->iErrorCode )
 2638              		.loc 1 1672 0
 2639 0024 08301BE5 		ldr	r3, [fp, #-8]
 2640 0028 083093E5 		ldr	r3, [r3, #8]
 2641 002c 000053E3 		cmp	r3, #0
 2642 0030 0700001A 		bne	.L162
1673:../Xilinx_src/micro.c ****     {
1674:../Xilinx_src/micro.c ****         /* Initialize the TAPs */
1675:../Xilinx_src/micro.c ****         pXsvfInfo->iErrorCode   = xsvfGotoTapState( &(pXsvfInfo->ucTapState),
 2643              		.loc 1 1675 0
 2644 0034 08301BE5 		ldr	r3, [fp, #-8]
 2645 0038 0C3083E2 		add	r3, r3, #12
 2646 003c 0300A0E1 		mov	r0, r3
 2647 0040 0010A0E3 		mov	r1, #0
 2648 0044 FEFFFFEB 		bl	xsvfGotoTapState
 2649 0048 0020A0E1 		mov	r2, r0
 2650 004c 08301BE5 		ldr	r3, [fp, #-8]
 2651 0050 082083E5 		str	r2, [r3, #8]
 2652              	.L162:
1676:../Xilinx_src/micro.c ****                                                     XTAPSTATE_RESET );
1677:../Xilinx_src/micro.c ****     }
1678:../Xilinx_src/micro.c **** 
1679:../Xilinx_src/micro.c ****     return( pXsvfInfo->iErrorCode );
 2653              		.loc 1 1679 0
 2654 0054 08301BE5 		ldr	r3, [fp, #-8]
 2655 0058 083093E5 		ldr	r3, [r3, #8]
1680:../Xilinx_src/micro.c **** }
 2656              		.loc 1 1680 0
 2657 005c 0300A0E1 		mov	r0, r3
 2658 0060 04D04BE2 		sub	sp, fp, #4
 2659              		@ sp needed
 2660 0064 0088BDE8 		ldmfd	sp!, {fp, pc}
 2661              		.cfi_endproc
 2662              	.LFE27:
 2664              		.section	.text.xsvfRun,"ax",%progbits
 2665              		.align	2
 2666              		.global	xsvfRun
 2668              	xsvfRun:
 2669              	.LFB28:
1681:../Xilinx_src/micro.c **** 
1682:../Xilinx_src/micro.c **** /*****************************************************************************
1683:../Xilinx_src/micro.c **** * Function:     xsvfRun
1684:../Xilinx_src/micro.c **** * Description:  Run the xsvf player for a single command and return.
1685:../Xilinx_src/micro.c **** *               First, call xsvfInitialize.
1686:../Xilinx_src/micro.c **** *               Then, repeatedly call this function until an error is detected
1687:../Xilinx_src/micro.c **** *               or until the pXsvfInfo->ucComplete variable is non-zero.
1688:../Xilinx_src/micro.c **** *               Finally, call xsvfCleanup to cleanup any remnants.
1689:../Xilinx_src/micro.c **** * Parameters:   pXsvfInfo   - ptr to the XSVF information.
1690:../Xilinx_src/micro.c **** * Returns:      int         - 0 = success; otherwise error.
1691:../Xilinx_src/micro.c **** *****************************************************************************/
1692:../Xilinx_src/micro.c **** int xsvfRun( SXsvfInfo* pXsvfInfo )
1693:../Xilinx_src/micro.c **** {
 2670              		.loc 1 1693 0
 2671              		.cfi_startproc
 2672              		@ args = 0, pretend = 0, frame = 8
 2673              		@ frame_needed = 1, uses_anonymous_args = 0
 2674 0000 00482DE9 		stmfd	sp!, {fp, lr}
 2675              	.LCFI56:
 2676              		.cfi_def_cfa_offset 8
 2677              		.cfi_offset 11, -8
 2678              		.cfi_offset 14, -4
 2679 0004 04B08DE2 		add	fp, sp, #4
 2680              	.LCFI57:
 2681              		.cfi_def_cfa 11, 4
 2682 0008 08D04DE2 		sub	sp, sp, #8
 2683 000c 08000BE5 		str	r0, [fp, #-8]
1694:../Xilinx_src/micro.c ****     /* Process the XSVF commands */
1695:../Xilinx_src/micro.c ****     if ( (!pXsvfInfo->iErrorCode) && (!pXsvfInfo->ucComplete) )
 2684              		.loc 1 1695 0
 2685 0010 08301BE5 		ldr	r3, [fp, #-8]
 2686 0014 083093E5 		ldr	r3, [r3, #8]
 2687 0018 000053E3 		cmp	r3, #0
 2688 001c 1A00001A 		bne	.L165
 2689              		.loc 1 1695 0 is_stmt 0 discriminator 1
 2690 0020 08301BE5 		ldr	r3, [fp, #-8]
 2691 0024 0030D3E5 		ldrb	r3, [r3]	@ zero_extendqisi2
 2692 0028 000053E3 		cmp	r3, #0
 2693 002c 1600001A 		bne	.L165
1696:../Xilinx_src/micro.c ****     {
1697:../Xilinx_src/micro.c ****         /* read 1 byte for the instruction */
1698:../Xilinx_src/micro.c ****         readByte( &(pXsvfInfo->ucCommand) );
 2694              		.loc 1 1698 0 is_stmt 1
 2695 0030 08301BE5 		ldr	r3, [fp, #-8]
 2696 0034 013083E2 		add	r3, r3, #1
 2697 0038 0300A0E1 		mov	r0, r3
 2698 003c FEFFFFEB 		bl	readByte
1699:../Xilinx_src/micro.c ****         ++(pXsvfInfo->lCommandCount);
 2699              		.loc 1 1699 0
 2700 0040 08301BE5 		ldr	r3, [fp, #-8]
 2701 0044 043093E5 		ldr	r3, [r3, #4]
 2702 0048 012083E2 		add	r2, r3, #1
 2703 004c 08301BE5 		ldr	r3, [fp, #-8]
 2704 0050 042083E5 		str	r2, [r3, #4]
1700:../Xilinx_src/micro.c **** 
1701:../Xilinx_src/micro.c ****         if ( pXsvfInfo->ucCommand < XLASTCMD )
 2705              		.loc 1 1701 0
 2706 0054 08301BE5 		ldr	r3, [fp, #-8]
 2707 0058 0130D3E5 		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2708 005c 170053E3 		cmp	r3, #23
 2709 0060 0700008A 		bhi	.L166
1702:../Xilinx_src/micro.c ****         {
1703:../Xilinx_src/micro.c ****             /* Execute the command.  Func sets error code. */
1704:../Xilinx_src/micro.c ****             XSVFDBG_PRINTF1( 2, "  %s\n",
1705:../Xilinx_src/micro.c ****                              xsvf_pzCommandName[pXsvfInfo->ucCommand] );
1706:../Xilinx_src/micro.c ****             /* If your compiler cannot take this form,
1707:../Xilinx_src/micro.c ****                then convert to a switch statement */
1708:../Xilinx_src/micro.c ****             xsvf_pfDoCmd[ pXsvfInfo->ucCommand ]( pXsvfInfo );
 2710              		.loc 1 1708 0
 2711 0064 08301BE5 		ldr	r3, [fp, #-8]
 2712 0068 0130D3E5 		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2713 006c 0320A0E1 		mov	r2, r3
 2714 0070 28309FE5 		ldr	r3, .L168
 2715 0074 023193E7 		ldr	r3, [r3, r2, asl #2]
 2716 0078 08001BE5 		ldr	r0, [fp, #-8]
 2717 007c 33FF2FE1 		blx	r3
 2718 0080 010000EA 		b	.L165
 2719              	.L166:
1709:../Xilinx_src/micro.c ****         }
1710:../Xilinx_src/micro.c ****         else
1711:../Xilinx_src/micro.c ****         {
1712:../Xilinx_src/micro.c ****             /* Illegal command value.  Func sets error code. */
1713:../Xilinx_src/micro.c ****             xsvfDoIllegalCmd( pXsvfInfo );
 2720              		.loc 1 1713 0
 2721 0084 08001BE5 		ldr	r0, [fp, #-8]
 2722 0088 FEFFFFEB 		bl	xsvfDoIllegalCmd
 2723              	.L165:
1714:../Xilinx_src/micro.c ****         }
1715:../Xilinx_src/micro.c ****     }
1716:../Xilinx_src/micro.c **** 
1717:../Xilinx_src/micro.c ****     return( pXsvfInfo->iErrorCode );
 2724              		.loc 1 1717 0
 2725 008c 08301BE5 		ldr	r3, [fp, #-8]
 2726 0090 083093E5 		ldr	r3, [r3, #8]
1718:../Xilinx_src/micro.c **** }
 2727              		.loc 1 1718 0
 2728 0094 0300A0E1 		mov	r0, r3
 2729 0098 04D04BE2 		sub	sp, fp, #4
 2730              		@ sp needed
 2731 009c 0088BDE8 		ldmfd	sp!, {fp, pc}
 2732              	.L169:
 2733              		.align	2
 2734              	.L168:
 2735 00a0 00000000 		.word	xsvf_pfDoCmd
 2736              		.cfi_endproc
 2737              	.LFE28:
 2739              		.section	.text.xsvfCleanup,"ax",%progbits
 2740              		.align	2
 2741              		.global	xsvfCleanup
 2743              	xsvfCleanup:
 2744              	.LFB29:
1719:../Xilinx_src/micro.c **** 
1720:../Xilinx_src/micro.c **** /*****************************************************************************
1721:../Xilinx_src/micro.c **** * Function:     xsvfCleanup
1722:../Xilinx_src/micro.c **** * Description:  cleanup remnants of the xsvf player.
1723:../Xilinx_src/micro.c **** * Parameters:   pXsvfInfo   - ptr to the XSVF information.
1724:../Xilinx_src/micro.c **** * Returns:      void.
1725:../Xilinx_src/micro.c **** *****************************************************************************/
1726:../Xilinx_src/micro.c **** void xsvfCleanup( SXsvfInfo* pXsvfInfo )
1727:../Xilinx_src/micro.c **** {
 2745              		.loc 1 1727 0
 2746              		.cfi_startproc
 2747              		@ args = 0, pretend = 0, frame = 8
 2748              		@ frame_needed = 1, uses_anonymous_args = 0
 2749 0000 00482DE9 		stmfd	sp!, {fp, lr}
 2750              	.LCFI58:
 2751              		.cfi_def_cfa_offset 8
 2752              		.cfi_offset 11, -8
 2753              		.cfi_offset 14, -4
 2754 0004 04B08DE2 		add	fp, sp, #4
 2755              	.LCFI59:
 2756              		.cfi_def_cfa 11, 4
 2757 0008 08D04DE2 		sub	sp, sp, #8
 2758 000c 08000BE5 		str	r0, [fp, #-8]
1728:../Xilinx_src/micro.c ****     xsvfInfoCleanup( pXsvfInfo );
 2759              		.loc 1 1728 0
 2760 0010 08001BE5 		ldr	r0, [fp, #-8]
 2761 0014 FEFFFFEB 		bl	xsvfInfoCleanup
1729:../Xilinx_src/micro.c **** }
 2762              		.loc 1 1729 0
 2763 0018 04D04BE2 		sub	sp, fp, #4
 2764              		@ sp needed
 2765 001c 0088BDE8 		ldmfd	sp!, {fp, pc}
 2766              		.cfi_endproc
 2767              	.LFE29:
 2769              		.comm	xsvfInfo,14392,4
 2770              		.section	.rodata
 2771              		.align	2
 2772              	.LC0:
 2773 0000 0A535543 		.ascii	"\012SUCCESS - Completed XSVF execution.\012\000"
 2773      43455353 
 2773      202D2043 
 2773      6F6D706C 
 2773      65746564 
 2774 0026 0000     		.section	.text.xsvfExecute,"ax",%progbits
 2775              		.align	2
 2776              		.global	xsvfExecute
 2778              	xsvfExecute:
 2779              	.LFB30:
1730:../Xilinx_src/micro.c **** 
1731:../Xilinx_src/micro.c **** 
1732:../Xilinx_src/micro.c **** /*============================================================================
1733:../Xilinx_src/micro.c **** * xsvfExecute() - The primary entry point to the XSVF player
1734:../Xilinx_src/micro.c **** ============================================================================*/
1735:../Xilinx_src/micro.c **** 
1736:../Xilinx_src/micro.c **** /*****************************************************************************
1737:../Xilinx_src/micro.c **** * Function:     xsvfExecute
1738:../Xilinx_src/micro.c **** * Description:  Process, interpret, and apply the XSVF commands.
1739:../Xilinx_src/micro.c **** *               See port.c:readByte for source of XSVF data.
1740:../Xilinx_src/micro.c **** * Parameters:   none.
1741:../Xilinx_src/micro.c **** * Returns:      int - Legacy result values:  1 == success;  0 == failed.
1742:../Xilinx_src/micro.c **** *****************************************************************************/
1743:../Xilinx_src/micro.c **** SXsvfInfo   xsvfInfo;
1744:../Xilinx_src/micro.c **** int xsvfExecute()
1745:../Xilinx_src/micro.c **** {
 2780              		.loc 1 1745 0
 2781              		.cfi_startproc
 2782              		@ args = 0, pretend = 0, frame = 0
 2783              		@ frame_needed = 1, uses_anonymous_args = 0
 2784 0000 00482DE9 		stmfd	sp!, {fp, lr}
 2785              	.LCFI60:
 2786              		.cfi_def_cfa_offset 8
 2787              		.cfi_offset 11, -8
 2788              		.cfi_offset 14, -4
 2789 0004 04B08DE2 		add	fp, sp, #4
 2790              	.LCFI61:
 2791              		.cfi_def_cfa 11, 4
1746:../Xilinx_src/micro.c **** ////	SXsvfInfo   xsvfInfo;	// Moved this to global memory so that it wasn't on the stack
1747:../Xilinx_src/micro.c **** 
1748:../Xilinx_src/micro.c **** 	xsvfInitialize( &xsvfInfo );
 2792              		.loc 1 1748 0
 2793 0008 60009FE5 		ldr	r0, .L177
 2794 000c FEFFFFEB 		bl	xsvfInitialize
1749:../Xilinx_src/micro.c **** 
1750:../Xilinx_src/micro.c ****     while ( !xsvfInfo.iErrorCode && (!xsvfInfo.ucComplete) )
 2795              		.loc 1 1750 0
 2796 0010 010000EA 		b	.L172
 2797              	.L174:
1751:../Xilinx_src/micro.c ****     {
1752:../Xilinx_src/micro.c ****         xsvfRun( &xsvfInfo );
 2798              		.loc 1 1752 0
 2799 0014 54009FE5 		ldr	r0, .L177
 2800 0018 FEFFFFEB 		bl	xsvfRun
 2801              	.L172:
1750:../Xilinx_src/micro.c ****     {
 2802              		.loc 1 1750 0 discriminator 1
 2803 001c 4C309FE5 		ldr	r3, .L177
 2804 0020 083093E5 		ldr	r3, [r3, #8]
 2805 0024 000053E3 		cmp	r3, #0
 2806 0028 0300001A 		bne	.L173
1750:../Xilinx_src/micro.c ****     {
 2807              		.loc 1 1750 0 is_stmt 0 discriminator 2
 2808 002c 3C309FE5 		ldr	r3, .L177
 2809 0030 0030D3E5 		ldrb	r3, [r3]	@ zero_extendqisi2
 2810 0034 000053E3 		cmp	r3, #0
 2811 0038 F5FFFF0A 		beq	.L174
 2812              	.L173:
1753:../Xilinx_src/micro.c ****     }
1754:../Xilinx_src/micro.c **** 
1755:../Xilinx_src/micro.c ****     if ( xsvfInfo.iErrorCode )
 2813              		.loc 1 1755 0 is_stmt 1
 2814 003c 2C309FE5 		ldr	r3, .L177
 2815 0040 083093E5 		ldr	r3, [r3, #8]
 2816 0044 000053E3 		cmp	r3, #0
 2817 0048 0200001A 		bne	.L175
1756:../Xilinx_src/micro.c ****     {
1757:../Xilinx_src/micro.c ****         XSVFDBG_PRINTF1( 0, "%s\n", xsvf_pzErrorName[
1758:../Xilinx_src/micro.c ****                          ( xsvfInfo.iErrorCode < XSVF_ERROR_LAST )
1759:../Xilinx_src/micro.c ****                          ? xsvfInfo.iErrorCode : XSVF_ERROR_UNKNOWN ] );
1760:../Xilinx_src/micro.c ****         XSVFDBG_PRINTF2( 0, "ERROR at or near XSVF command #%d.  See line #%d in the XSVF ASCII fil
1761:../Xilinx_src/micro.c ****                          xsvfInfo.lCommandCount, xsvfInfo.lCommandCount );
1762:../Xilinx_src/micro.c ****     }
1763:../Xilinx_src/micro.c ****     else
1764:../Xilinx_src/micro.c ****     {
1765:../Xilinx_src/micro.c ****     	CyU3PDebugPrint(4, "\nSUCCESS - Completed XSVF execution.\n");
 2818              		.loc 1 1765 0
 2819 004c 0400A0E3 		mov	r0, #4
 2820 0050 1C109FE5 		ldr	r1, .L177+4
 2821 0054 FEFFFFEB 		bl	CyU3PDebugPrint
 2822              	.L175:
1766:../Xilinx_src/micro.c ****         XSVFDBG_PRINTF( 0, "SUCCESS - Completed XSVF execution.\n" );
1767:../Xilinx_src/micro.c ****     }
1768:../Xilinx_src/micro.c **** 
1769:../Xilinx_src/micro.c ****     xsvfCleanup( &xsvfInfo );
 2823              		.loc 1 1769 0
 2824 0058 10009FE5 		ldr	r0, .L177
 2825 005c FEFFFFEB 		bl	xsvfCleanup
1770:../Xilinx_src/micro.c **** 
1771:../Xilinx_src/micro.c ****     return( XSVF_ERRORCODE(xsvfInfo.iErrorCode) );
 2826              		.loc 1 1771 0
 2827 0060 08309FE5 		ldr	r3, .L177
 2828 0064 083093E5 		ldr	r3, [r3, #8]
1772:../Xilinx_src/micro.c **** }
 2829              		.loc 1 1772 0
 2830 0068 0300A0E1 		mov	r0, r3
 2831 006c 0088BDE8 		ldmfd	sp!, {fp, pc}
 2832              	.L178:
 2833              		.align	2
 2834              	.L177:
 2835 0070 00000000 		.word	xsvfInfo
 2836 0074 00000000 		.word	.LC0
 2837              		.cfi_endproc
 2838              	.LFE30:
 2840              		.text
 2841              	.Letext0:
 2842              		.file 2 "../Xilinx_src/lenval.h"
DEFINED SYMBOLS
                            *ABS*:00000000 micro.c
C:\Users\Sean\AppData\Local\Temp\ccUvfbkR.s:21     .data.xsvf_pfDoCmd:00000000 xsvf_pfDoCmd
C:\Users\Sean\AppData\Local\Temp\ccUvfbkR.s:18     .data.xsvf_pfDoCmd:00000000 $d
C:\Users\Sean\AppData\Local\Temp\ccUvfbkR.s:1310   .text.xsvfDoXCOMPLETE:00000000 xsvfDoXCOMPLETE
C:\Users\Sean\AppData\Local\Temp\ccUvfbkR.s:1345   .text.xsvfDoXTDOMASK:00000000 xsvfDoXTDOMASK
C:\Users\Sean\AppData\Local\Temp\ccUvfbkR.s:1386   .text.xsvfDoXSIR:00000000 xsvfDoXSIR
C:\Users\Sean\AppData\Local\Temp\ccUvfbkR.s:1581   .text.xsvfDoXSDR:00000000 xsvfDoXSDR
C:\Users\Sean\AppData\Local\Temp\ccUvfbkR.s:1666   .text.xsvfDoXRUNTEST:00000000 xsvfDoXRUNTEST
C:\Users\Sean\AppData\Local\Temp\ccUvfbkR.s:1274   .text.xsvfDoIllegalCmd:00000000 xsvfDoIllegalCmd
C:\Users\Sean\AppData\Local\Temp\ccUvfbkR.s:1710   .text.xsvfDoXREPEAT:00000000 xsvfDoXREPEAT
C:\Users\Sean\AppData\Local\Temp\ccUvfbkR.s:1745   .text.xsvfDoXSDRSIZE:00000000 xsvfDoXSDRSIZE
C:\Users\Sean\AppData\Local\Temp\ccUvfbkR.s:1816   .text.xsvfDoXSDRTDO:00000000 xsvfDoXSDRTDO
C:\Users\Sean\AppData\Local\Temp\ccUvfbkR.s:1896   .text.xsvfDoXSETSDRMASKS:00000000 xsvfDoXSETSDRMASKS
C:\Users\Sean\AppData\Local\Temp\ccUvfbkR.s:1948   .text.xsvfDoXSDRINC:00000000 xsvfDoXSDRINC
C:\Users\Sean\AppData\Local\Temp\ccUvfbkR.s:2169   .text.xsvfDoXSDRBCE:00000000 xsvfDoXSDRBCE
C:\Users\Sean\AppData\Local\Temp\ccUvfbkR.s:2248   .text.xsvfDoXSDRTDOBCE:00000000 xsvfDoXSDRTDOBCE
C:\Users\Sean\AppData\Local\Temp\ccUvfbkR.s:2333   .text.xsvfDoXSTATE:00000000 xsvfDoXSTATE
C:\Users\Sean\AppData\Local\Temp\ccUvfbkR.s:2384   .text.xsvfDoXENDXR:00000000 xsvfDoXENDXR
C:\Users\Sean\AppData\Local\Temp\ccUvfbkR.s:1481   .text.xsvfDoXSIR2:00000000 xsvfDoXSIR2
C:\Users\Sean\AppData\Local\Temp\ccUvfbkR.s:2479   .text.xsvfDoXCOMMENT:00000000 xsvfDoXCOMMENT
C:\Users\Sean\AppData\Local\Temp\ccUvfbkR.s:2523   .text.xsvfDoXWAIT:00000000 xsvfDoXWAIT
C:\Users\Sean\AppData\Local\Temp\ccUvfbkR.s:47     .text.xsvfInfoInit:00000000 $a
C:\Users\Sean\AppData\Local\Temp\ccUvfbkR.s:50     .text.xsvfInfoInit:00000000 xsvfInfoInit
C:\Users\Sean\AppData\Local\Temp\ccUvfbkR.s:123    .text.xsvfInfoCleanup:00000000 $a
C:\Users\Sean\AppData\Local\Temp\ccUvfbkR.s:126    .text.xsvfInfoCleanup:00000000 xsvfInfoCleanup
C:\Users\Sean\AppData\Local\Temp\ccUvfbkR.s:151    .text.xsvfGetAsNumBytes:00000000 $a
C:\Users\Sean\AppData\Local\Temp\ccUvfbkR.s:154    .text.xsvfGetAsNumBytes:00000000 xsvfGetAsNumBytes
C:\Users\Sean\AppData\Local\Temp\ccUvfbkR.s:191    .text.xsvfTmsTransition:00000000 $a
C:\Users\Sean\AppData\Local\Temp\ccUvfbkR.s:194    .text.xsvfTmsTransition:00000000 xsvfTmsTransition
C:\Users\Sean\AppData\Local\Temp\ccUvfbkR.s:232    .text.xsvfGotoTapState:00000000 $a
C:\Users\Sean\AppData\Local\Temp\ccUvfbkR.s:235    .text.xsvfGotoTapState:00000000 xsvfGotoTapState
C:\Users\Sean\AppData\Local\Temp\ccUvfbkR.s:364    .text.xsvfGotoTapState:0000014c $d
C:\Users\Sean\AppData\Local\Temp\ccUvfbkR.s:382    .text.xsvfGotoTapState:0000018c $a
C:\Users\Sean\AppData\Local\Temp\ccUvfbkR.s:695    .text.xsvfShiftOnly:00000000 $a
C:\Users\Sean\AppData\Local\Temp\ccUvfbkR.s:698    .text.xsvfShiftOnly:00000000 xsvfShiftOnly
C:\Users\Sean\AppData\Local\Temp\ccUvfbkR.s:863    .text.xsvfShift:00000000 $a
C:\Users\Sean\AppData\Local\Temp\ccUvfbkR.s:866    .text.xsvfShift:00000000 xsvfShift
C:\Users\Sean\AppData\Local\Temp\ccUvfbkR.s:1049   .text.xsvfBasicXSDRTDO:00000000 $a
C:\Users\Sean\AppData\Local\Temp\ccUvfbkR.s:1052   .text.xsvfBasicXSDRTDO:00000000 xsvfBasicXSDRTDO
C:\Users\Sean\AppData\Local\Temp\ccUvfbkR.s:1114   .text.xsvfDoSDRMasking:00000000 $a
C:\Users\Sean\AppData\Local\Temp\ccUvfbkR.s:1117   .text.xsvfDoSDRMasking:00000000 xsvfDoSDRMasking
C:\Users\Sean\AppData\Local\Temp\ccUvfbkR.s:1271   .text.xsvfDoIllegalCmd:00000000 $a
C:\Users\Sean\AppData\Local\Temp\ccUvfbkR.s:1307   .text.xsvfDoXCOMPLETE:00000000 $a
C:\Users\Sean\AppData\Local\Temp\ccUvfbkR.s:1342   .text.xsvfDoXTDOMASK:00000000 $a
C:\Users\Sean\AppData\Local\Temp\ccUvfbkR.s:1383   .text.xsvfDoXSIR:00000000 $a
C:\Users\Sean\AppData\Local\Temp\ccUvfbkR.s:1478   .text.xsvfDoXSIR2:00000000 $a
C:\Users\Sean\AppData\Local\Temp\ccUvfbkR.s:1578   .text.xsvfDoXSDR:00000000 $a
C:\Users\Sean\AppData\Local\Temp\ccUvfbkR.s:1663   .text.xsvfDoXRUNTEST:00000000 $a
C:\Users\Sean\AppData\Local\Temp\ccUvfbkR.s:1707   .text.xsvfDoXREPEAT:00000000 $a
C:\Users\Sean\AppData\Local\Temp\ccUvfbkR.s:1742   .text.xsvfDoXSDRSIZE:00000000 $a
C:\Users\Sean\AppData\Local\Temp\ccUvfbkR.s:1813   .text.xsvfDoXSDRTDO:00000000 $a
C:\Users\Sean\AppData\Local\Temp\ccUvfbkR.s:1893   .text.xsvfDoXSETSDRMASKS:00000000 $a
C:\Users\Sean\AppData\Local\Temp\ccUvfbkR.s:1945   .text.xsvfDoXSDRINC:00000000 $a
C:\Users\Sean\AppData\Local\Temp\ccUvfbkR.s:2160   .text.xsvfDoXSDRINC:00000288 $d
C:\Users\Sean\AppData\Local\Temp\ccUvfbkR.s:2166   .text.xsvfDoXSDRBCE:00000000 $a
C:\Users\Sean\AppData\Local\Temp\ccUvfbkR.s:2245   .text.xsvfDoXSDRTDOBCE:00000000 $a
C:\Users\Sean\AppData\Local\Temp\ccUvfbkR.s:2330   .text.xsvfDoXSTATE:00000000 $a
C:\Users\Sean\AppData\Local\Temp\ccUvfbkR.s:2381   .text.xsvfDoXENDXR:00000000 $a
C:\Users\Sean\AppData\Local\Temp\ccUvfbkR.s:2476   .text.xsvfDoXCOMMENT:00000000 $a
C:\Users\Sean\AppData\Local\Temp\ccUvfbkR.s:2520   .text.xsvfDoXWAIT:00000000 $a
C:\Users\Sean\AppData\Local\Temp\ccUvfbkR.s:2613   .text.xsvfInitialize:00000000 $a
C:\Users\Sean\AppData\Local\Temp\ccUvfbkR.s:2616   .text.xsvfInitialize:00000000 xsvfInitialize
C:\Users\Sean\AppData\Local\Temp\ccUvfbkR.s:2665   .text.xsvfRun:00000000 $a
C:\Users\Sean\AppData\Local\Temp\ccUvfbkR.s:2668   .text.xsvfRun:00000000 xsvfRun
C:\Users\Sean\AppData\Local\Temp\ccUvfbkR.s:2735   .text.xsvfRun:000000a0 $d
C:\Users\Sean\AppData\Local\Temp\ccUvfbkR.s:2740   .text.xsvfCleanup:00000000 $a
C:\Users\Sean\AppData\Local\Temp\ccUvfbkR.s:2743   .text.xsvfCleanup:00000000 xsvfCleanup
                            *COM*:00003838 xsvfInfo
C:\Users\Sean\AppData\Local\Temp\ccUvfbkR.s:2771   .rodata:00000000 $d
C:\Users\Sean\AppData\Local\Temp\ccUvfbkR.s:2775   .text.xsvfExecute:00000000 $a
C:\Users\Sean\AppData\Local\Temp\ccUvfbkR.s:2778   .text.xsvfExecute:00000000 xsvfExecute
C:\Users\Sean\AppData\Local\Temp\ccUvfbkR.s:2835   .text.xsvfExecute:00000070 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
setPort
readTDOBit
waitTime
EqualLenVal
readVal
addVal
readByte
value
CyU3PDebugPrint
